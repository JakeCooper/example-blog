{"version":3,"sources":["components/Admin/PostForm/PostForm.js","components/Admin/PostsList/PostsList.js","components/Admin/PostsCell/PostsCell.js","components/Admin/NewPost/NewPost.js","pages/Admin/NewPostPage/NewPostPage.js"],"names":["CSS","PostForm","props","splashImage","setSplashImage","useState","post","image","error","onSubmit","data","type","document","activeElement","dataset","action","onSave","Object","assign","event","preventDefault","name","className","errorClassName","defaultValue","title","validation","required","slug","pattern","value","message","author","body","apikey","process","env","FILESTACK_API_KEY","onSuccess","response","upload","filesUploaded","console","info","url","componentDisplayMode","actionOptions","displayMode","container","fromSources","id","src","alt","href","onClick","save","data-action","disabled","loading","publish","HIDE_POST_MUTATION","gql","DELETE_POST_MUTATION","PostsList","posts","hidePost","useMutation","onCompleted","location","reload","refetchQueries","query","QUERY","awaitRefetchQueries","deletePost","onHideClick","target","confirm","variables","parseInt","onDeleteClick","map","key","to","routes","adminEdit","split","length","wordCount","postedAt","dateTime","formatDistanceToNow","Date","addSuffix","format","data-id","data-title","allPosts","CREATE_POST_MUTATION","NewPost","createPost","input","NewPostPage"],"mappings":"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","file":"static/js/7.aeef94a5.chunk.js","sourcesContent":["import { useState } from 'react'\nimport {\n  Form,\n  TextField,\n  TextAreaField,\n  Submit,\n  Label,\n  FieldError,\n} from '@redwoodjs/forms'\nimport ReactFilestack from 'filestack-react'\n\nconst CSS = {\n  label:\n    'block mt-6 uppercase text-sm font-semibold tracking-wider text-gray-500',\n  labelError:\n    'block mt-6 uppercase text-sm font-semibold tracking-wider text-red-700',\n  input:\n    'block mt-2 w-full p-2 border text-lg text-gray-900 rounded focus:outline-none focus:border-indigo-300',\n  inputError:\n    'block mt-2 w-full p-2 border border-red-500 text-lg text-red-700 rounded focus:outline-none focus:border-red-700',\n  error: 'block mt-1 font-semibold uppercase text-xs text-red-600',\n  save:\n    'px-6 py-2 bg-gray-400 text-gray-600 text-sm rounded mr-4 uppercase font-bold tracking-wide',\n  publish:\n    'px-6 py-2 bg-indigo-700 text-white text-sm rounded uppercase font-bold tracking-wider',\n}\n\nconst PostForm = (props) => {\n  const [splashImage, setSplashImage] = useState(props.post?.image)\n\n  const onSubmit = (data) => {\n    const type = document.activeElement.dataset.action\n    props.onSave(Object.assign(data, { image: splashImage }), type)\n    event.preventDefault()\n  }\n\n  const replaceImage = (event) => {\n    event.preventDefault()\n\n    setSplashImage(null)\n  }\n\n  const onFileUpload = (response) => {\n    const upload = response.filesUploaded[0]\n    console.info(response)\n    setSplashImage(upload.url)\n  }\n\n  return (\n    <Form error={props.error} onSubmit={onSubmit}>\n      <Label\n        name=\"title\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextField\n        name=\"title\"\n        defaultValue={props.post?.title}\n        className={CSS.input}\n        errorClassName={CSS.inputError}\n        validation={{ required: true }}\n      />\n      <FieldError name=\"title\" className={CSS.error} />\n\n      <Label\n        name=\"slug\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextField\n        name=\"slug\"\n        defaultValue={props.post?.slug}\n        className={CSS.input}\n        errorClassName={CSS.inputError}\n        validation={{\n          required: true,\n          pattern: { value: /^\\S+$/, message: 'cannot contain spaces' },\n        }}\n      />\n      <FieldError name=\"slug\" className={CSS.error} />\n\n      <Label\n        name=\"author\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextField\n        name=\"author\"\n        defaultValue={props.post?.author}\n        className={CSS.input}\n        errorClassName={CSS.inputError}\n        validation={{ required: true }}\n      />\n      <FieldError name=\"author\" className={CSS.error} />\n\n      <Label\n        name=\"body\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextAreaField\n        name=\"body\"\n        defaultValue={props.post?.body}\n        className={CSS.input + ' h-64'}\n        errorClassName={CSS.inputError + ' h-64'}\n        validation={{ required: true }}\n      />\n      <FieldError name=\"body\" className={CSS.error} />\n\n      <label className={CSS.label}>Splash Image</label>\n\n      <ReactFilestack\n        apikey={process.env.FILESTACK_API_KEY}\n        onSuccess={onFileUpload}\n        componentDisplayMode={{\n          type: 'immediate',\n        }}\n        actionOptions={{\n          displayMode: 'inline',\n          container: 'embedded',\n          fromSources: ['local_file_system', 'url'],\n        }}\n      />\n\n      <div\n        id=\"embedded\"\n        className={`h-80 ${splashImage ? 'hidden' : ''}`}\n      ></div>\n\n      {splashImage && (\n        <div className=\"mt-2\">\n          <img src={splashImage} alt=\"Splash image\" className=\"max-h-80\" />\n\n          <div className=\"mt-4\">\n            <a href=\"#\" onClick={replaceImage} className={`mt-4 ${CSS.save}`}>\n              Replace Image\n            </a>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex justify-end mt-4\">\n        {props.save && (\n          <Submit\n            data-action=\"save\"\n            disabled={props.loading}\n            className={CSS.save}\n          >\n            Save\n          </Submit>\n        )}\n        <Submit\n          data-action=\"publish\"\n          disabled={props.loading}\n          className={CSS.publish}\n        >\n          {props.publish || 'Publish'}\n        </Submit>\n      </div>\n    </Form>\n  )\n}\n\nexport default PostForm\n","import { useMutation } from '@redwoodjs/web'\nimport { Link, routes } from '@redwoodjs/router'\nimport { format, formatDistanceToNow } from 'date-fns'\n\nimport { QUERY } from 'src/components/Admin/PostsCell'\n\nconst HIDE_POST_MUTATION = gql`\n  mutation HidePostMutation($id: ID!) {\n    hidePost(id: $id) {\n      id\n    }\n  }\n`\n\nconst DELETE_POST_MUTATION = gql`\n  mutation DeletePostMutation($id: ID!) {\n    deletePost(id: $id) {\n      id\n    }\n  }\n`\n\nconst wordCount = (post) => {\n  return post.body.split(' ').length\n}\n\nconst PostsList = ({ posts }) => {\n  const [hidePost] = useMutation(HIDE_POST_MUTATION, {\n    onCompleted: () => {\n      location.reload()\n    },\n    // This refetches the query on the list page. Read more about other ways to\n    // update the cache over here:\n    // https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    refetchQueries: [{ query: QUERY }],\n    awaitRefetchQueries: true,\n  })\n\n  const [deletePost] = useMutation(DELETE_POST_MUTATION, {\n    onCompleted: () => {\n      location.reload()\n    },\n    // This refetches the query on the list page. Read more about other ways to\n    // update the cache over here:\n    // https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    refetchQueries: [{ query: QUERY }],\n    awaitRefetchQueries: true,\n  })\n\n  const onHideClick = (event) => {\n    const id = event.target.dataset.id\n    const title = event.target.dataset.title\n\n    if (confirm(`Are you sure you want to un-publish post \"${title}\"?`)) {\n      hidePost({ variables: { id: parseInt(id) } })\n    }\n  }\n\n  const onDeleteClick = (event) => {\n    const id = event.target.dataset.id\n    const title = event.target.dataset.title\n\n    if (confirm(`Are you sure you want to delete post \"${title}\"?`)) {\n      deletePost({ variables: { id: parseInt(id) } })\n    }\n  }\n\n  return (\n    <table className=\"w-full\">\n      <tbody>\n        {posts.map((post) => (\n          <tr key={post.id}>\n            <td className=\"py-2\">\n              <Link\n                to={routes.adminEdit({ id: post.id })}\n                className=\"font-semibold text-indigo-700\"\n              >\n                {post.title}\n              </Link>\n              <p className=\"text-sm text-gray-600\">by {post.author}</p>\n            </td>\n            <td className=\"py-2 text-sm text-center\">\n              {wordCount(post)} words\n            </td>\n            <td className=\"py-2 text-sm text-right\">\n              {post.postedAt ? (\n                <>\n                  <span className=\"block\">\n                    Published{' '}\n                    <time dateTime={post.postedAt}>\n                      {formatDistanceToNow(new Date(post.postedAt), {\n                        addSuffix: true,\n                      })}\n                    </time>\n                  </span>\n                  <time\n                    className=\"block text-gray-500\"\n                    dateTime={post.postedAt}\n                  >\n                    {format(new Date(post.postedAt), 'PPPPp')}\n                  </time>\n                </>\n              ) : (\n                <span className=\"text-xs bg-gray-300 text-gray-600 font-semibold tracking-wide uppercase px-2 py-1 rounded\">\n                  Draft\n                </span>\n              )}\n            </td>\n            <td className=\"py-2 text-right text-xs\">\n              {post.postedAt && (\n                <a\n                  href=\"#\"\n                  data-id={post.id}\n                  data-title={post.title}\n                  className=\"mr-3 text-indigo-600 hover:underline\"\n                  onClick={onHideClick}\n                >\n                  Hide\n                </a>\n              )}\n              <a\n                href=\"#\"\n                data-id={post.id}\n                data-title={post.title}\n                className=\"text-red-600 hover:underline\"\n                onClick={onDeleteClick}\n              >\n                Delete\n              </a>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n\nexport default PostsList\n","import PostsList from 'src/components/Admin/PostsList'\n\nexport const QUERY = gql`\n  query ALL_POSTS {\n    allPosts {\n      posts {\n        id\n        title\n        slug\n        author\n        body\n        image\n        postedAt\n        tags {\n          id\n          name\n        }\n      }\n    }\n  }\n`\n\nexport const Loading = () => <div>Loading...</div>\n\nexport const Success = ({ allPosts }) => {\n  return <PostsList posts={allPosts.posts} />\n}\n","import { useMutation } from '@redwoodjs/web'\nimport PostForm from 'src/components/Admin/PostForm'\n\nimport { QUERY } from 'src/components/Admin/PostsCell'\n\nconst CREATE_POST_MUTATION = gql`\n  mutation CreatePostMutation($input: PostInput!) {\n    createPost(input: $input) {\n      id\n    }\n  }\n`\n\nconst NewPost = () => {\n  const [createPost, { loading, error }] = useMutation(CREATE_POST_MUTATION, {\n    onCompleted: () => {\n      location.href = '/admin'\n    },\n    // This refetches the query on the list page. Read more about other ways to\n    // update the cache over here:\n    // https://www.apollographql.com/docs/react/data/mutations/#making-all-other-cache-updates\n    refetchQueries: [{ query: QUERY }],\n    awaitRefetchQueries: true,\n  })\n\n  const onSave = (data, type) => {\n    if (type === 'publish') {\n      data.postedAt = new Date()\n    }\n    createPost({ variables: { input: data } })\n  }\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-semibold text-gray-600\">New Post</h1>\n      <div className=\"mt-8\">\n        <PostForm save={true} onSave={onSave} loading={loading} error={error} />\n      </div>\n    </div>\n  )\n}\n\nexport default NewPost\n","import NewPost from 'src/components/Admin/NewPost'\n\nconst NewPostPage = () => {\n  return <NewPost />\n}\n\nexport default NewPostPage\n"],"sourceRoot":""}