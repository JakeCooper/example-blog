{"version":3,"sources":["components/Admin/PostForm/PostForm.js","components/Admin/EditPostCell/EditPostCell.js","pages/Admin/EditPostPage/EditPostPage.js"],"names":["CSS","PostForm","props","splashImage","setSplashImage","useState","post","image","error","onSubmit","data","type","document","activeElement","dataset","action","onSave","Object","assign","event","preventDefault","name","className","errorClassName","defaultValue","title","validation","required","slug","pattern","value","message","author","body","apikey","process","env","FILESTACK_API_KEY","onSuccess","response","upload","filesUploaded","console","info","url","componentDisplayMode","actionOptions","displayMode","container","fromSources","id","src","alt","href","onClick","save","data-action","disabled","loading","publish","QUERY","gql","UPDATE_POST_MUTATION","variables","updatePost","updateLoading","updateError","useMutation","onCompleted","location","postedAt","Date","parseInt","input","EditPostPage","useParams","EditPostCell"],"mappings":"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","file":"static/js/8.557559e1.chunk.js","sourcesContent":["import { useState } from 'react'\nimport {\n  Form,\n  TextField,\n  TextAreaField,\n  Submit,\n  Label,\n  FieldError,\n} from '@redwoodjs/forms'\nimport ReactFilestack from 'filestack-react'\n\nconst CSS = {\n  label:\n    'block mt-6 uppercase text-sm font-semibold tracking-wider text-gray-500',\n  labelError:\n    'block mt-6 uppercase text-sm font-semibold tracking-wider text-red-700',\n  input:\n    'block mt-2 w-full p-2 border text-lg text-gray-900 rounded focus:outline-none focus:border-indigo-300',\n  inputError:\n    'block mt-2 w-full p-2 border border-red-500 text-lg text-red-700 rounded focus:outline-none focus:border-red-700',\n  error: 'block mt-1 font-semibold uppercase text-xs text-red-600',\n  save:\n    'px-6 py-2 bg-gray-400 text-gray-600 text-sm rounded mr-4 uppercase font-bold tracking-wide',\n  publish:\n    'px-6 py-2 bg-indigo-700 text-white text-sm rounded uppercase font-bold tracking-wider',\n}\n\nconst PostForm = (props) => {\n  const [splashImage, setSplashImage] = useState(props.post?.image)\n\n  const onSubmit = (data) => {\n    const type = document.activeElement.dataset.action\n    props.onSave(Object.assign(data, { image: splashImage }), type)\n    event.preventDefault()\n  }\n\n  const replaceImage = (event) => {\n    event.preventDefault()\n\n    setSplashImage(null)\n  }\n\n  const onFileUpload = (response) => {\n    const upload = response.filesUploaded[0]\n    console.info(response)\n    setSplashImage(upload.url)\n  }\n\n  return (\n    <Form error={props.error} onSubmit={onSubmit}>\n      <Label\n        name=\"title\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextField\n        name=\"title\"\n        defaultValue={props.post?.title}\n        className={CSS.input}\n        errorClassName={CSS.inputError}\n        validation={{ required: true }}\n      />\n      <FieldError name=\"title\" className={CSS.error} />\n\n      <Label\n        name=\"slug\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextField\n        name=\"slug\"\n        defaultValue={props.post?.slug}\n        className={CSS.input}\n        errorClassName={CSS.inputError}\n        validation={{\n          required: true,\n          pattern: { value: /^\\S+$/, message: 'cannot contain spaces' },\n        }}\n      />\n      <FieldError name=\"slug\" className={CSS.error} />\n\n      <Label\n        name=\"author\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextField\n        name=\"author\"\n        defaultValue={props.post?.author}\n        className={CSS.input}\n        errorClassName={CSS.inputError}\n        validation={{ required: true }}\n      />\n      <FieldError name=\"author\" className={CSS.error} />\n\n      <Label\n        name=\"body\"\n        className={CSS.label}\n        errorClassName={CSS.labelError}\n      />\n      <TextAreaField\n        name=\"body\"\n        defaultValue={props.post?.body}\n        className={CSS.input + ' h-64'}\n        errorClassName={CSS.inputError + ' h-64'}\n        validation={{ required: true }}\n      />\n      <FieldError name=\"body\" className={CSS.error} />\n\n      <label className={CSS.label}>Splash Image</label>\n\n      <ReactFilestack\n        apikey={process.env.FILESTACK_API_KEY}\n        onSuccess={onFileUpload}\n        componentDisplayMode={{\n          type: 'immediate',\n        }}\n        actionOptions={{\n          displayMode: 'inline',\n          container: 'embedded',\n          fromSources: ['local_file_system', 'url'],\n        }}\n      />\n\n      <div\n        id=\"embedded\"\n        className={`h-80 ${splashImage ? 'hidden' : ''}`}\n      ></div>\n\n      {splashImage && (\n        <div className=\"mt-2\">\n          <img src={splashImage} alt=\"Splash image\" className=\"max-h-80\" />\n\n          <div className=\"mt-4\">\n            <a href=\"#\" onClick={replaceImage} className={`mt-4 ${CSS.save}`}>\n              Replace Image\n            </a>\n          </div>\n        </div>\n      )}\n\n      <div className=\"flex justify-end mt-4\">\n        {props.save && (\n          <Submit\n            data-action=\"save\"\n            disabled={props.loading}\n            className={CSS.save}\n          >\n            Save\n          </Submit>\n        )}\n        <Submit\n          data-action=\"publish\"\n          disabled={props.loading}\n          className={CSS.publish}\n        >\n          {props.publish || 'Publish'}\n        </Submit>\n      </div>\n    </Form>\n  )\n}\n\nexport default PostForm\n","import { useMutation } from '@redwoodjs/web'\nimport PostForm from 'src/components/Admin/PostForm'\n\nexport const QUERY = gql`\n  query FIND_POST_BY_ID($id: ID!) {\n    post: findPostById(id: $id) {\n      id\n      title\n      slug\n      author\n      body\n      image\n      postedAt\n      tags {\n        id\n        name\n      }\n    }\n  }\n`\nconst UPDATE_POST_MUTATION = gql`\n  mutation UpdatePost($id: ID!, $input: PostInput!) {\n    updatePost(id: $id, input: $input) {\n      id\n      title\n      slug\n      author\n      body\n      image\n      postedAt\n      tags {\n        id\n        name\n      }\n    }\n  }\n`\n\nexport const beforeQuery = ({ id }) => {\n  return { variables: { id } }\n}\n\nexport const Loading = () => <div>Loading...</div>\n\nexport const Success = ({ post }) => {\n  const [\n    updatePost,\n    { loading: updateLoading, error: updateError },\n  ] = useMutation(UPDATE_POST_MUTATION, {\n    onCompleted: () => {\n      location.href = '/admin'\n    },\n  })\n\n  const onSave = (data, type) => {\n    if (type === 'publish') {\n      data.postedAt = new Date()\n    }\n    updatePost({ variables: { id: parseInt(post.id), input: data } })\n  }\n\n  return (\n    <div>\n      <h1 className=\"text-2xl font-semibold text-gray-600\">\n        Edit Post {post.id}\n      </h1>\n      <div className=\"mt-8\">\n        <PostForm\n          post={post}\n          save={false}\n          publish=\"Update\"\n          onSave={onSave}\n          error={updateError}\n          loading={updateLoading}\n        />\n      </div>\n    </div>\n  )\n}\n","import { useParams } from '@redwoodjs/router'\nimport EditPostCell from 'src/components/Admin/EditPostCell'\n\nconst EditPostPage = () => {\n  const { id } = useParams()\n\n  return <EditPostCell id={id} />\n}\n\nexport default EditPostPage\n"],"sourceRoot":""}