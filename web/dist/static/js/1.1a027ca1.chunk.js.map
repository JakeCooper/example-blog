{"version":3,"sources":["../../node_modules/markdown-it/lib/common/utils.js","../../node_modules/markdown-it/index.js","../../node_modules/html-truncate/lib/truncate.js","../../node_modules/uc.micro/categories/P/regex.js","../../node_modules/markdown-it/lib/ruler.js","../../node_modules/markdown-it/lib/token.js","../../node_modules/markdown-it/lib/common/entities.js","../../node_modules/mdurl/index.js","../../node_modules/uc.micro/properties/Any/regex.js","../../node_modules/uc.micro/categories/Cc/regex.js","../../node_modules/uc.micro/categories/Z/regex.js","../../node_modules/markdown-it/lib/common/html_re.js","../../node_modules/markdown-it/lib/rules_inline/strikethrough.js","../../node_modules/markdown-it/lib/rules_inline/emphasis.js","../../node_modules/markdown-it/lib/index.js","../../node_modules/mdurl/encode.js","../../node_modules/mdurl/decode.js","../../node_modules/mdurl/format.js","../../node_modules/mdurl/parse.js","../../node_modules/uc.micro/index.js","../../node_modules/uc.micro/categories/Cf/regex.js","../../node_modules/markdown-it/lib/helpers/index.js","../../node_modules/markdown-it/lib/helpers/parse_link_label.js","../../node_modules/markdown-it/lib/helpers/parse_link_destination.js","../../node_modules/markdown-it/lib/helpers/parse_link_title.js","../../node_modules/markdown-it/lib/renderer.js","../../node_modules/markdown-it/lib/parser_core.js","../../node_modules/markdown-it/lib/rules_core/normalize.js","../../node_modules/markdown-it/lib/rules_core/block.js","../../node_modules/markdown-it/lib/rules_core/inline.js","../../node_modules/markdown-it/lib/rules_core/linkify.js","../../node_modules/markdown-it/lib/rules_core/replacements.js","../../node_modules/markdown-it/lib/rules_core/smartquotes.js","../../node_modules/markdown-it/lib/rules_core/state_core.js","../../node_modules/markdown-it/lib/parser_block.js","../../node_modules/markdown-it/lib/rules_block/table.js","../../node_modules/markdown-it/lib/rules_block/code.js","../../node_modules/markdown-it/lib/rules_block/fence.js","../../node_modules/markdown-it/lib/rules_block/blockquote.js","../../node_modules/markdown-it/lib/rules_block/hr.js","../../node_modules/markdown-it/lib/rules_block/list.js","../../node_modules/markdown-it/lib/rules_block/reference.js","../../node_modules/markdown-it/lib/rules_block/heading.js","../../node_modules/markdown-it/lib/rules_block/lheading.js","../../node_modules/markdown-it/lib/rules_block/html_block.js","../../node_modules/markdown-it/lib/common/html_blocks.js","../../node_modules/markdown-it/lib/rules_block/paragraph.js","../../node_modules/markdown-it/lib/rules_block/state_block.js","../../node_modules/markdown-it/lib/parser_inline.js","../../node_modules/markdown-it/lib/rules_inline/text.js","../../node_modules/markdown-it/lib/rules_inline/newline.js","../../node_modules/markdown-it/lib/rules_inline/escape.js","../../node_modules/markdown-it/lib/rules_inline/backticks.js","../../node_modules/markdown-it/lib/rules_inline/link.js","../../node_modules/markdown-it/lib/rules_inline/image.js","../../node_modules/markdown-it/lib/rules_inline/autolink.js","../../node_modules/markdown-it/lib/rules_inline/html_inline.js","../../node_modules/markdown-it/lib/rules_inline/entity.js","../../node_modules/markdown-it/lib/rules_inline/balance_pairs.js","../../node_modules/markdown-it/lib/rules_inline/text_collapse.js","../../node_modules/markdown-it/lib/rules_inline/state_inline.js","../../node_modules/linkify-it/index.js","../../node_modules/linkify-it/lib/re.js","../../node_modules/node-libs-browser/node_modules/punycode/punycode.js","../../node_modules/markdown-it/lib/presets/default.js","../../node_modules/markdown-it/lib/presets/zero.js","../../node_modules/markdown-it/lib/presets/commonmark.js"],"names":["_hasOwnProperty","Object","prototype","hasOwnProperty","has","object","key","call","isValidEntityCode","c","fromCodePoint","surrogate1","surrogate2","String","fromCharCode","UNESCAPE_MD_RE","UNESCAPE_ALL_RE","RegExp","source","DIGITAL_ENTITY_TEST_RE","entities","HTML_ESCAPE_TEST_RE","HTML_ESCAPE_REPLACE_RE","HTML_REPLACEMENTS","replaceUnsafeChar","ch","REGEXP_ESCAPE_RE","UNICODE_PUNCT_RE","exports","lib","mdurl","ucmicro","assign","obj","sources","Array","slice","arguments","forEach","TypeError","keys","isString","toString","_class","unescapeMd","str","indexOf","replace","unescapeAll","match","escaped","entity","name","code","charCodeAt","test","toLowerCase","parseInt","replaceEntityPattern","escapeHtml","arrayReplaceAt","src","pos","newElements","concat","isSpace","isWhiteSpace","isMdAsciiPunct","isPunctChar","escapeRE","normalizeReference","trim","toUpperCase","module","string","maxLength","options","result","index","tag","selfClose","html","DEFAULT_SLOP","EXCLUDE_TAGS","items","total","content","KEY_VALUE_REGEX","SELF_CLOSE_REGEX","HTML_TAG_REGEX","URL_REGEX","IMAGE_TAG_REGEX","WORD_BREAK_REGEX","matches","_getTag","tail","Error","substring","_getEndPosition","tailPos","substr","defaultPos","position","isShort","slop","slopPos","startSlice","endSlice","truncateLastWord","length","exec","charAt","ellipsis","undefined","pop","push","reverse","keepImageTag","len","_removeImageTag","Ruler","this","__rules__","__cache__","__find__","i","__compile__","self","chains","rule","enabled","alt","altName","chain","fn","at","opt","before","beforeName","ruleName","splice","after","afterName","enable","list","ignoreInvalid","isArray","idx","enableOnly","disable","getRules","chainName","Token","type","nesting","attrs","map","level","children","markup","info","meta","block","hidden","attrIndex","attrPush","attrData","attrSet","value","attrGet","attrJoin","encode","decode","format","parse","open_tag","close_tag","HTML_TAG_RE","HTML_OPEN_CLOSE_TAG_RE","postProcess","state","delimiters","j","startDelim","endDelim","token","loneMarkers","max","marker","end","tokens","tokenize","silent","scanned","start","scanDelims","jump","open","can_open","close","can_close","curr","tokens_meta","isStrong","utils","helpers","Renderer","ParserCore","ParserBlock","ParserInline","LinkifyIt","punycode","config","zero","commonmark","BAD_PROTO_RE","GOOD_DATA_RE","validateLink","url","RECODE_HOSTNAME_FOR","normalizeLink","parsed","hostname","protocol","toASCII","er","normalizeLinkText","toUnicode","MarkdownIt","presetName","inline","core","renderer","linkify","configure","set","presets","components","rules","ruler","rules2","ruler2","missed","filter","use","plugin","args","apply","env","State","process","render","parseInline","inlineMode","renderInline","encodeCache","exclude","keepEscaped","l","nextCode","cache","defaultChars","getEncodeCache","encodeURIComponent","componentChars","decodeCache","getDecodeCache","seq","b1","b2","b3","b4","chr","slashes","auth","port","pathname","search","hash","Url","protocolPattern","portPattern","simplePathPattern","unwise","autoEscape","nonHostChars","hostEndingChars","hostnamePartPattern","hostnamePartStart","hostlessProtocol","slashedProtocol","slashesDenoteHost","lowerProto","hec","rest","split","simplePath","proto","atSign","hostEnd","lastIndexOf","host","parseHost","ipv6Hostname","hostparts","part","newpart","k","validParts","notHost","bit","unshift","join","qm","u","Any","Cc","Cf","P","Z","parseLinkLabel","parseLinkDestination","parseLinkTitle","disableNested","found","prevPos","labelEnd","posMax","oldPos","md","skipToken","ok","lines","default_rules","code_inline","slf","renderAttrs","code_block","fence","highlighted","tmpAttrs","tmpToken","langName","highlight","langPrefix","image","renderInlineAsText","renderToken","hardbreak","xhtmlOut","softbreak","breaks","text","html_block","html_inline","nextToken","needLf","_rules","Core","NEWLINES_RE","NULL_RE","tok","isLinkClose","currentToken","nodes","ln","lastPos","htmlLinkLevel","fullUrl","urlText","links","blockTokens","pretest","schema","lastIndex","RARE_RE","SCOPED_ABBR_TEST_RE","SCOPED_ABBR_RE","SCOPED_ABBR","r","p","tm","replaceFn","replace_scoped","inlineTokens","inside_autolink","replace_rare","blkIdx","typographer","QUOTE_TEST_RE","QUOTE_RE","replaceAt","process_inlines","t","thisLevel","item","lastChar","nextChar","isLastPunctChar","isNextPunctChar","isLastWhiteSpace","isNextWhiteSpace","canOpen","canClose","isSingle","stack","openQuote","closeQuote","OUTER","single","quotes","StateCore","startLine","endLine","line","hasEmptyLines","maxNesting","skipEmptyLines","sCount","blkIndent","tight","isEmpty","outTokens","lineMax","getLine","bMarks","eMarks","escapedSplit","escapes","backTicked","lastBackTick","lineText","nextLine","columns","columnCount","aligns","tableLines","tbodyLines","tShift","last","getLines","params","mem","haveEndMarker","skipChars","skipSpaces","adjustTab","initial","lastLineEmpty","offset","oldBMarks","oldBSCount","oldIndent","oldParentType","oldSCount","oldTShift","spaceAfterMarker","terminate","terminatorRules","wasOutdented","oldLineMax","bsCount","parentType","cnt","skipBulletListMarker","skipOrderedListMarker","contentStart","indent","indentAfterMarker","isOrdered","itemLines","listLines","listTokIdx","markerCharCode","markerValue","oldListIndent","oldTight","posAfterMarker","prevEmptyEnd","isTerminatingParagraph","listIndent","Number","Math","min","markTightParagraphs","_endLine","destEndPos","destEndLineNo","href","label","res","title","references","tmp","skipSpacesBack","skipCharsBack","block_names","HTML_SEQUENCES","StateBlock","s","indent_found","ddIndent","from","begin","keepLastLF","lineIndent","first","queue","lineStart","_rules2","pending","pushPending","isTerminatorChar","pmax","ESCAPED","matchStart","matchEnd","labelStart","ref","parseReference","EMAIL_RE","AUTOLINK_RE","linkMatch","emailMatch","lc","isLetter","DIGITAL_RE","NAMED_RE","processDelimiters","closerIdx","openerIdx","closer","opener","minOpenerIdx","newMinOpenerIdx","isOddMatch","lastJump","openersBottom","StateInline","pendingLevel","_prev_delimiters","token_meta","canSplitWord","count","left_flanking","right_flanking","isFunction","defaultOptions","fuzzyLink","fuzzyEmail","fuzzyIP","defaultSchemas","validate","re","http","src_auth","src_host_port_strict","src_path","no_http","src_domain","src_domain_root","src_port","src_host_terminator","mailto","src_email_name","src_host_strict","tlds_default","compile","__opts__","tlds","__tlds__","untpl","tpl","src_tlds","onCompile","__tlds_replaced__","src_xn","email_fuzzy","tpl_email_fuzzy","link_fuzzy","tpl_link_fuzzy","link_no_ip_fuzzy","tpl_link_no_ip_fuzzy","host_fuzzy_test","tpl_host_fuzzy_test","aliases","schemaError","val","__compiled__","__schemas__","compiled","link","isRegExp","createValidator","normalize","alias","slist","schema_test","src_ZPCc","schema_search","__index__","__text_cache__","resetScanCache","Match","shift","__last_index__","__schema__","raw","createMatch","schemas","reduce","acc","add","definition","m","ml","me","next","tld_pos","testSchemaAt","keepOld","sort","el","arr","opts","src_Any","src_Cc","src_Z","src_P","src_ZCc","src_pseudo_letter","src_ip4","src_host","tpl_host_fuzzy","tpl_host_no_ip_fuzzy","tpl_host_fuzzy_strict","tpl_host_port_fuzzy_strict","tpl_host_port_no_ip_fuzzy_strict","root","nodeType","freeGlobal","global","window","maxInt","base","regexPunycode","regexNonASCII","regexSeparators","errors","floor","stringFromCharCode","error","RangeError","array","mapDomain","parts","ucs2decode","extra","output","counter","ucs2encode","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","baseMinusTMin","input","out","basic","oldi","w","baseMinusT","codePoint","inputLength","n","bias","handledCPCount","basicLength","q","currentValue","handledCPCountPlusOne","qMinusT"],"mappings":";0FASA,IAAIA,EAAkBC,OAAOC,UAAUC,eAEvC,SAASC,EAAIC,EAAQC,GACnB,OAAON,EAAgBO,KAAKF,EAAQC,GA+BtC,SAASE,EAAkBC,GAGzB,QAAIA,GAAK,OAAUA,GAAK,WAEpBA,GAAK,OAAUA,GAAK,SACH,QAAZ,MAAJA,IAA2C,QAAZ,MAAJA,OAE5BA,GAAK,GAAQA,GAAK,KACZ,KAANA,MACAA,GAAK,IAAQA,GAAK,QAClBA,GAAK,KAAQA,GAAK,QAElBA,EAAI,eAIV,SAASC,EAAcD,GAErB,GAAIA,EAAI,MAAQ,CAEd,IAAIE,EAAa,QADjBF,GAAK,QAC2B,IAC5BG,EAAa,OAAc,KAAJH,GAE3B,OAAOI,OAAOC,aAAaH,EAAYC,GAEzC,OAAOC,OAAOC,aAAaL,GAI7B,IAAIM,EAAkB,8CAElBC,EAAkB,IAAIC,OAAOF,EAAeG,OAAS,IADnC,6BACmDA,OAAQ,MAE7EC,EAAyB,qCAEzBC,EAAW,EAAQ,KA2CvB,IAAIC,EAAsB,SACtBC,EAAyB,UACzBC,EAAoB,CACtB,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,UAGP,SAASC,EAAkBC,GACzB,OAAOF,EAAkBE,GAY3B,IAAIC,EAAmB,uBAwCvB,IAAIC,EAAmB,EAAQ,KAiH/BC,EAAQC,IAAsB,GAC9BD,EAAQC,IAAIC,MAAkB,EAAQ,KACtCF,EAAQC,IAAIE,QAAkB,EAAQ,KAEtCH,EAAQI,OA5RR,SAAgBC,GACd,IAAIC,EAAUC,MAAMjC,UAAUkC,MAAM7B,KAAK8B,UAAW,GAcpD,OAZAH,EAAQI,SAAQ,SAAUpB,GACxB,GAAKA,EAAL,CAEA,GAAsB,iBAAXA,EACT,MAAM,IAAIqB,UAAUrB,EAAS,kBAG/BjB,OAAOuC,KAAKtB,GAAQoB,SAAQ,SAAUhC,GACpC2B,EAAI3B,GAAOY,EAAOZ,UAIf2B,GA8QTL,EAAQa,SAvSR,SAAkBR,GAAO,MAAuB,oBAFhD,SAAgBA,GAAO,OAAOhC,OAAOC,UAAUwC,SAASnC,KAAK0B,GAE7BU,CAAOV,IAwSvCL,EAAQxB,IAAsBA,EAC9BwB,EAAQgB,WAtMR,SAAoBC,GAClB,OAAIA,EAAIC,QAAQ,MAAQ,EAAYD,EAC7BA,EAAIE,QAAQhC,EAAgB,OAqMrCa,EAAQoB,YAlMR,SAAqBH,GACnB,OAAIA,EAAIC,QAAQ,MAAQ,GAAKD,EAAIC,QAAQ,KAAO,EAAYD,EAErDA,EAAIE,QAAQ/B,GAAiB,SAAUiC,EAAOC,EAASC,GAC5D,OAAID,GAlCR,SAA8BD,EAAOG,GACnC,IAAIC,EAAO,EAEX,OAAIjD,EAAIgB,EAAUgC,GACThC,EAASgC,GAGS,KAAvBA,EAAKE,WAAW,IAAsBnC,EAAuBoC,KAAKH,IAIhE5C,EAHJ6C,EAAiC,MAA1BD,EAAK,GAAGI,cACbC,SAASL,EAAKhB,MAAM,GAAI,IAAMqB,SAASL,EAAKhB,MAAM,GAAI,KAG/C1B,EAAc2C,GAIlBJ,EAmBES,CAAqBT,EAAOE,OA8LvCvB,EAAQpB,kBAAsBA,EAC9BoB,EAAQlB,cAAsBA,EAE9BkB,EAAQ+B,WA9KR,SAAoBd,GAClB,OAAIxB,EAAoBkC,KAAKV,GACpBA,EAAIE,QAAQzB,EAAwBE,GAEtCqB,GA2KTjB,EAAQgC,eAjRR,SAAwBC,EAAKC,EAAKC,GAChC,MAAO,GAAGC,OAAOH,EAAIzB,MAAM,EAAG0B,GAAMC,EAAaF,EAAIzB,MAAM0B,EAAM,KAiRnElC,EAAQqC,QA/JR,SAAiBZ,GACf,OAAQA,GACN,KAAK,EACL,KAAK,GACH,OAAO,EAEX,OAAO,GA0JTzB,EAAQsC,aAtJR,SAAsBb,GACpB,GAAIA,GAAQ,MAAUA,GAAQ,KAAU,OAAO,EAC/C,OAAQA,GACN,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACH,OAAO,EAEX,OAAO,GAuITzB,EAAQuC,eAlHR,SAAwB1C,GACtB,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,OAAO,EACT,QACE,OAAO,IA+EbG,EAAQwC,YA/HR,SAAqB3C,GACnB,OAAOE,EAAiB4B,KAAK9B,IA+H/BG,EAAQyC,SAzKR,SAAkBxB,GAChB,OAAOA,EAAIE,QAAQrB,EAAkB,SAyKvCE,EAAQ0C,mBA3ER,SAA4BzB,GA+C1B,OA5CAA,EAAMA,EAAI0B,OAAOxB,QAAQ,OAAQ,KAQP,MAAtB,IAAIS,gBACNX,EAAMA,EAAIE,QAAQ,KAAM,MAmCnBF,EAAIW,cAAcgB,gB,iCC7R3BC,EAAO7C,QAAU,EAAQ,M,kBCqOzB6C,EAAO7C,QA3NP,SAAkB8C,EAAQC,EAAWC,GACjC,IAiBIC,EACAC,EAEAC,EACAC,EAkCIC,EApDJC,EAAe,GAAKP,EAAYA,EAAY,GAC5CQ,EAAe,CAAC,MAAO,MACvBC,EAAQ,GACRC,EAAQ,EACRC,EANe,GAOfC,EAAkB,qCAGlBC,EAAmB,IAAIvE,OAAO,gBAAkBsE,EAAlB,gBAC9BE,EAAiB,IAAIxE,OAAO,gBAAkBsE,EAAlB,iBAC5BG,EAAY,qGACZC,EAAkB,IAAI1E,OAAO,WAAasE,EAAb,iBAC7BK,EAAmB,IAAI3E,OAAO,OAAQ,KACtC4E,GAAU,EA2Dd,SAASC,EAAQpB,GACb,IAAIqB,EAAOrB,EAAO5B,QAAQ,KAI1B,IAAK,IAAMiD,IAEF,KADLA,EAAOrB,EAAO5B,QAAQ,MAElB,MAAM,IAAIkD,MAAM,iCAAmCtB,GAI3D,OAAOA,EAAOuB,UAAU,EAAGF,GAgB/B,SAASG,EAAiBxB,EAAQyB,GAC9B,IAIIC,EAGAvB,EAPAwB,EAAa1B,EAAYU,EACzBiB,EAAWD,EACXE,EAAUF,EAAazB,EAAQ4B,KAC/BC,EAAUF,EAAUF,EAAazB,EAAQ4B,KAAO,EAEhDE,EAAaH,EAAU,EAAIF,EAAazB,EAAQ4B,KAChDG,EAAWR,GAAYE,EAAazB,EAAQ4B,KAGhD,IAAK5B,EAAQgC,iBAAkB,CAI3B,GAFAR,EAAS1B,EAAOtC,MAAMsE,EAAYC,GAE9BR,GAAWC,EAAOS,QAAUV,EAC5BG,EAAWF,EAAOS,YAGlB,KAAoD,QAA5ChC,EAASe,EAAiBkB,KAAKV,KAAmB,CAEtD,KAAIvB,EAAOC,MAAQ2B,GAOd,IAAI5B,EAAOC,QAAU2B,EAAS,CAC/BH,EAAWD,EACX,MAIAC,EAAWD,GAAcxB,EAAOC,MAAQ2B,GACxC,MAVA,GAHAH,EAAWD,GAAcI,EAAU5B,EAAOC,OAGrB,IAAjBD,EAAOC,OAAeuB,GAAc,EAAG,MAcnD3B,EAAOqC,OAAOT,EAAW,GAAGrD,MAAM,QAAQqD,IAElD,OAAOA,EAQX,KALA1B,EAAUA,GAlJS,IAmJXoC,cAAYC,IAAcrC,EAAQoC,SAAYpC,EAAQoC,SAjJhC,MAkJ9BpC,EAAQgC,sBAAoBK,IAAcrC,EAAQgC,kBAAoBhC,EAAQgC,iBAC9EhC,EAAQ4B,UAAQS,IAAcrC,EAAQ4B,KAAQ5B,EAAQ4B,KAAOtB,EAEtDW,GAAS,CAGZ,KAFAA,EAAUJ,EAAeqB,KAAKpC,IAEhB,CACV,GAAIW,GAASV,EAAa,MAG1B,KADAkB,EAAUH,EAAUoB,KAAKpC,KACTmB,EAAQf,OAASH,EAAW,CACxCW,GAAWZ,EAAOuB,UAAU,EAAGC,EAAgBxB,IAC/C,MAGJ,KAAOmB,GACHhB,EAASgB,EAAQ,GACjBf,EAAQe,EAAQf,MAChBQ,GAAWZ,EAAOuB,UAAU,EAAInB,EAAQD,EAAOgC,OAAUxB,GACzDX,EAASA,EAAOuB,UAAUnB,EAAQD,EAAOgC,QACzChB,EAAUH,EAAUoB,KAAKpC,GAE7B,MAMJ,GAHAG,EAASgB,EAAQ,GACjBf,EAAQe,EAAQf,MAEZO,EAAQP,EAAQH,EAAW,CAE3BW,GAAWZ,EAAOuB,UAAU,EAAGC,EAAgBxB,EAAQI,IACvD,MAEAO,GAASP,EACTQ,GAAWZ,EAAOuB,UAAU,EAAGnB,GAG/B,MAAQD,EAAO,IAEfO,EAAM8B,MACNlC,EAAU,OAEVA,EAAYQ,EAAiBsB,KAAKjC,MAE9BE,EAAMe,EAAQjB,GAEdO,EAAM+B,KAAKpC,IAKfO,GADAN,EACWA,EAAU,GAEVH,EAEfH,EAASA,EAAOuB,UAAUnB,EAAQD,EAAOgC,QAY7C,OATInC,EAAOmC,OAASlC,EAAYU,GAAST,EAAQoC,WAC7C1B,GAAWV,EAAQoC,UAEvB1B,IA1JQL,EAAO,GA0JUG,EAxJhBgC,UAAU9E,SAAQ,SAAUyC,EAAKD,IAE7B,IAAMK,EAAarC,QAAQiC,KAC5BE,GAAQ,KAAOF,EAAM,QAItBE,GAmJNL,EAAQyC,eACT/B,EArLJ,SAAyBZ,GACrB,IACII,EACAwC,EAFArE,EAAQ0C,EAAgBmB,KAAKpC,GAIjC,OAAKzB,GAIL6B,EAAQ7B,EAAM6B,MACdwC,EAAMrE,EAAM,GAAG4D,OAERnC,EAAOuB,UAAU,EAAGnB,GAASJ,EAAOuB,UAAUnB,EAAQwC,IANlD5C,EA+KD6C,CAAgBjC,IAGvBA,I,kBCrOXb,EAAO7C,QAAQ,s2D,iCCuBf,SAAS4F,IAUPC,KAAKC,UAAY,GAOjBD,KAAKE,UAAY,KASnBH,EAAMtH,UAAU0H,SAAW,SAAUxE,GACnC,IAAK,IAAIyE,EAAI,EAAGA,EAAIJ,KAAKC,UAAUb,OAAQgB,IACzC,GAAIJ,KAAKC,UAAUG,GAAGzE,OAASA,EAC7B,OAAOyE,EAGX,OAAQ,GAMVL,EAAMtH,UAAU4H,YAAc,WAC5B,IAAIC,EAAON,KACPO,EAAS,CAAE,IAGfD,EAAKL,UAAUpF,SAAQ,SAAU2F,GAC1BA,EAAKC,SAEVD,EAAKE,IAAI7F,SAAQ,SAAU8F,GACrBJ,EAAOlF,QAAQsF,GAAW,GAC5BJ,EAAOb,KAAKiB,SAKlBL,EAAKJ,UAAY,GAEjBK,EAAO1F,SAAQ,SAAU+F,GACvBN,EAAKJ,UAAUU,GAAS,GACxBN,EAAKL,UAAUpF,SAAQ,SAAU2F,GAC1BA,EAAKC,UAENG,GAASJ,EAAKE,IAAIrF,QAAQuF,GAAS,GAEvCN,EAAKJ,UAAUU,GAAOlB,KAAKc,EAAKK,YA+BtCd,EAAMtH,UAAUqI,GAAK,SAAUnF,EAAMkF,EAAI1D,GACvC,IAAIE,EAAQ2C,KAAKG,SAASxE,GACtBoF,EAAM5D,GAAW,GAErB,IAAe,IAAXE,EAAgB,MAAM,IAAIkB,MAAM,0BAA4B5C,GAEhEqE,KAAKC,UAAU5C,GAAOwD,GAAKA,EAC3Bb,KAAKC,UAAU5C,GAAOqD,IAAMK,EAAIL,KAAO,GACvCV,KAAKE,UAAY,MA4BnBH,EAAMtH,UAAUuI,OAAS,SAAUC,EAAYC,EAAUL,EAAI1D,GAC3D,IAAIE,EAAQ2C,KAAKG,SAASc,GACtBF,EAAM5D,GAAW,GAErB,IAAe,IAAXE,EAAgB,MAAM,IAAIkB,MAAM,0BAA4B0C,GAEhEjB,KAAKC,UAAUkB,OAAO9D,EAAO,EAAG,CAC9B1B,KAAMuF,EACNT,SAAS,EACTI,GAAIA,EACJH,IAAKK,EAAIL,KAAO,KAGlBV,KAAKE,UAAY,MA4BnBH,EAAMtH,UAAU2I,MAAQ,SAAUC,EAAWH,EAAUL,EAAI1D,GACzD,IAAIE,EAAQ2C,KAAKG,SAASkB,GACtBN,EAAM5D,GAAW,GAErB,IAAe,IAAXE,EAAgB,MAAM,IAAIkB,MAAM,0BAA4B8C,GAEhErB,KAAKC,UAAUkB,OAAO9D,EAAQ,EAAG,EAAG,CAClC1B,KAAMuF,EACNT,SAAS,EACTI,GAAIA,EACJH,IAAKK,EAAIL,KAAO,KAGlBV,KAAKE,UAAY,MA0BnBH,EAAMtH,UAAUiH,KAAO,SAAUwB,EAAUL,EAAI1D,GAC7C,IAAI4D,EAAM5D,GAAW,GAErB6C,KAAKC,UAAUP,KAAK,CAClB/D,KAAMuF,EACNT,SAAS,EACTI,GAAIA,EACJH,IAAKK,EAAIL,KAAO,KAGlBV,KAAKE,UAAY,MAgBnBH,EAAMtH,UAAU6I,OAAS,SAAUC,EAAMC,GAClC9G,MAAM+G,QAAQF,KAASA,EAAO,CAAEA,IAErC,IAAInE,EAAS,GAeb,OAZAmE,EAAK1G,SAAQ,SAAUc,GACrB,IAAI+F,EAAM1B,KAAKG,SAASxE,GAExB,GAAI+F,EAAM,EAAG,CACX,GAAIF,EAAiB,OACrB,MAAM,IAAIjD,MAAM,oCAAsC5C,GAExDqE,KAAKC,UAAUyB,GAAKjB,SAAU,EAC9BrD,EAAOsC,KAAK/D,KACXqE,MAEHA,KAAKE,UAAY,KACV9C,GAcT2C,EAAMtH,UAAUkJ,WAAa,SAAUJ,EAAMC,GACtC9G,MAAM+G,QAAQF,KAASA,EAAO,CAAEA,IAErCvB,KAAKC,UAAUpF,SAAQ,SAAU2F,GAAQA,EAAKC,SAAU,KAExDT,KAAKsB,OAAOC,EAAMC,IAgBpBzB,EAAMtH,UAAUmJ,QAAU,SAAUL,EAAMC,GACnC9G,MAAM+G,QAAQF,KAASA,EAAO,CAAEA,IAErC,IAAInE,EAAS,GAeb,OAZAmE,EAAK1G,SAAQ,SAAUc,GACrB,IAAI+F,EAAM1B,KAAKG,SAASxE,GAExB,GAAI+F,EAAM,EAAG,CACX,GAAIF,EAAiB,OACrB,MAAM,IAAIjD,MAAM,oCAAsC5C,GAExDqE,KAAKC,UAAUyB,GAAKjB,SAAU,EAC9BrD,EAAOsC,KAAK/D,KACXqE,MAEHA,KAAKE,UAAY,KACV9C,GAaT2C,EAAMtH,UAAUoJ,SAAW,SAAUC,GAMnC,OALuB,OAAnB9B,KAAKE,WACPF,KAAKK,cAIAL,KAAKE,UAAU4B,IAAc,IAGtC9E,EAAO7C,QAAU4F,G,iCCjVjB,SAASgC,EAAMC,EAAM1E,EAAK2E,GAMxBjC,KAAKgC,KAAWA,EAOhBhC,KAAK1C,IAAWA,EAOhB0C,KAAKkC,MAAW,KAOhBlC,KAAKmC,IAAW,KAWhBnC,KAAKiC,QAAWA,EAOhBjC,KAAKoC,MAAW,EAOhBpC,KAAKqC,SAAW,KAQhBrC,KAAKnC,QAAW,GAOhBmC,KAAKsC,OAAW,GAOhBtC,KAAKuC,KAAW,GAOhBvC,KAAKwC,KAAW,KAQhBxC,KAAKyC,OAAW,EAQhBzC,KAAK0C,QAAW,EASlBX,EAAMtJ,UAAUkK,UAAY,SAAmBhH,GAC7C,IAAIuG,EAAO9B,EAAGP,EAEd,IAAKG,KAAKkC,MAAS,OAAQ,EAI3B,IAAK9B,EAAI,EAAGP,GAFZqC,EAAQlC,KAAKkC,OAEW9C,OAAQgB,EAAIP,EAAKO,IACvC,GAAI8B,EAAM9B,GAAG,KAAOzE,EAAQ,OAAOyE,EAErC,OAAQ,GASV2B,EAAMtJ,UAAUmK,SAAW,SAAkBC,GACvC7C,KAAKkC,MACPlC,KAAKkC,MAAMxC,KAAKmD,GAEhB7C,KAAKkC,MAAQ,CAAEW,IAUnBd,EAAMtJ,UAAUqK,QAAU,SAAiBnH,EAAMoH,GAC/C,IAAIrB,EAAM1B,KAAK2C,UAAUhH,GACrBkH,EAAW,CAAElH,EAAMoH,GAEnBrB,EAAM,EACR1B,KAAK4C,SAASC,GAEd7C,KAAKkC,MAAMR,GAAOmB,GAUtBd,EAAMtJ,UAAUuK,QAAU,SAAiBrH,GACzC,IAAI+F,EAAM1B,KAAK2C,UAAUhH,GAAOoH,EAAQ,KAIxC,OAHIrB,GAAO,IACTqB,EAAQ/C,KAAKkC,MAAMR,GAAK,IAEnBqB,GAUThB,EAAMtJ,UAAUwK,SAAW,SAAkBtH,EAAMoH,GACjD,IAAIrB,EAAM1B,KAAK2C,UAAUhH,GAErB+F,EAAM,EACR1B,KAAK4C,SAAS,CAAEjH,EAAMoH,IAEtB/C,KAAKkC,MAAMR,GAAK,GAAK1B,KAAKkC,MAAMR,GAAK,GAAK,IAAMqB,GAKpD/F,EAAO7C,QAAU4H,G,iCC/LjB/E,EAAO7C,QAAU,EAAQ,M,iCCFzB6C,EAAO7C,QAAQ+I,OAAS,EAAQ,KAChClG,EAAO7C,QAAQgJ,OAAS,EAAQ,KAChCnG,EAAO7C,QAAQiJ,OAAS,EAAQ,KAChCpG,EAAO7C,QAAQkJ,MAAS,EAAQ,M,kBCNhCrG,EAAO7C,QAAQ,oI,kBCAf6C,EAAO7C,QAAQ,sB,kBCAf6C,EAAO7C,QAAQ,4D,iCCIf,IAUImJ,EAAc,kIAEdC,EAAc,mCAMdC,EAAc,IAAIhK,OAAO,OAAS8J,EAAW,IAAMC,EAA1B,qHAEzBE,EAAyB,IAAIjK,OAAO,OAAS8J,EAAW,IAAMC,EAAY,KAE9EvG,EAAO7C,QAAQqJ,YAAcA,EAC7BxG,EAAO7C,QAAQsJ,uBAAyBA,G,iCCsBxC,SAASC,EAAYC,EAAOC,GAC1B,IAAIxD,EAAGyD,EACHC,EACAC,EACAC,EACAC,EAAc,GACdC,EAAMN,EAAWxE,OAErB,IAAKgB,EAAI,EAAGA,EAAI8D,EAAK9D,IAGO,OAF1B0D,EAAaF,EAAWxD,IAET+D,SAIS,IAApBL,EAAWM,MAIfL,EAAWH,EAAWE,EAAWM,MAEjCJ,EAAgBL,EAAMU,OAAOP,EAAWE,QAClChC,KAAU,SAChBgC,EAAM1G,IAAU,IAChB0G,EAAM/B,QAAU,EAChB+B,EAAM1B,OAAU,KAChB0B,EAAMnG,QAAU,IAEhBmG,EAAgBL,EAAMU,OAAON,EAASC,QAChChC,KAAU,UAChBgC,EAAM1G,IAAU,IAChB0G,EAAM/B,SAAW,EACjB+B,EAAM1B,OAAU,KAChB0B,EAAMnG,QAAU,GAE8B,SAA1C8F,EAAMU,OAAON,EAASC,MAAQ,GAAGhC,MACY,MAA7C2B,EAAMU,OAAON,EAASC,MAAQ,GAAGnG,SAEnCoG,EAAYvE,KAAKqE,EAASC,MAAQ,IAUtC,KAAOC,EAAY7E,QAAQ,CAIzB,IAFAyE,GADAzD,EAAI6D,EAAYxE,OACR,EAEDoE,EAAIF,EAAMU,OAAOjF,QAAmC,YAAzBuE,EAAMU,OAAOR,GAAG7B,MAChD6B,IAKEzD,MAFJyD,IAGEG,EAAQL,EAAMU,OAAOR,GACrBF,EAAMU,OAAOR,GAAKF,EAAMU,OAAOjE,GAC/BuD,EAAMU,OAAOjE,GAAK4D,IAvGxBhH,EAAO7C,QAAQmK,SAAW,SAAuBX,EAAOY,GACtD,IAAInE,EAAGoE,EAAgB3E,EAAK7F,EACxByK,EAAQd,EAAMtH,IACd8H,EAASR,EAAMvH,IAAIP,WAAW4I,GAElC,GAAIF,EAAU,OAAO,EAErB,GAAe,MAAXJ,EAA0B,OAAO,EAMrC,GAHAtE,GADA2E,EAAUb,EAAMe,WAAWf,EAAMtH,KAAK,IACxB+C,OACdpF,EAAKZ,OAAOC,aAAa8K,GAErBtE,EAAM,EAAK,OAAO,EAQtB,IANIA,EAAM,IACQ8D,EAAMjE,KAAK,OAAQ,GAAI,GACjC7B,QAAU7D,EAChB6F,KAGGO,EAAI,EAAGA,EAAIP,EAAKO,GAAK,EACRuD,EAAMjE,KAAK,OAAQ,GAAI,GACjC7B,QAAU7D,EAAKA,EAErB2J,EAAMC,WAAWlE,KAAK,CACpByE,OAAQA,EACR/E,OAAQ,EACRuF,KAAQvE,EACR4D,MAAQL,EAAMU,OAAOjF,OAAS,EAC9BgF,KAAS,EACTQ,KAAQJ,EAAQK,SAChBC,MAAQN,EAAQO,YAMpB,OAFApB,EAAMtH,KAAOmI,EAAQpF,QAEd,GAyETpC,EAAO7C,QAAQuJ,YAAc,SAAuBC,GAClD,IAAIqB,EACAC,EAActB,EAAMsB,YACpBf,EAAMP,EAAMsB,YAAY7F,OAI5B,IAFAsE,EAAYC,EAAOA,EAAMC,YAEpBoB,EAAO,EAAGA,EAAOd,EAAKc,IACrBC,EAAYD,IAASC,EAAYD,GAAMpB,YACzCF,EAAYC,EAAOsB,EAAYD,GAAMpB,c,iCChE3C,SAASF,EAAYC,EAAOC,GAC1B,IAAIxD,EACA0D,EACAC,EACAC,EACAhK,EACAkL,EAGJ,IAAK9E,EAFKwD,EAAWxE,OAEN,EAAGgB,GAAK,EAAGA,IAGE,MAF1B0D,EAAaF,EAAWxD,IAET+D,QAAgD,KAAtBL,EAAWK,SAK5B,IAApBL,EAAWM,MAIfL,EAAWH,EAAWE,EAAWM,KAOjCc,EAAW9E,EAAI,GACJwD,EAAWxD,EAAI,GAAGgE,MAAQN,EAAWM,IAAM,GAC3CR,EAAWxD,EAAI,GAAG4D,QAAUF,EAAWE,MAAQ,GAC/CJ,EAAWE,EAAWM,IAAM,GAAGJ,QAAUD,EAASC,MAAQ,GAC1DJ,EAAWxD,EAAI,GAAG+D,SAAWL,EAAWK,OAEnDnK,EAAKZ,OAAOC,aAAayK,EAAWK,SAEpCH,EAAgBL,EAAMU,OAAOP,EAAWE,QAClChC,KAAUkD,EAAW,cAAgB,UAC3ClB,EAAM1G,IAAU4H,EAAW,SAAW,KACtClB,EAAM/B,QAAU,EAChB+B,EAAM1B,OAAU4C,EAAWlL,EAAKA,EAAKA,EACrCgK,EAAMnG,QAAU,IAEhBmG,EAAgBL,EAAMU,OAAON,EAASC,QAChChC,KAAUkD,EAAW,eAAiB,WAC5ClB,EAAM1G,IAAU4H,EAAW,SAAW,KACtClB,EAAM/B,SAAW,EACjB+B,EAAM1B,OAAU4C,EAAWlL,EAAKA,EAAKA,EACrCgK,EAAMnG,QAAU,GAEZqH,IACFvB,EAAMU,OAAOT,EAAWxD,EAAI,GAAG4D,OAAOnG,QAAU,GAChD8F,EAAMU,OAAOT,EAAWE,EAAWM,IAAM,GAAGJ,OAAOnG,QAAU,GAC7DuC,MA7GNpD,EAAO7C,QAAQmK,SAAW,SAAkBX,EAAOY,GACjD,IAAInE,EAAGoE,EACHC,EAAQd,EAAMtH,IACd8H,EAASR,EAAMvH,IAAIP,WAAW4I,GAElC,GAAIF,EAAU,OAAO,EAErB,GAAe,KAAXJ,GAAsC,KAAXA,EAA2B,OAAO,EAIjE,IAFAK,EAAUb,EAAMe,WAAWf,EAAMtH,IAAgB,KAAX8H,GAEjC/D,EAAI,EAAGA,EAAIoE,EAAQpF,OAAQgB,IACduD,EAAMjE,KAAK,OAAQ,GAAI,GACjC7B,QAAUzE,OAAOC,aAAa8K,GAEpCR,EAAMC,WAAWlE,KAAK,CAGpByE,OAAQA,EAIR/E,OAAQoF,EAAQpF,OAShBuF,KAAQvE,EAIR4D,MAAQL,EAAMU,OAAOjF,OAAS,EAK9BgF,KAAS,EAKTQ,KAAQJ,EAAQK,SAChBC,MAAQN,EAAQO,YAMpB,OAFApB,EAAMtH,KAAOmI,EAAQpF,QAEd,GAiETpC,EAAO7C,QAAQuJ,YAAc,SAAkBC,GAC7C,IAAIqB,EACAC,EAActB,EAAMsB,YACpBf,EAAMP,EAAMsB,YAAY7F,OAI5B,IAFAsE,EAAYC,EAAOA,EAAMC,YAEpBoB,EAAO,EAAGA,EAAOd,EAAKc,IACrBC,EAAYD,IAASC,EAAYD,GAAMpB,YACzCF,EAAYC,EAAOsB,EAAYD,GAAMpB,c,iCChI3C,IAAIuB,EAAe,EAAQ,KACvBC,EAAe,EAAQ,KACvBC,EAAe,EAAQ,KACvBC,EAAe,EAAQ,KACvBC,EAAe,EAAQ,KACvBC,EAAe,EAAQ,KACvBC,EAAe,EAAQ,KACvBpL,EAAe,EAAQ,KACvBqL,EAAe,EAAQ,KAGvBC,EAAS,CACX,QAAW,EAAQ,KACnBC,KAAM,EAAQ,KACdC,WAAY,EAAQ,MAYlBC,EAAe,oCACfC,EAAe,oCAEnB,SAASC,EAAaC,GAEpB,IAAI7K,EAAM6K,EAAInJ,OAAOf,cAErB,OAAO+J,EAAahK,KAAKV,MAAQ2K,EAAajK,KAAKV,GAMrD,IAAI8K,EAAsB,CAAE,QAAS,SAAU,WAE/C,SAASC,EAAcF,GACrB,IAAIG,EAAS/L,EAAMgJ,MAAM4C,GAAK,GAE9B,GAAIG,EAAOC,YAOJD,EAAOE,UAAYJ,EAAoB7K,QAAQ+K,EAAOE,WAAa,GACtE,IACEF,EAAOC,SAAWX,EAASa,QAAQH,EAAOC,UAC1C,MAAOG,IAIb,OAAOnM,EAAM6I,OAAO7I,EAAM+I,OAAOgD,IAGnC,SAASK,EAAkBR,GACzB,IAAIG,EAAS/L,EAAMgJ,MAAM4C,GAAK,GAE9B,GAAIG,EAAOC,YAOJD,EAAOE,UAAYJ,EAAoB7K,QAAQ+K,EAAOE,WAAa,GACtE,IACEF,EAAOC,SAAWX,EAASgB,UAAUN,EAAOC,UAC5C,MAAOG,IAIb,OAAOnM,EAAM8I,OAAO9I,EAAM+I,OAAOgD,IAyInC,SAASO,EAAWC,EAAYzJ,GAC9B,KAAM6C,gBAAgB2G,GACpB,OAAO,IAAIA,EAAWC,EAAYzJ,GAG/BA,GACEgI,EAAMnK,SAAS4L,KAClBzJ,EAAUyJ,GAAc,GACxBA,EAAa,WAWjB5G,KAAK6G,OAAS,IAAIrB,EASlBxF,KAAKyC,MAAQ,IAAI8C,EASjBvF,KAAK8G,KAAO,IAAIxB,EAuBhBtF,KAAK+G,SAAW,IAAI1B,EASpBrF,KAAKgH,QAAU,IAAIvB,EAiBnBzF,KAAKgG,aAAeA,EAQpBhG,KAAKmG,cAAgBA,EAOrBnG,KAAKyG,kBAAoBA,EAWzBzG,KAAKmF,MAAQA,EAQbnF,KAAKoF,QAAUD,EAAM5K,OAAO,GAAI6K,GAGhCpF,KAAK7C,QAAU,GACf6C,KAAKiH,UAAUL,GAEXzJ,GAAW6C,KAAKkH,IAAI/J,GAuB1BwJ,EAAWlO,UAAUyO,IAAM,SAAU/J,GAEnC,OADAgI,EAAM5K,OAAOyF,KAAK7C,QAASA,GACpB6C,MAcT2G,EAAWlO,UAAUwO,UAAY,SAAUE,GACzC,IAAiBP,EAAbtG,EAAON,KAEX,GAAImF,EAAMnK,SAASmM,MAEjBA,EAAUxB,EADViB,EAAaO,IAEG,MAAM,IAAI5I,MAAM,+BAAiCqI,EAAa,iBAGhF,IAAKO,EAAW,MAAM,IAAI5I,MAAM,8CAchC,OAZI4I,EAAQhK,SAAWmD,EAAK4G,IAAIC,EAAQhK,SAEpCgK,EAAQC,YACV5O,OAAOuC,KAAKoM,EAAQC,YAAYvM,SAAQ,SAAUc,GAC5CwL,EAAQC,WAAWzL,GAAM0L,OAC3B/G,EAAK3E,GAAM2L,MAAM3F,WAAWwF,EAAQC,WAAWzL,GAAM0L,OAEnDF,EAAQC,WAAWzL,GAAM4L,QAC3BjH,EAAK3E,GAAM6L,OAAO7F,WAAWwF,EAAQC,WAAWzL,GAAM4L,WAIrDvH,MAqBT2G,EAAWlO,UAAU6I,OAAS,SAAUC,EAAMC,GAC5C,IAAIpE,EAAS,GAER1C,MAAM+G,QAAQF,KAASA,EAAO,CAAEA,IAErC,CAAE,OAAQ,QAAS,UAAW1G,SAAQ,SAAU+F,GAC9CxD,EAASA,EAAOb,OAAOyD,KAAKY,GAAO0G,MAAMhG,OAAOC,GAAM,MACrDvB,MAEH5C,EAASA,EAAOb,OAAOyD,KAAK6G,OAAOW,OAAOlG,OAAOC,GAAM,IAEvD,IAAIkG,EAASlG,EAAKmG,QAAO,SAAU/L,GAAQ,OAAOyB,EAAO/B,QAAQM,GAAQ,KAEzE,GAAI8L,EAAOrI,SAAWoC,EACpB,MAAM,IAAIjD,MAAM,iDAAmDkJ,GAGrE,OAAOzH,MAWT2G,EAAWlO,UAAUmJ,QAAU,SAAUL,EAAMC,GAC7C,IAAIpE,EAAS,GAER1C,MAAM+G,QAAQF,KAASA,EAAO,CAAEA,IAErC,CAAE,OAAQ,QAAS,UAAW1G,SAAQ,SAAU+F,GAC9CxD,EAASA,EAAOb,OAAOyD,KAAKY,GAAO0G,MAAM1F,QAAQL,GAAM,MACtDvB,MAEH5C,EAASA,EAAOb,OAAOyD,KAAK6G,OAAOW,OAAO5F,QAAQL,GAAM,IAExD,IAAIkG,EAASlG,EAAKmG,QAAO,SAAU/L,GAAQ,OAAOyB,EAAO/B,QAAQM,GAAQ,KAEzE,GAAI8L,EAAOrI,SAAWoC,EACpB,MAAM,IAAIjD,MAAM,kDAAoDkJ,GAEtE,OAAOzH,MAoBT2G,EAAWlO,UAAUkP,IAAM,SAAUC,GACnC,IAAIC,EAAO,CAAE7H,MAAOzD,OAAO7B,MAAMjC,UAAUkC,MAAM7B,KAAK8B,UAAW,IAEjE,OADAgN,EAAOE,MAAMF,EAAQC,GACd7H,MAmBT2G,EAAWlO,UAAU4K,MAAQ,SAAUjH,EAAK2L,GAC1C,GAAmB,iBAAR3L,EACT,MAAM,IAAImC,MAAM,iCAGlB,IAAIoF,EAAQ,IAAI3D,KAAK8G,KAAKkB,MAAM5L,EAAK4D,KAAM+H,GAI3C,OAFA/H,KAAK8G,KAAKmB,QAAQtE,GAEXA,EAAMU,QAefsC,EAAWlO,UAAUyP,OAAS,SAAU9L,EAAK2L,GAG3C,OAFAA,EAAMA,GAAO,GAEN/H,KAAK+G,SAASmB,OAAOlI,KAAKqD,MAAMjH,EAAK2L,GAAM/H,KAAK7C,QAAS4K,IAalEpB,EAAWlO,UAAU0P,YAAc,SAAU/L,EAAK2L,GAChD,IAAIpE,EAAQ,IAAI3D,KAAK8G,KAAKkB,MAAM5L,EAAK4D,KAAM+H,GAK3C,OAHApE,EAAMyE,YAAa,EACnBpI,KAAK8G,KAAKmB,QAAQtE,GAEXA,EAAMU,QAYfsC,EAAWlO,UAAU4P,aAAe,SAAUjM,EAAK2L,GAGjD,OAFAA,EAAMA,GAAO,GAEN/H,KAAK+G,SAASmB,OAAOlI,KAAKmI,YAAY/L,EAAK2L,GAAM/H,KAAK7C,QAAS4K,IAIxE/K,EAAO7C,QAAUwM,G,yg5BChkBjB,IAAI2B,EAAc,GAsClB,SAASpF,EAAOjG,EAAQsL,EAASC,GAC/B,IAAIpI,EAAGqI,EAAG7M,EAAM8M,EAAUC,EACtBvL,EAAS,GAcb,IAZuB,iBAAZmL,IAETC,EAAeD,EACfA,EAAUrF,EAAO0F,mBAGQ,IAAhBJ,IACTA,GAAc,GAGhBG,EA9CF,SAAwBJ,GACtB,IAAInI,EAAGpG,EAAI2O,EAAQL,EAAYC,GAC/B,GAAII,EAAS,OAAOA,EAIpB,IAFAA,EAAQL,EAAYC,GAAW,GAE1BnI,EAAI,EAAGA,EAAI,IAAKA,IACnBpG,EAAKZ,OAAOC,aAAa+G,GAErB,cAActE,KAAK9B,GAErB2O,EAAMjJ,KAAK1F,GAEX2O,EAAMjJ,KAAK,KAAO,IAAMU,EAAEnF,SAAS,IAAI8B,eAAepC,OAAO,IAIjE,IAAKyF,EAAI,EAAGA,EAAImI,EAAQnJ,OAAQgB,IAC9BuI,EAAMJ,EAAQ1M,WAAWuE,IAAMmI,EAAQnI,GAGzC,OAAOuI,EAyBCE,CAAeN,GAElBnI,EAAI,EAAGqI,EAAIxL,EAAOmC,OAAQgB,EAAIqI,EAAGrI,IAGpC,GAFAxE,EAAOqB,EAAOpB,WAAWuE,GAErBoI,GAAwB,KAAT5M,GAAyBwE,EAAI,EAAIqI,GAC9C,iBAAiB3M,KAAKmB,EAAOtC,MAAMyF,EAAI,EAAGA,EAAI,IAChDhD,GAAUH,EAAOtC,MAAMyF,EAAGA,EAAI,GAC9BA,GAAK,OAKT,GAAIxE,EAAO,IACTwB,GAAUuL,EAAM/M,QAIlB,GAAIA,GAAQ,OAAUA,GAAQ,MAA9B,CACE,GAAIA,GAAQ,OAAUA,GAAQ,OAAUwE,EAAI,EAAIqI,IAC9CC,EAAWzL,EAAOpB,WAAWuE,EAAI,KACjB,OAAUsI,GAAY,MAAQ,CAC5CtL,GAAU0L,mBAAmB7L,EAAOmD,GAAKnD,EAAOmD,EAAI,IACpDA,IACA,SAGJhD,GAAU,iBAIZA,GAAU0L,mBAAmB7L,EAAOmD,IAGtC,OAAOhD,EAGT8F,EAAO0F,aAAiB,uBACxB1F,EAAO6F,eAAiB,YAGxB/L,EAAO7C,QAAU+I,G,iCC3FjB,IAAI8F,EAAc,GAwBlB,SAAS7F,EAAOlG,EAAQsL,GACtB,IAAII,EAQJ,MANuB,iBAAZJ,IACTA,EAAUpF,EAAOyF,cAGnBD,EA7BF,SAAwBJ,GACtB,IAAInI,EAAGpG,EAAI2O,EAAQK,EAAYT,GAC/B,GAAII,EAAS,OAAOA,EAIpB,IAFAA,EAAQK,EAAYT,GAAW,GAE1BnI,EAAI,EAAGA,EAAI,IAAKA,IACnBpG,EAAKZ,OAAOC,aAAa+G,GACzBuI,EAAMjJ,KAAK1F,GAGb,IAAKoG,EAAI,EAAGA,EAAImI,EAAQnJ,OAAQgB,IAE9BuI,EADA3O,EAAKuO,EAAQ1M,WAAWuE,IACZ,KAAO,IAAMpG,EAAGiB,SAAS,IAAI8B,eAAepC,OAAO,GAGjE,OAAOgO,EAaCM,CAAeV,GAEhBtL,EAAO3B,QAAQ,qBAAqB,SAAS4N,GAClD,IAAI9I,EAAGqI,EAAGU,EAAIC,EAAIC,EAAIC,EAAIC,EACtBnM,EAAS,GAEb,IAAKgD,EAAI,EAAGqI,EAAIS,EAAI9J,OAAQgB,EAAIqI,EAAGrI,GAAK,GACtC+I,EAAKnN,SAASkN,EAAIvO,MAAMyF,EAAI,EAAGA,EAAI,GAAI,KAE9B,IACPhD,GAAUuL,EAAMQ,GAIE,MAAV,IAALA,IAAwB/I,EAAI,EAAIqI,GAIf,MAAV,KAFVW,EAAKpN,SAASkN,EAAIvO,MAAMyF,EAAI,EAAGA,EAAI,GAAI,OAMnChD,IAHFmM,EAAQJ,GAAM,EAAK,KAAe,GAALC,GAEnB,IACE,KAEAhQ,OAAOC,aAAakQ,GAGhCnJ,GAAK,GAKW,MAAV,IAAL+I,IAAwB/I,EAAI,EAAIqI,IAEnCW,EAAKpN,SAASkN,EAAIvO,MAAMyF,EAAI,EAAGA,EAAI,GAAI,IACvCiJ,EAAKrN,SAASkN,EAAIvO,MAAMyF,EAAI,EAAGA,EAAI,GAAI,IAEnB,MAAV,IAALgJ,IAAuC,MAAV,IAALC,KAIzBjM,IAHFmM,EAAQJ,GAAM,GAAM,MAAYC,GAAM,EAAK,KAAe,GAALC,GAE3C,MAAUE,GAAO,OAAUA,GAAO,MAChC,MAEAnQ,OAAOC,aAAakQ,GAGhCnJ,GAAK,GAKW,MAAV,IAAL+I,IAAwB/I,EAAI,EAAIqI,IAEnCW,EAAKpN,SAASkN,EAAIvO,MAAMyF,EAAI,EAAGA,EAAI,GAAI,IACvCiJ,EAAKrN,SAASkN,EAAIvO,MAAMyF,EAAI,EAAGA,EAAI,GAAI,IACvCkJ,EAAKtN,SAASkN,EAAIvO,MAAMyF,EAAI,GAAIA,EAAI,IAAK,IAErB,MAAV,IAALgJ,IAAuC,MAAV,IAALC,IAAuC,MAAV,IAALC,MACnDC,EAAQJ,GAAM,GAAM,QAAcC,GAAM,GAAM,OAAaC,GAAM,EAAK,KAAe,GAALC,GAEtE,OAAWC,EAAM,QACzBnM,GAAU,QAEVmM,GAAO,MACPnM,GAAUhE,OAAOC,aAAa,OAAUkQ,GAAO,IAAK,OAAgB,KAANA,KAGhEnJ,GAAK,GAKThD,GAAU,IAGZ,OAAOA,KAKX+F,EAAOyF,aAAiB,cACxBzF,EAAO4F,eAAiB,GAGxB/L,EAAO7C,QAAUgJ,G,iCCrHjBnG,EAAO7C,QAAU,SAAgB8L,GAC/B,IAAI7I,EAAS,GAkBb,OAhBAA,GAAU6I,EAAIK,UAAY,GAC1BlJ,GAAU6I,EAAIuD,QAAU,KAAO,GAC/BpM,GAAU6I,EAAIwD,KAAOxD,EAAIwD,KAAO,IAAM,GAElCxD,EAAII,WAA2C,IAA/BJ,EAAII,SAAShL,QAAQ,KAEvC+B,GAAU,IAAM6I,EAAII,SAAW,IAE/BjJ,GAAU6I,EAAII,UAAY,GAG5BjJ,GAAU6I,EAAIyD,KAAO,IAAMzD,EAAIyD,KAAO,GACtCtM,GAAU6I,EAAI0D,UAAY,GAC1BvM,GAAU6I,EAAI2D,QAAU,GACxBxM,GAAU6I,EAAI4D,MAAQ,K,iCCwBxB,SAASC,IACP9J,KAAKsG,SAAW,KAChBtG,KAAKwJ,QAAU,KACfxJ,KAAKyJ,KAAO,KACZzJ,KAAK0J,KAAO,KACZ1J,KAAKqG,SAAW,KAChBrG,KAAK6J,KAAO,KACZ7J,KAAK4J,OAAS,KACd5J,KAAK2J,SAAW,KAOlB,IAAII,EAAkB,oBAClBC,EAAc,WAGdC,EAAoB,qCAOpBC,EAAS,CAAE,IAAK,IAAK,IAAK,KAAM,IAAK,KAAM3N,OAHlC,CAAE,IAAK,IAAK,IAAK,IAAK,IAAK,KAAM,KAAM,OAMhD4N,EAAa,CAAE,KAAO5N,OAAO2N,GAK7BE,EAAe,CAAE,IAAK,IAAK,IAAK,IAAK,KAAM7N,OAAO4N,GAClDE,EAAkB,CAAE,IAAK,IAAK,KAE9BC,EAAsB,yBACtBC,EAAoB,+BAIpBC,EAAmB,CACjB,YAAc,EACd,eAAe,GAGjBC,EAAkB,CAChB,MAAQ,EACR,OAAS,EACT,KAAO,EACP,QAAU,EACV,MAAQ,EACR,SAAS,EACT,UAAU,EACV,QAAQ,EACR,WAAW,EACX,SAAS,GAYfX,EAAIrR,UAAU4K,MAAQ,SAAS4C,EAAKyE,GAClC,IAAItK,EAAGqI,EAAGkC,EAAYC,EAAKpB,EACvBqB,EAAO5E,EAMX,GAFA4E,EAAOA,EAAK/N,QAEP4N,GAA+C,IAA1BzE,EAAI6E,MAAM,KAAK1L,OAAc,CAErD,IAAI2L,EAAad,EAAkB5K,KAAKwL,GACxC,GAAIE,EAKF,OAJA/K,KAAK2J,SAAWoB,EAAW,GACvBA,EAAW,KACb/K,KAAK4J,OAASmB,EAAW,IAEpB/K,KAIX,IAAIgL,EAAQjB,EAAgB1K,KAAKwL,GAoBjC,GAnBIG,IAEFL,GADAK,EAAQA,EAAM,IACKjP,cACnBiE,KAAKsG,SAAW0E,EAChBH,EAAOA,EAAKlM,OAAOqM,EAAM5L,UAOvBsL,GAAqBM,GAASH,EAAKrP,MAAM,6BAC3CgO,EAAgC,OAAtBqB,EAAKlM,OAAO,EAAG,KACRqM,GAASR,EAAiBQ,KACzCH,EAAOA,EAAKlM,OAAO,GACnBqB,KAAKwJ,SAAU,KAIdgB,EAAiBQ,KACjBxB,GAAYwB,IAAUP,EAAgBO,IAAU,CAkBnD,IAUIvB,EAAMwB,EAVNC,GAAW,EACf,IAAK9K,EAAI,EAAGA,EAAIiK,EAAgBjL,OAAQgB,KAEzB,KADbwK,EAAMC,EAAKxP,QAAQgP,EAAgBjK,QACH,IAAb8K,GAAkBN,EAAMM,KACzCA,EAAUN,GA0Bd,KARgB,KATdK,GAFe,IAAbC,EAEOL,EAAKM,YAAY,KAIjBN,EAAKM,YAAY,IAAKD,MAM/BzB,EAAOoB,EAAKlQ,MAAM,EAAGsQ,GACrBJ,EAAOA,EAAKlQ,MAAMsQ,EAAS,GAC3BjL,KAAKyJ,KAAOA,GAIdyB,GAAW,EACN9K,EAAI,EAAGA,EAAIgK,EAAahL,OAAQgB,KAEtB,KADbwK,EAAMC,EAAKxP,QAAQ+O,EAAahK,QACA,IAAb8K,GAAkBN,EAAMM,KACzCA,EAAUN,IAIG,IAAbM,IACFA,EAAUL,EAAKzL,QAGS,MAAtByL,EAAKK,EAAU,IAAcA,IACjC,IAAIE,EAAOP,EAAKlQ,MAAM,EAAGuQ,GACzBL,EAAOA,EAAKlQ,MAAMuQ,GAGlBlL,KAAKqL,UAAUD,GAIfpL,KAAKqG,SAAWrG,KAAKqG,UAAY,GAIjC,IAAIiF,EAAoC,MAArBtL,KAAKqG,SAAS,IACe,MAA5CrG,KAAKqG,SAASrG,KAAKqG,SAASjH,OAAS,GAGzC,IAAKkM,EAAc,CACjB,IAAIC,EAAYvL,KAAKqG,SAASyE,MAAM,MACpC,IAAK1K,EAAI,EAAGqI,EAAI8C,EAAUnM,OAAQgB,EAAIqI,EAAGrI,IAAK,CAC5C,IAAIoL,EAAOD,EAAUnL,GACrB,GAAKoL,IACAA,EAAKhQ,MAAM8O,GAAsB,CAEpC,IADA,IAAImB,EAAU,GACL5H,EAAI,EAAG6H,EAAIF,EAAKpM,OAAQyE,EAAI6H,EAAG7H,IAClC2H,EAAK3P,WAAWgI,GAAK,IAIvB4H,GAAW,IAEXA,GAAWD,EAAK3H,GAIpB,IAAK4H,EAAQjQ,MAAM8O,GAAsB,CACvC,IAAIqB,EAAaJ,EAAU5Q,MAAM,EAAGyF,GAChCwL,EAAUL,EAAU5Q,MAAMyF,EAAI,GAC9ByL,EAAML,EAAKhQ,MAAM+O,GACjBsB,IACFF,EAAWjM,KAAKmM,EAAI,IACpBD,EAAQE,QAAQD,EAAI,KAElBD,EAAQxM,SACVyL,EAAOe,EAAQG,KAAK,KAAOlB,GAE7B7K,KAAKqG,SAAWsF,EAAWI,KAAK,KAChC,SAMJ/L,KAAKqG,SAASjH,OA1LD,MA2LfY,KAAKqG,SAAW,IAKdiF,IACFtL,KAAKqG,SAAWrG,KAAKqG,SAAS1H,OAAO,EAAGqB,KAAKqG,SAASjH,OAAS,IAKnE,IAAIyK,EAAOgB,EAAKxP,QAAQ,MACV,IAAVwO,IAEF7J,KAAK6J,KAAOgB,EAAKlM,OAAOkL,GACxBgB,EAAOA,EAAKlQ,MAAM,EAAGkP,IAEvB,IAAImC,EAAKnB,EAAKxP,QAAQ,KAWtB,OAVY,IAAR2Q,IACFhM,KAAK4J,OAASiB,EAAKlM,OAAOqN,GAC1BnB,EAAOA,EAAKlQ,MAAM,EAAGqR,IAEnBnB,IAAQ7K,KAAK2J,SAAWkB,GACxBJ,EAAgBE,IAChB3K,KAAKqG,WAAarG,KAAK2J,WACzB3J,KAAK2J,SAAW,IAGX3J,MAGT8J,EAAIrR,UAAU4S,UAAY,SAASD,GACjC,IAAI1B,EAAOM,EAAY3K,KAAK+L,GACxB1B,IAEW,OADbA,EAAOA,EAAK,MAEV1J,KAAK0J,KAAOA,EAAK/K,OAAO,IAE1ByM,EAAOA,EAAKzM,OAAO,EAAGyM,EAAKhM,OAASsK,EAAKtK,SAEvCgM,IAAQpL,KAAKqG,SAAW+E,IAG9BpO,EAAO7C,QA7MP,SAAkB8L,EAAKyE,GACrB,GAAIzE,GAAOA,aAAe6D,EAAO,OAAO7D,EAExC,IAAIgG,EAAI,IAAInC,EAEZ,OADAmC,EAAE5I,MAAM4C,EAAKyE,GACNuB,I,iCC7GT9R,EAAQ+R,IAAM,EAAQ,KACtB/R,EAAQgS,GAAM,EAAQ,KACtBhS,EAAQiS,GAAM,EAAQ,KACtBjS,EAAQkS,EAAM,EAAQ,KACtBlS,EAAQmS,EAAM,EAAQ,M,kBCNtBtP,EAAO7C,QAAQ,yN,iCCIfA,EAAQoS,eAAuB,EAAQ,KACvCpS,EAAQqS,qBAAuB,EAAQ,KACvCrS,EAAQsS,eAAuB,EAAQ,M,iCCCvCzP,EAAO7C,QAAU,SAAwBwJ,EAAOc,EAAOiI,GACrD,IAAItK,EAAOuK,EAAOxI,EAAQyI,EACtBC,GAAY,EACZ3I,EAAMP,EAAMmJ,OACZC,EAASpJ,EAAMtH,IAKnB,IAHAsH,EAAMtH,IAAMoI,EAAQ,EACpBrC,EAAQ,EAEDuB,EAAMtH,IAAM6H,GAAK,CAEtB,GAAe,MADfC,EAASR,EAAMvH,IAAIP,WAAW8H,EAAMtH,OAGpB,MADd+F,EACiB,CACfuK,GAAQ,EACR,MAMJ,GAFAC,EAAUjJ,EAAMtH,IAChBsH,EAAMqJ,GAAGnG,OAAOoG,UAAUtJ,GACX,KAAXQ,EACF,GAAIyI,IAAYjJ,EAAMtH,IAAM,EAE1B+F,SACK,GAAIsK,EAET,OADA/I,EAAMtH,IAAM0Q,GACJ,EAYd,OAPIJ,IACFE,EAAWlJ,EAAMtH,KAInBsH,EAAMtH,IAAM0Q,EAELF,I,iCCzCT,IAAItR,EAAc,EAAQ,KAAmBA,YAG7CyB,EAAO7C,QAAU,SAA8BiB,EAAKiB,EAAK6H,GACvD,IAAItI,EAAMwG,EAENqC,EAAQpI,EACRe,EAAS,CACP8P,IAAI,EACJ7Q,IAAK,EACL8Q,MAAO,EACP/R,IAAK,IAGX,GAA4B,KAAxBA,EAAIS,WAAWQ,GAAuB,CAExC,IADAA,IACOA,EAAM6H,GAAK,CAEhB,GAAa,MADbtI,EAAOR,EAAIS,WAAWQ,IACQ,OAAOe,EACrC,GAAa,KAATxB,EAIF,OAHAwB,EAAOf,IAAMA,EAAM,EACnBe,EAAOhC,IAAMG,EAAYH,EAAIT,MAAM8J,EAAQ,EAAGpI,IAC9Ce,EAAO8P,IAAK,EACL9P,EAEI,KAATxB,GAAyBS,EAAM,EAAI6H,EACrC7H,GAAO,EAITA,IAIF,OAAOe,EAMT,IADAgF,EAAQ,EACD/F,EAAM6H,GAGE,MAFbtI,EAAOR,EAAIS,WAAWQ,OAKlBT,EAAO,IAAiB,MAATA,IAEnB,GAAa,KAATA,GAAyBS,EAAM,EAAI6H,EACrC7H,GAAO,MADT,CASA,GAJa,KAATT,GACFwG,IAGW,KAATxG,EAAuB,CACzB,GAAc,IAAVwG,EAAe,MACnBA,IAGF/F,IAGF,OAAIoI,IAAUpI,GACA,IAAV+F,IAEJhF,EAAOhC,IAAMG,EAAYH,EAAIT,MAAM8J,EAAOpI,IAC1Ce,EAAO+P,MAhEK,EAiEZ/P,EAAOf,IAAMA,EACbe,EAAO8P,IAAK,GANgB9P,I,iCCjE9B,IAAI7B,EAAc,EAAQ,KAAmBA,YAG7CyB,EAAO7C,QAAU,SAAwBiB,EAAKiB,EAAK6H,GACjD,IAAItI,EACAuI,EACAgJ,EAAQ,EACR1I,EAAQpI,EACRe,EAAS,CACP8P,IAAI,EACJ7Q,IAAK,EACL8Q,MAAO,EACP/R,IAAK,IAGX,GAAIiB,GAAO6H,EAAO,OAAO9G,EAIzB,GAAe,MAFf+G,EAAS/I,EAAIS,WAAWQ,KAEkB,KAAX8H,GAAsC,KAAXA,EAA2B,OAAO/G,EAO5F,IALAf,IAGe,KAAX8H,IAAmBA,EAAS,IAEzB9H,EAAM6H,GAAK,CAEhB,IADAtI,EAAOR,EAAIS,WAAWQ,MACT8H,EAKX,OAJA/G,EAAOf,IAAMA,EAAM,EACnBe,EAAO+P,MAAQA,EACf/P,EAAOhC,IAAMG,EAAYH,EAAIT,MAAM8J,EAAQ,EAAGpI,IAC9Ce,EAAO8P,IAAK,EACL9P,EACW,KAATxB,EACTuR,IACkB,KAATvR,GAAyBS,EAAM,EAAI6H,IAC5C7H,IAC4B,KAAxBjB,EAAIS,WAAWQ,IACjB8Q,KAIJ9Q,IAGF,OAAOe,I,iCCzCT,IAAI7C,EAAkB,EAAQ,KAAkBA,OAC5CgB,EAAkB,EAAQ,KAAkBA,YAC5CW,EAAkB,EAAQ,KAAkBA,WAK5CkR,EAAgB,GAgHpB,SAAS/H,IA8BPrF,KAAKqH,MAAQ9M,EAAO,GAAI6S,GA3I1BA,EAAcC,YAAc,SAAUhJ,EAAQ3C,EAAKvE,EAAS4K,EAAKuF,GAC/D,IAAItJ,EAAQK,EAAO3C,GAEnB,MAAQ,QAAU4L,EAAIC,YAAYvJ,GAAS,IACnC9H,EAAWmI,EAAO3C,GAAK7D,SACvB,WAIVuP,EAAcI,WAAa,SAAUnJ,EAAQ3C,EAAKvE,EAAS4K,EAAKuF,GAC9D,IAAItJ,EAAQK,EAAO3C,GAEnB,MAAQ,OAAS4L,EAAIC,YAAYvJ,GAAS,UAClC9H,EAAWmI,EAAO3C,GAAK7D,SACvB,mBAIVuP,EAAcK,MAAQ,SAAUpJ,EAAQ3C,EAAKvE,EAAS4K,EAAKuF,GACzD,IAGII,EAAatN,EAAGuN,EAAUC,EAH1B5J,EAAQK,EAAO3C,GACfa,EAAOyB,EAAMzB,KAAOhH,EAAYyI,EAAMzB,MAAMzF,OAAS,GACrD+Q,EAAW,GAaf,OAVItL,IACFsL,EAAWtL,EAAKuI,MAAM,QAAQ,IASI,KALlC4C,EADEvQ,EAAQ2Q,WACI3Q,EAAQ2Q,UAAU9J,EAAMnG,QAASgQ,IAEjC3R,EAAW8H,EAAMnG,UAGjBxC,QAAQ,QACfqS,EAAc,KAMnBnL,GACFnC,EAAW4D,EAAMrB,UAAU,SAC3BgL,EAAW3J,EAAM9B,MAAQ8B,EAAM9B,MAAMvH,QAAU,GAE3CyF,EAAI,EACNuN,EAASjO,KAAK,CAAE,QAASvC,EAAQ4Q,WAAaF,IAE9CF,EAASvN,GAAG,IAAM,IAAMjD,EAAQ4Q,WAAaF,EAI/CD,EAAW,CACT1L,MAAOyL,GAGD,aAAeL,EAAIC,YAAYK,GAAY,IAC3CF,EACA,mBAIF,aAAeJ,EAAIC,YAAYvJ,GAAS,IACxC0J,EACA,mBAIVN,EAAcY,MAAQ,SAAU3J,EAAQ3C,EAAKvE,EAAS4K,EAAKuF,GACzD,IAAItJ,EAAQK,EAAO3C,GAUnB,OAHAsC,EAAM9B,MAAM8B,EAAMrB,UAAU,QAAQ,GAClC2K,EAAIW,mBAAmBjK,EAAM3B,SAAUlF,EAAS4K,GAE3CuF,EAAIY,YAAY7J,EAAQ3C,EAAKvE,IAItCiQ,EAAce,UAAY,SAAU9J,EAAQ3C,EAAKvE,GAC/C,OAAOA,EAAQiR,SAAW,WAAa,UAEzChB,EAAciB,UAAY,SAAUhK,EAAQ3C,EAAKvE,GAC/C,OAAOA,EAAQmR,OAAUnR,EAAQiR,SAAW,WAAa,SAAY,MAIvEhB,EAAcmB,KAAO,SAAUlK,EAAQ3C,GACrC,OAAOxF,EAAWmI,EAAO3C,GAAK7D,UAIhCuP,EAAcoB,WAAa,SAAUnK,EAAQ3C,GAC3C,OAAO2C,EAAO3C,GAAK7D,SAErBuP,EAAcqB,YAAc,SAAUpK,EAAQ3C,GAC5C,OAAO2C,EAAO3C,GAAK7D,SAgDrBwH,EAAS5M,UAAU8U,YAAc,SAAqBvJ,GACpD,IAAI5D,EAAGqI,EAAGrL,EAEV,IAAK4G,EAAM9B,MAAS,MAAO,GAI3B,IAFA9E,EAAS,GAEJgD,EAAI,EAAGqI,EAAIzE,EAAM9B,MAAM9C,OAAQgB,EAAIqI,EAAGrI,IACzChD,GAAU,IAAMlB,EAAW8H,EAAM9B,MAAM9B,GAAG,IAAM,KAAOlE,EAAW8H,EAAM9B,MAAM9B,GAAG,IAAM,IAGzF,OAAOhD,GAaTiI,EAAS5M,UAAUyV,YAAc,SAAqB7J,EAAQ3C,EAAKvE,GACjE,IAAIuR,EACAtR,EAAS,GACTuR,GAAS,EACT3K,EAAQK,EAAO3C,GAGnB,OAAIsC,EAAMtB,OACD,IAULsB,EAAMvB,QAA4B,IAAnBuB,EAAM/B,SAAkBP,GAAO2C,EAAO3C,EAAM,GAAGgB,SAChEtF,GAAU,MAIZA,KAA8B,IAAnB4G,EAAM/B,QAAiB,KAAO,KAAO+B,EAAM1G,IAGtDF,GAAU4C,KAAKuN,YAAYvJ,GAGL,IAAlBA,EAAM/B,SAAiB9E,EAAQiR,WACjChR,GAAU,MAIR4G,EAAMvB,QACRkM,GAAS,EAEa,IAAlB3K,EAAM/B,SACJP,EAAM,EAAI2C,EAAOjF,SAGI,YAFvBsP,EAAYrK,EAAO3C,EAAM,IAEXM,MAAqB0M,EAAUhM,SAKX,IAAvBgM,EAAUzM,SAAkByM,EAAUpR,MAAQ0G,EAAM1G,OAF7DqR,GAAS,IAWjBvR,GAAUuR,EAAS,MAAQ,MAc7BtJ,EAAS5M,UAAU4P,aAAe,SAAUhE,EAAQlH,EAAS4K,GAK3D,IAJA,IAAI/F,EACA5E,EAAS,GACTiK,EAAQrH,KAAKqH,MAERjH,EAAI,EAAGP,EAAMwE,EAAOjF,OAAQgB,EAAIP,EAAKO,SAGjB,IAAhBiH,EAFXrF,EAAOqC,EAAOjE,GAAG4B,MAGf5E,GAAUiK,EAAMrF,GAAMqC,EAAQjE,EAAGjD,EAAS4K,EAAK/H,MAE/C5C,GAAU4C,KAAKkO,YAAY7J,EAAQjE,EAAGjD,GAI1C,OAAOC,GAcTiI,EAAS5M,UAAUwV,mBAAqB,SAAU5J,EAAQlH,EAAS4K,GAGjE,IAFA,IAAI3K,EAAS,GAEJgD,EAAI,EAAGP,EAAMwE,EAAOjF,OAAQgB,EAAIP,EAAKO,IACrB,SAAnBiE,EAAOjE,GAAG4B,KACZ5E,GAAUiH,EAAOjE,GAAGvC,QACQ,UAAnBwG,EAAOjE,GAAG4B,OACnB5E,GAAU4C,KAAKiO,mBAAmB5J,EAAOjE,GAAGiC,SAAUlF,EAAS4K,IAInE,OAAO3K,GAaTiI,EAAS5M,UAAUyP,OAAS,SAAU7D,EAAQlH,EAAS4K,GACrD,IAAI3H,EAAGP,EAAKmC,EACR5E,EAAS,GACTiK,EAAQrH,KAAKqH,MAEjB,IAAKjH,EAAI,EAAGP,EAAMwE,EAAOjF,OAAQgB,EAAIP,EAAKO,IAG3B,YAFb4B,EAAOqC,EAAOjE,GAAG4B,MAGf5E,GAAU4C,KAAKqI,aAAahE,EAAOjE,GAAGiC,SAAUlF,EAAS4K,QACzB,IAAhBV,EAAMrF,GACtB5E,GAAUiK,EAAMhD,EAAOjE,GAAG4B,MAAMqC,EAAQjE,EAAGjD,EAAS4K,EAAK/H,MAEzD5C,GAAU4C,KAAKkO,YAAY7J,EAAQjE,EAAGjD,EAAS4K,GAInD,OAAO3K,GAGTJ,EAAO7C,QAAUkL,G,iCCrUjB,IAAItF,EAAS,EAAQ,KAGjB6O,EAAS,CACX,CAAE,YAAkB,EAAQ,MAC5B,CAAE,QAAkB,EAAQ,MAC5B,CAAE,SAAkB,EAAQ,MAC5B,CAAE,UAAkB,EAAQ,MAC5B,CAAE,eAAkB,EAAQ,MAC5B,CAAE,cAAkB,EAAQ,OAO9B,SAASC,IAMP7O,KAAKsH,MAAQ,IAAIvH,EAEjB,IAAK,IAAIK,EAAI,EAAGA,EAAIwO,EAAOxP,OAAQgB,IACjCJ,KAAKsH,MAAM5H,KAAKkP,EAAOxO,GAAG,GAAIwO,EAAOxO,GAAG,IAU5CyO,EAAKpW,UAAUwP,QAAU,SAAUtE,GACjC,IAAIvD,EAAGqI,EAAGpB,EAIV,IAAKjH,EAAI,EAAGqI,GAFZpB,EAAQrH,KAAKsH,MAAMzF,SAAS,KAENzC,OAAQgB,EAAIqI,EAAGrI,IACnCiH,EAAMjH,GAAGuD,IAIbkL,EAAKpW,UAAUuP,MAAQ,EAAQ,KAG/BhL,EAAO7C,QAAU0U,G,iCCnDjB,IAAIC,EAAe,YACfC,EAAe,MAGnB/R,EAAO7C,QAAU,SAAmBwJ,GAClC,IAAIvI,EAMJA,GAHAA,EAAMuI,EAAMvH,IAAId,QAAQwT,EAAa,OAG3BxT,QAAQyT,EAAS,KAE3BpL,EAAMvH,IAAMhB,I,iCChBd4B,EAAO7C,QAAU,SAAewJ,GAC9B,IAAIK,EAEAL,EAAMyE,aACRpE,EAAiB,IAAIL,EAAM5B,MAAM,SAAU,GAAI,IACzClE,QAAW8F,EAAMvH,IACvB4H,EAAM7B,IAAW,CAAE,EAAG,GACtB6B,EAAM3B,SAAW,GACjBsB,EAAMU,OAAO3E,KAAKsE,IAElBL,EAAMqJ,GAAGvK,MAAMY,MAAMM,EAAMvH,IAAKuH,EAAMqJ,GAAIrJ,EAAMoE,IAAKpE,EAAMU,U,iCCX/DrH,EAAO7C,QAAU,SAAgBwJ,GAC/B,IAA2BqL,EAAK5O,EAAGqI,EAA/BpE,EAASV,EAAMU,OAGnB,IAAKjE,EAAI,EAAGqI,EAAIpE,EAAOjF,OAAQgB,EAAIqI,EAAGrI,IAEnB,YADjB4O,EAAM3K,EAAOjE,IACL4B,MACN2B,EAAMqJ,GAAGnG,OAAOxD,MAAM2L,EAAInR,QAAS8F,EAAMqJ,GAAIrJ,EAAMoE,IAAKiH,EAAI3M,Y,iCCFlE,IAAIlG,EAAiB,EAAQ,KAAmBA,eAMhD,SAAS8S,EAAY7T,GACnB,MAAO,aAAaU,KAAKV,GAI3B4B,EAAO7C,QAAU,SAAiBwJ,GAChC,IAAIvD,EAAGyD,EAAG4E,EAAGpE,EAAQL,EAAOkL,EAAcC,EAAOC,EAAIb,EAAMlS,EAAKgT,EAC5DjN,EAAOkN,EAAerJ,EAAKsJ,EAASC,EAEpCC,EAZcrU,EAWdsU,EAAc/L,EAAMU,OAGxB,GAAKV,EAAMqJ,GAAG7P,QAAQ6J,QAEtB,IAAKnD,EAAI,EAAG4E,EAAIiH,EAAYtQ,OAAQyE,EAAI4E,EAAG5E,IACzC,GAA4B,WAAxB6L,EAAY7L,GAAG7B,MACd2B,EAAMqJ,GAAGhG,QAAQ2I,QAAQD,EAAY7L,GAAGhG,SAU7C,IAJAyR,EAAgB,EAIXlP,GANLiE,EAASqL,EAAY7L,GAAGxB,UAMRjD,OAAS,EAAGgB,GAAK,EAAGA,IAIlC,GAA0B,gBAH1B8O,EAAe7K,EAAOjE,IAGL4B,MAiBjB,GAR0B,gBAAtBkN,EAAalN,OAzCH5G,EA0CG8T,EAAarR,QAzC3B,YAAY/B,KAAKV,IAyCsBkU,EAAgB,GACtDA,IAEEL,EAAYC,EAAarR,UAC3ByR,OAGAA,EAAgB,IAEM,SAAtBJ,EAAalN,MAAmB2B,EAAMqJ,GAAGhG,QAAQlL,KAAKoT,EAAarR,SAAU,CAU/E,IARA0Q,EAAOW,EAAarR,QACpB4R,EAAQ9L,EAAMqJ,GAAGhG,QAAQxL,MAAM+S,GAG/BY,EAAQ,GACR/M,EAAQ8M,EAAa9M,MACrBiN,EAAU,EAELD,EAAK,EAAGA,EAAKK,EAAMrQ,OAAQgQ,IAE9BnJ,EAAMwJ,EAAML,GAAInJ,IAChBsJ,EAAU5L,EAAMqJ,GAAG7G,cAAcF,GAC5BtC,EAAMqJ,GAAGhH,aAAauJ,KAE3BC,EAAUC,EAAML,GAAIb,KAWlBiB,EALGC,EAAML,GAAIQ,OAEiB,YAArBH,EAAML,GAAIQ,QAAyB,YAAY9T,KAAK0T,GAGnD7L,EAAMqJ,GAAGvG,kBAAkB+I,GAF3B7L,EAAMqJ,GAAGvG,kBAAkB,UAAY+I,GAASlU,QAAQ,WAAY,IAFpEqI,EAAMqJ,GAAGvG,kBAAkB,UAAY+I,GAASlU,QAAQ,aAAc,KAOlFe,EAAMoT,EAAML,GAAI/R,OAENgS,KACRrL,EAAgB,IAAIL,EAAM5B,MAAM,OAAQ,GAAI,IACtClE,QAAU0Q,EAAK5T,MAAM0U,EAAShT,GACpC2H,EAAM5B,MAAUA,EAChB+M,EAAMzP,KAAKsE,KAGbA,EAAgB,IAAIL,EAAM5B,MAAM,YAAa,IAAK,IAC5CG,MAAU,CAAE,CAAE,OAAQqN,IAC5BvL,EAAM5B,MAAUA,IAChB4B,EAAM1B,OAAU,UAChB0B,EAAMzB,KAAU,OAChB4M,EAAMzP,KAAKsE,IAEXA,EAAgB,IAAIL,EAAM5B,MAAM,OAAQ,GAAI,IACtClE,QAAU2R,EAChBxL,EAAM5B,MAAUA,EAChB+M,EAAMzP,KAAKsE,IAEXA,EAAgB,IAAIL,EAAM5B,MAAM,aAAc,KAAM,IAC9CK,QAAYA,EAClB4B,EAAM1B,OAAU,UAChB0B,EAAMzB,KAAU,OAChB4M,EAAMzP,KAAKsE,GAEXqL,EAAUI,EAAML,GAAIS,WAElBR,EAAUd,EAAKnP,UACjB4E,EAAgB,IAAIL,EAAM5B,MAAM,OAAQ,GAAI,IACtClE,QAAU0Q,EAAK5T,MAAM0U,GAC3BrL,EAAM5B,MAAUA,EAChB+M,EAAMzP,KAAKsE,IAIb0L,EAAY7L,GAAGxB,SAAWgC,EAASlI,EAAekI,EAAQjE,EAAG+O,SApF7D,IADA/O,IACOiE,EAAOjE,GAAGgC,QAAU8M,EAAa9M,OAA4B,cAAnBiC,EAAOjE,GAAG4B,MACzD5B,M,iCC5BV,IAAI0P,EAAU,+BAIVC,EAAsB,kBAEtBC,EAAiB,mBACjBC,EAAc,CAChBjX,EAAG,IACHkX,EAAG,IACHC,EAAG,IACHC,GAAI,KAGN,SAASC,EAAU7U,EAAOG,GACxB,OAAOsU,EAAYtU,EAAKI,eAG1B,SAASuU,EAAeC,GACtB,IAAInQ,EAAG4D,EAAOwM,EAAkB,EAEhC,IAAKpQ,EAAImQ,EAAanR,OAAS,EAAGgB,GAAK,EAAGA,IAGrB,UAFnB4D,EAAQuM,EAAanQ,IAEX4B,MAAoBwO,IAC5BxM,EAAMnG,QAAUmG,EAAMnG,QAAQvC,QAAQ0U,EAAgBK,IAGrC,cAAfrM,EAAMhC,MAAuC,SAAfgC,EAAMzB,MACtCiO,IAGiB,eAAfxM,EAAMhC,MAAwC,SAAfgC,EAAMzB,MACvCiO,IAKN,SAASC,EAAaF,GACpB,IAAInQ,EAAG4D,EAAOwM,EAAkB,EAEhC,IAAKpQ,EAAImQ,EAAanR,OAAS,EAAGgB,GAAK,EAAGA,IAGrB,UAFnB4D,EAAQuM,EAAanQ,IAEX4B,MAAoBwO,GACxBV,EAAQhU,KAAKkI,EAAMnG,WACrBmG,EAAMnG,QAAUmG,EAAMnG,QACnBvC,QAAQ,OAAQ,KAGhBA,QAAQ,UAAW,KAAKA,QAAQ,WAAY,QAC5CA,QAAQ,cAAe,UAAUA,QAAQ,SAAU,KAEnDA,QAAQ,wBAAyB,SAEjCA,QAAQ,mBAAoB,SAC5BA,QAAQ,2BAA4B,UAIxB,cAAf0I,EAAMhC,MAAuC,SAAfgC,EAAMzB,MACtCiO,IAGiB,eAAfxM,EAAMhC,MAAwC,SAAfgC,EAAMzB,MACvCiO,IAMNxT,EAAO7C,QAAU,SAAiBwJ,GAChC,IAAI+M,EAEJ,GAAK/M,EAAMqJ,GAAG7P,QAAQwT,YAEtB,IAAKD,EAAS/M,EAAMU,OAAOjF,OAAS,EAAGsR,GAAU,EAAGA,IAEhB,WAA9B/M,EAAMU,OAAOqM,GAAQ1O,OAErB+N,EAAoBjU,KAAK6H,EAAMU,OAAOqM,GAAQ7S,UAChDyS,EAAe3M,EAAMU,OAAOqM,GAAQrO,UAGlCyN,EAAQhU,KAAK6H,EAAMU,OAAOqM,GAAQ7S,UACpC4S,EAAa9M,EAAMU,OAAOqM,GAAQrO,a,iCCjGxC,IAAI5F,EAAiB,EAAQ,KAAmBA,aAC5CE,EAAiB,EAAQ,KAAmBA,YAC5CD,EAAiB,EAAQ,KAAmBA,eAE5CkU,EAAgB,OAChBC,EAAW,QAIf,SAASC,EAAU1V,EAAKiC,EAAOrD,GAC7B,OAAOoB,EAAIuD,OAAO,EAAGtB,GAASrD,EAAKoB,EAAIuD,OAAOtB,EAAQ,GAGxD,SAAS0T,EAAgB1M,EAAQV,GAC/B,IAAIvD,EAAG4D,EAAOuK,EAAMyC,EAAG3U,EAAK6H,EAAK+M,EAAWC,EAAMC,EAAUC,EACxDC,EAAiBC,EAAiBC,EAAkBC,EACpDC,EAASC,EAAU7N,EAAG8N,EAAUC,EAAOC,EAAWC,EAItD,IAFAF,EAAQ,GAEHxR,EAAI,EAAGA,EAAIiE,EAAOjF,OAAQgB,IAAK,CAKlC,IAJA4D,EAAQK,EAAOjE,GAEf6Q,EAAY5M,EAAOjE,GAAGgC,MAEjByB,EAAI+N,EAAMxS,OAAS,EAAGyE,GAAK,KAC1B+N,EAAM/N,GAAGzB,OAAS6O,GADWpN,KAKnC,GAFA+N,EAAMxS,OAASyE,EAAI,EAEA,SAAfG,EAAMhC,KAAV,CAGA3F,EAAM,EACN6H,GAFAqK,EAAOvK,EAAMnG,SAEFuB,OAGX2S,EACA,KAAO1V,EAAM6H,IACX2M,EAAShB,UAAYxT,EACrB2U,EAAIH,EAASxR,KAAKkP,KAFF,CAchB,GATAkD,EAAUC,GAAW,EACrBrV,EAAM2U,EAAE3T,MAAQ,EAChBsU,EAAqB,MAATX,EAAE,GAKdG,EAAW,GAEPH,EAAE3T,MAAQ,GAAK,EACjB8T,EAAW5C,EAAK1S,WAAWmV,EAAE3T,MAAQ,QAErC,IAAKwG,EAAIzD,EAAI,EAAGyD,GAAK,IACI,cAAnBQ,EAAOR,GAAG7B,MAA2C,cAAnBqC,EAAOR,GAAG7B,MAD1B6B,IAEtB,GAAuB,SAAnBQ,EAAOR,GAAG7B,KAAd,CAEAmP,EAAW9M,EAAOR,GAAGhG,QAAQhC,WAAWwI,EAAOR,GAAGhG,QAAQuB,OAAS,GACnE,MASJ,GAFAgS,EAAW,GAEP/U,EAAM6H,EACRkN,EAAW7C,EAAK1S,WAAWQ,QAE3B,IAAKwH,EAAIzD,EAAI,EAAGyD,EAAIQ,EAAOjF,SACF,cAAnBiF,EAAOR,GAAG7B,MAA2C,cAAnBqC,EAAOR,GAAG7B,MADf6B,IAEjC,GAAuB,SAAnBQ,EAAOR,GAAG7B,KAAd,CAEAoP,EAAW/M,EAAOR,GAAGhG,QAAQhC,WAAW,GACxC,MAuCJ,GAnCAwV,EAAkB3U,EAAeyU,IAAaxU,EAAYvD,OAAOC,aAAa8X,IAC9EG,EAAkB5U,EAAe0U,IAAazU,EAAYvD,OAAOC,aAAa+X,IAE9EG,EAAmB9U,EAAa0U,IAChCK,EAAmB/U,EAAa2U,IAG9BK,GAAU,EACDH,IACHC,GAAoBF,IACxBI,GAAU,IAIVF,EACFG,GAAW,EACFL,IACHG,GAAoBF,IACxBI,GAAW,IAIE,KAAbN,GAAsC,MAATJ,EAAE,IAC7BG,GAAY,IAAgBA,GAAY,KAE1CO,EAAWD,GAAU,GAIrBA,GAAWC,IAEbD,GAAU,EACVC,EAAWJ,GAGRG,GAAYC,EAAjB,CAQA,GAAIA,EAEF,IAAK7N,EAAI+N,EAAMxS,OAAS,EAAGyE,GAAK,IAC9BqN,EAAOU,EAAM/N,KACT+N,EAAM/N,GAAGzB,MAAQ6O,IAFYpN,IAGjC,GAAIqN,EAAKc,SAAWL,GAAYC,EAAM/N,GAAGzB,QAAU6O,EAAW,CAC5DC,EAAOU,EAAM/N,GAET8N,GACFE,EAAYlO,EAAMqJ,GAAG7P,QAAQ8U,OAAO,GACpCH,EAAanO,EAAMqJ,GAAG7P,QAAQ8U,OAAO,KAErCJ,EAAYlO,EAAMqJ,GAAG7P,QAAQ8U,OAAO,GACpCH,EAAanO,EAAMqJ,GAAG7P,QAAQ8U,OAAO,IAMvCjO,EAAMnG,QAAUiT,EAAU9M,EAAMnG,QAASmT,EAAE3T,MAAOyU,GAClDzN,EAAO6M,EAAKlN,OAAOnG,QAAUiT,EAC3BzM,EAAO6M,EAAKlN,OAAOnG,QAASqT,EAAK7U,IAAKwV,GAExCxV,GAAOyV,EAAW1S,OAAS,EACvB8R,EAAKlN,QAAU5D,IAAK/D,GAAOwV,EAAUzS,OAAS,GAGlD8E,GADAqK,EAAOvK,EAAMnG,SACFuB,OAEXwS,EAAMxS,OAASyE,EACf,SAASkO,EAKXN,EACFG,EAAMlS,KAAK,CACTsE,MAAO5D,EACP/D,IAAK2U,EAAE3T,MACP2U,OAAQL,EACRvP,MAAO6O,IAEAS,GAAYC,IACrB3N,EAAMnG,QAAUiT,EAAU9M,EAAMnG,QAASmT,EAAE3T,MAjKlC,WAgHLsU,IACF3N,EAAMnG,QAAUiT,EAAU9M,EAAMnG,QAASmT,EAAE3T,MAjHpC,SAwKjBL,EAAO7C,QAAU,SAAqBwJ,GAEpC,IAAI+M,EAEJ,GAAK/M,EAAMqJ,GAAG7P,QAAQwT,YAEtB,IAAKD,EAAS/M,EAAMU,OAAOjF,OAAS,EAAGsR,GAAU,EAAGA,IAEhB,WAA9B/M,EAAMU,OAAOqM,GAAQ1O,MACpB4O,EAAc9U,KAAK6H,EAAMU,OAAOqM,GAAQ7S,UAI7CkT,EAAgBpN,EAAMU,OAAOqM,GAAQrO,SAAUsB,K,iCC5LnD,IAAI5B,EAAQ,EAAQ,KAGpB,SAASmQ,EAAU9V,EAAK4Q,EAAIjF,GAC1B/H,KAAK5D,IAAMA,EACX4D,KAAK+H,IAAMA,EACX/H,KAAKqE,OAAS,GACdrE,KAAKoI,YAAa,EAClBpI,KAAKgN,GAAKA,EAIZkF,EAAUzZ,UAAUsJ,MAAQA,EAG5B/E,EAAO7C,QAAU+X,G,iCCXjB,IAAInS,EAAkB,EAAQ,KAG1B6O,EAAS,CAGX,CAAE,QAAc,EAAQ,KAA6B,CAAE,YAAa,cACpE,CAAE,OAAc,EAAQ,MACxB,CAAE,QAAc,EAAQ,KAA6B,CAAE,YAAa,YAAa,aAAc,SAC/F,CAAE,aAAc,EAAQ,KAA6B,CAAE,YAAa,YAAa,aAAc,SAC/F,CAAE,KAAc,EAAQ,KAA6B,CAAE,YAAa,YAAa,aAAc,SAC/F,CAAE,OAAc,EAAQ,KAA6B,CAAE,YAAa,YAAa,eACjF,CAAE,YAAc,EAAQ,MACxB,CAAE,UAAc,EAAQ,KAA6B,CAAE,YAAa,YAAa,eACjF,CAAE,WAAc,EAAQ,MACxB,CAAE,aAAc,EAAQ,KAA6B,CAAE,YAAa,YAAa,eACjF,CAAE,YAAc,EAAQ,OAO1B,SAASrJ,IAMPvF,KAAKsH,MAAQ,IAAIvH,EAEjB,IAAK,IAAIK,EAAI,EAAGA,EAAIwO,EAAOxP,OAAQgB,IACjCJ,KAAKsH,MAAM5H,KAAKkP,EAAOxO,GAAG,GAAIwO,EAAOxO,GAAG,GAAI,CAAEM,KAAMkO,EAAOxO,GAAG,IAAM,IAAIzF,UAO5E4K,EAAY9M,UAAU6L,SAAW,SAAUX,EAAOwO,EAAWC,GAQ3D,IAPA,IAAQhS,EACJiH,EAAQrH,KAAKsH,MAAMzF,SAAS,IAC5BhC,EAAMwH,EAAMjI,OACZiT,EAAOF,EACPG,GAAgB,EAChBC,EAAa5O,EAAMqJ,GAAG7P,QAAQoV,WAE3BF,EAAOD,IACZzO,EAAM0O,KAAOA,EAAO1O,EAAM6O,eAAeH,KACrCA,GAAQD,OAIRzO,EAAM8O,OAAOJ,GAAQ1O,EAAM+O,YANV,CAUrB,GAAI/O,EAAMvB,OAASmQ,EAAY,CAC7B5O,EAAM0O,KAAOD,EACb,MAUF,IAAKhS,EAAI,EAAGA,EAAIP,IACTwH,EAAMjH,GAAGuD,EAAO0O,EAAMD,GAAS,GADjBhS,KAOrBuD,EAAMgP,OAASL,EAGX3O,EAAMiP,QAAQjP,EAAM0O,KAAO,KAC7BC,GAAgB,IAGlBD,EAAO1O,EAAM0O,MAEFD,GAAWzO,EAAMiP,QAAQP,KAClCC,GAAgB,EAChBD,IACA1O,EAAM0O,KAAOA,KAWnB9M,EAAY9M,UAAU4K,MAAQ,SAAUjH,EAAK4Q,EAAIjF,EAAK8K,GACpD,IAAIlP,EAECvH,IAELuH,EAAQ,IAAI3D,KAAKgI,MAAM5L,EAAK4Q,EAAIjF,EAAK8K,GAErC7S,KAAKsE,SAASX,EAAOA,EAAM0O,KAAM1O,EAAMmP,WAIzCvN,EAAY9M,UAAUuP,MAAQ,EAAQ,KAGtChL,EAAO7C,QAAUoL,G,iCCrHjB,IAAI/I,EAAU,EAAQ,KAAmBA,QAGzC,SAASuW,EAAQpP,EAAO0O,GACtB,IAAIhW,EAAMsH,EAAMqP,OAAOX,GAAQ1O,EAAM+O,UACjCxO,EAAMP,EAAMsP,OAAOZ,GAEvB,OAAO1O,EAAMvH,IAAIuC,OAAOtC,EAAK6H,EAAM7H,GAGrC,SAAS6W,EAAa9X,GACpB,IAGIpB,EAHAoD,EAAS,GACTf,EAAM,EACN6H,EAAM9I,EAAIgE,OAEV+T,EAAU,EACV9D,EAAU,EACV+D,GAAa,EACbC,EAAe,EAInB,IAFArZ,EAAMoB,EAAIS,WAAWQ,GAEdA,EAAM6H,GACA,KAAPlK,EACEoZ,GAGFA,GAAa,EACbC,EAAehX,GACN8W,EAAU,GAAM,IACzBC,GAAa,EACbC,EAAehX,GAED,MAAPrC,GAAuBmZ,EAAU,GAAM,GAAOC,IACvDhW,EAAOsC,KAAKtE,EAAIoD,UAAU6Q,EAAShT,IACnCgT,EAAUhT,EAAM,GAGP,KAAPrC,EACFmZ,IAEAA,EAAU,IAGZ9W,IAIY6H,GAAOkP,IACjBA,GAAa,EACb/W,EAAMgX,EAAe,GAGvBrZ,EAAKoB,EAAIS,WAAWQ,GAKtB,OAFAe,EAAOsC,KAAKtE,EAAIoD,UAAU6Q,IAEnBjS,EAITJ,EAAO7C,QAAU,SAAewJ,EAAOwO,EAAWC,EAAS7N,GACzD,IAAIvK,EAAIsZ,EAAUjX,EAAK+D,EAAGmT,EAAUC,EAASC,EAAazP,EACtD0P,EAAQ1C,EAAG2C,EAAYC,EAG3B,GAAIzB,EAAY,EAAIC,EAAW,OAAO,EAItC,GAFAmB,EAAWpB,EAAY,EAEnBxO,EAAM8O,OAAOc,GAAY5P,EAAM+O,UAAa,OAAO,EAGvD,GAAI/O,EAAM8O,OAAOc,GAAY5P,EAAM+O,WAAa,EAAK,OAAO,EAO5D,IADArW,EAAMsH,EAAMqP,OAAOO,GAAY5P,EAAMkQ,OAAON,KACjC5P,EAAMsP,OAAOM,GAAa,OAAO,EAG5C,GAAW,OADXvZ,EAAK2J,EAAMvH,IAAIP,WAAWQ,OACO,KAAPrC,GAA6B,KAAPA,EAAsB,OAAO,EAE7E,KAAOqC,EAAMsH,EAAMsP,OAAOM,IAAW,CAGnC,GAAW,OAFXvZ,EAAK2J,EAAMvH,IAAIP,WAAWQ,KAEO,KAAPrC,GAA6B,KAAPA,IAAuBwC,EAAQxC,GAAO,OAAO,EAE7FqC,IAOF,IAFAmX,GAFAF,EAAWP,EAAQpP,EAAOwO,EAAY,IAEnBrH,MAAM,KACzB4I,EAAS,GACJtT,EAAI,EAAGA,EAAIoT,EAAQpU,OAAQgB,IAAK,CAEnC,KADA4Q,EAAIwC,EAAQpT,GAAGtD,QACP,CAGN,GAAU,IAANsD,GAAWA,IAAMoT,EAAQpU,OAAS,EACpC,SAEA,OAAO,EAIX,IAAK,WAAWtD,KAAKkV,GAAM,OAAO,EACC,KAA/BA,EAAEnV,WAAWmV,EAAE5R,OAAS,GAC1BsU,EAAOhU,KAAyB,KAApBsR,EAAEnV,WAAW,GAAqB,SAAW,SAC5B,KAApBmV,EAAEnV,WAAW,GACtB6X,EAAOhU,KAAK,QAEZgU,EAAOhU,KAAK,IAKhB,IAA+B,KAD/B4T,EAAWP,EAAQpP,EAAOwO,GAAWrV,QACxBzB,QAAQ,KAAe,OAAO,EAC3C,GAAIsI,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAM7D,IADAe,GAJAD,EAAUN,EAAaI,EAAShY,QAAQ,WAAY,MAI9B8D,QACJsU,EAAOtU,OAAU,OAAO,EAE1C,GAAImF,EAAU,OAAO,EAWrB,KATAP,EAAYL,EAAMjE,KAAK,aAAc,QAAS,IACxCyC,IAAMwR,EAAa,CAAExB,EAAW,IAEtCnO,EAAYL,EAAMjE,KAAK,aAAc,QAAS,IACxCyC,IAAM,CAAEgQ,EAAWA,EAAY,IAErCnO,EAAYL,EAAMjE,KAAK,UAAW,KAAM,IAClCyC,IAAM,CAAEgQ,EAAWA,EAAY,GAEhC/R,EAAI,EAAGA,EAAIoT,EAAQpU,OAAQgB,KAC9B4D,EAAiBL,EAAMjE,KAAK,UAAW,KAAM,IACvCyC,IAAW,CAAEgQ,EAAWA,EAAY,GACtCuB,EAAOtT,KACT4D,EAAM9B,MAAS,CAAE,CAAE,QAAS,cAAgBwR,EAAOtT,OAGrD4D,EAAiBL,EAAMjE,KAAK,SAAU,GAAI,IACpC7B,QAAW2V,EAAQpT,GAAGtD,OAC5BkH,EAAM7B,IAAW,CAAEgQ,EAAWA,EAAY,GAC1CnO,EAAM3B,SAAW,GAEjB2B,EAAiBL,EAAMjE,KAAK,WAAY,MAAO,GASjD,IANAsE,EAAYL,EAAMjE,KAAK,WAAY,MAAO,GAC1CsE,EAAYL,EAAMjE,KAAK,cAAe,SAAU,IAEhDsE,EAAYL,EAAMjE,KAAK,aAAc,QAAS,IACxCyC,IAAMyR,EAAa,CAAEzB,EAAY,EAAG,GAErCoB,EAAWpB,EAAY,EAAGoB,EAAWnB,KACpCzO,EAAM8O,OAAOc,GAAY5P,EAAM+O,aAGJ,KAD/BY,EAAWP,EAAQpP,EAAO4P,GAAUzW,QACvBzB,QAAQ,QACjBsI,EAAM8O,OAAOc,GAAY5P,EAAM+O,WAAa,GALCa,IAAY,CAS7D,IAHAC,EAAUN,EAAaI,EAAShY,QAAQ,WAAY,KAEpD0I,EAAQL,EAAMjE,KAAK,UAAW,KAAM,GAC/BU,EAAI,EAAGA,EAAIqT,EAAarT,IAC3B4D,EAAiBL,EAAMjE,KAAK,UAAW,KAAM,GACzCgU,EAAOtT,KACT4D,EAAM9B,MAAS,CAAE,CAAE,QAAS,cAAgBwR,EAAOtT,OAGrD4D,EAAiBL,EAAMjE,KAAK,SAAU,GAAI,IACpC7B,QAAW2V,EAAQpT,GAAKoT,EAAQpT,GAAGtD,OAAS,GAClDkH,EAAM3B,SAAW,GAEjB2B,EAAiBL,EAAMjE,KAAK,WAAY,MAAO,GAEjDsE,EAAQL,EAAMjE,KAAK,WAAY,MAAO,GAOxC,OALAsE,EAAQL,EAAMjE,KAAK,cAAe,SAAU,GAC5CsE,EAAQL,EAAMjE,KAAK,cAAe,SAAU,GAE5CiU,EAAW,GAAKC,EAAW,GAAKL,EAChC5P,EAAM0O,KAAOkB,GACN,I,iCC7LTvW,EAAO7C,QAAU,SAAcwJ,EAAOwO,EAAWC,GAC/C,IAAImB,EAAUO,EAAM9P,EAEpB,GAAIL,EAAM8O,OAAON,GAAaxO,EAAM+O,UAAY,EAAK,OAAO,EAI5D,IAFAoB,EAAOP,EAAWpB,EAAY,EAEvBoB,EAAWnB,GAChB,GAAIzO,EAAMiP,QAAQW,GAChBA,QADF,CAKA,KAAI5P,EAAM8O,OAAOc,GAAY5P,EAAM+O,WAAa,GAKhD,MAHEoB,IADAP,EAaJ,OANA5P,EAAM0O,KAAOyB,GAEb9P,EAAgBL,EAAMjE,KAAK,aAAc,OAAQ,IAC3C7B,QAAU8F,EAAMoQ,SAAS5B,EAAW2B,EAAM,EAAInQ,EAAM+O,WAAW,GACrE1O,EAAM7B,IAAU,CAAEgQ,EAAWxO,EAAM0O,OAE5B,I,iCC3BTrV,EAAO7C,QAAU,SAAewJ,EAAOwO,EAAWC,EAAS7N,GACzD,IAAIJ,EAAQtE,EAAKmU,EAAQT,EAAUU,EAAKjQ,EAAO1B,EAC3C4R,GAAgB,EAChB7X,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GAGvB,GAAIxO,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAE7D,GAAIrW,EAAM,EAAI6H,EAAO,OAAO,EAI5B,GAAe,OAFfC,EAASR,EAAMvH,IAAIP,WAAWQ,KAEW,KAAX8H,EAC5B,OAAO,EAST,GALA8P,EAAM5X,GAGNwD,GAFAxD,EAAMsH,EAAMwQ,UAAU9X,EAAK8H,IAEf8P,GAEF,EAAK,OAAO,EAKtB,GAHA3R,EAASqB,EAAMvH,IAAIzB,MAAMsZ,EAAK5X,GAC9B2X,EAASrQ,EAAMvH,IAAIzB,MAAM0B,EAAK6H,GAEf,KAAXC,GACE6P,EAAO3Y,QAAQjC,OAAOC,aAAa8K,KAAY,EACjD,OAAO,EAKX,GAAII,EAAU,OAAO,EAKrB,IAFAgP,EAAWpB,MAGToB,GACgBnB,OAMhB/V,EAAM4X,EAAMtQ,EAAMqP,OAAOO,GAAY5P,EAAMkQ,OAAON,KAClDrP,EAAMP,EAAMsP,OAAOM,KAEF5P,EAAM8O,OAAOc,GAAY5P,EAAM+O,YAOhD,GAAI/O,EAAMvH,IAAIP,WAAWQ,KAAS8H,KAE9BR,EAAM8O,OAAOc,GAAY5P,EAAM+O,WAAa,IAKhDrW,EAAMsH,EAAMwQ,UAAU9X,EAAK8H,IAGjB8P,EAAMpU,IAGhBxD,EAAMsH,EAAMyQ,WAAW/X,IAEb6H,GAAV,CAEAgQ,GAAgB,EAEhB,MAcF,OAVArU,EAAM8D,EAAM8O,OAAON,GAEnBxO,EAAM0O,KAAOkB,GAAYW,EAAgB,EAAI,IAE7ClQ,EAAgBL,EAAMjE,KAAK,QAAS,OAAQ,IACtC6C,KAAUyR,EAChBhQ,EAAMnG,QAAU8F,EAAMoQ,SAAS5B,EAAY,EAAGoB,EAAU1T,GAAK,GAC7DmE,EAAM1B,OAAUA,EAChB0B,EAAM7B,IAAU,CAAEgQ,EAAWxO,EAAM0O,OAE5B,I,iCC5FT,IAAI7V,EAAU,EAAQ,KAAmBA,QAGzCQ,EAAO7C,QAAU,SAAoBwJ,EAAOwO,EAAWC,EAAS7N,GAC9D,IAAI8P,EACAra,EACAoG,EACAkU,EACA7L,EACA8L,EACApH,EACAoG,EACAiB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAjR,EACAkR,EACAC,EAAaxR,EAAMmP,QACnBzW,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GAGvB,GAAIxO,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAG7D,GAAoC,KAAhC/O,EAAMvH,IAAIP,WAAWQ,KAA0B,OAAO,EAI1D,GAAIkI,EAAU,OAAO,EAqCrB,IAlCA+P,EAAUE,EAAS7Q,EAAM8O,OAAON,GAAa9V,GAAOsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,IAGzD,KAA9BxO,EAAMvH,IAAIP,WAAWQ,IAGvBA,IACAiY,IACAE,IACAH,GAAY,EACZU,GAAmB,GACoB,IAA9BpR,EAAMvH,IAAIP,WAAWQ,IAC9B0Y,GAAmB,GAEdpR,EAAMyR,QAAQjD,GAAaqC,GAAU,GAAM,GAG9CnY,IACAiY,IACAE,IACAH,GAAY,GAKZA,GAAY,GAGdU,GAAmB,EAGrBN,EAAY,CAAE9Q,EAAMqP,OAAOb,IAC3BxO,EAAMqP,OAAOb,GAAa9V,EAEnBA,EAAM6H,IACXlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,GAEtBG,EAAQxC,KACC,IAAPA,EACFwa,GAAU,GAAKA,EAAS7Q,EAAMyR,QAAQjD,IAAckC,EAAY,EAAI,IAAM,EAE1EG,IAMJnY,IAsCF,IAnCAqY,EAAa,CAAE/Q,EAAMyR,QAAQjD,IAC7BxO,EAAMyR,QAAQjD,GAAaxO,EAAM8O,OAAON,GAAa,GAAK4C,EAAmB,EAAI,GAEjFR,EAAgBlY,GAAO6H,EAEvB2Q,EAAY,CAAElR,EAAM8O,OAAON,IAC3BxO,EAAM8O,OAAON,GAAaqC,EAASF,EAEnCQ,EAAY,CAAEnR,EAAMkQ,OAAO1B,IAC3BxO,EAAMkQ,OAAO1B,GAAa9V,EAAMsH,EAAMqP,OAAOb,GAE7C8C,EAAkBtR,EAAMqJ,GAAGvK,MAAM6E,MAAMzF,SAAS,cAEhD+S,EAAgBjR,EAAM0R,WACtB1R,EAAM0R,WAAa,aACnBH,GAAe,EAoBV3B,EAAWpB,EAAY,EAAGoB,EAAWnB,IASpCzO,EAAM8O,OAAOc,GAAY5P,EAAM+O,YAAWwC,GAAe,MAE7D7Y,EAAMsH,EAAMqP,OAAOO,GAAY5P,EAAMkQ,OAAON,MAC5CrP,EAAMP,EAAMsP,OAAOM,MAZ8BA,IAmBjD,GAAoC,KAAhC5P,EAAMvH,IAAIP,WAAWQ,MAA2B6Y,EAApD,CAoEA,GAAIX,EAAiB,MAIrB,IADAS,GAAY,EACP5U,EAAI,EAAGqI,EAAIwM,EAAgB7V,OAAQgB,EAAIqI,EAAGrI,IAC7C,GAAI6U,EAAgB7U,GAAGuD,EAAO4P,EAAUnB,GAAS,GAAO,CACtD4C,GAAY,EACZ,MAIJ,GAAIA,EAAW,CAKbrR,EAAMmP,QAAUS,EAEQ,IAApB5P,EAAM+O,YAIR+B,EAAU/U,KAAKiE,EAAMqP,OAAOO,IAC5BmB,EAAWhV,KAAKiE,EAAMyR,QAAQ7B,IAC9BuB,EAAUpV,KAAKiE,EAAMkQ,OAAON,IAC5BsB,EAAUnV,KAAKiE,EAAM8O,OAAOc,IAC5B5P,EAAM8O,OAAOc,IAAa5P,EAAM+O,WAGlC,MAGF+B,EAAU/U,KAAKiE,EAAMqP,OAAOO,IAC5BmB,EAAWhV,KAAKiE,EAAMyR,QAAQ7B,IAC9BuB,EAAUpV,KAAKiE,EAAMkQ,OAAON,IAC5BsB,EAAUnV,KAAKiE,EAAM8O,OAAOc,IAI5B5P,EAAM8O,OAAOc,IAAa,MA3G1B,CAsCE,IAlCAe,EAAUE,EAAS7Q,EAAM8O,OAAOc,GAAYlX,GAAOsH,EAAMqP,OAAOO,GAAY5P,EAAMkQ,OAAON,IAGvD,KAA9B5P,EAAMvH,IAAIP,WAAWQ,IAGvBA,IACAiY,IACAE,IACAH,GAAY,EACZU,GAAmB,GACoB,IAA9BpR,EAAMvH,IAAIP,WAAWQ,IAC9B0Y,GAAmB,GAEdpR,EAAMyR,QAAQ7B,GAAYiB,GAAU,GAAM,GAG7CnY,IACAiY,IACAE,IACAH,GAAY,GAKZA,GAAY,GAGdU,GAAmB,EAGrBN,EAAU/U,KAAKiE,EAAMqP,OAAOO,IAC5B5P,EAAMqP,OAAOO,GAAYlX,EAElBA,EAAM6H,IACXlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,GAEtBG,EAAQxC,KACC,IAAPA,EACFwa,GAAU,GAAKA,EAAS7Q,EAAMyR,QAAQ7B,IAAac,EAAY,EAAI,IAAM,EAEzEG,IAMJnY,IAGFkY,EAAgBlY,GAAO6H,EAEvBwQ,EAAWhV,KAAKiE,EAAMyR,QAAQ7B,IAC9B5P,EAAMyR,QAAQ7B,GAAY5P,EAAM8O,OAAOc,GAAY,GAAKwB,EAAmB,EAAI,GAE/EF,EAAUnV,KAAKiE,EAAM8O,OAAOc,IAC5B5P,EAAM8O,OAAOc,GAAYiB,EAASF,EAElCQ,EAAUpV,KAAKiE,EAAMkQ,OAAON,IAC5B5P,EAAMkQ,OAAON,GAAYlX,EAAMsH,EAAMqP,OAAOO,GAiEhD,IAlBAoB,EAAYhR,EAAM+O,UAClB/O,EAAM+O,UAAY,GAElB1O,EAAeL,EAAMjE,KAAK,kBAAmB,aAAc,IACrD4C,OAAS,IACf0B,EAAM7B,IAASgL,EAAQ,CAAEgF,EAAW,GAEpCxO,EAAMqJ,GAAGvK,MAAM6B,SAASX,EAAOwO,EAAWoB,IAE1CvP,EAAeL,EAAMjE,KAAK,mBAAoB,cAAe,IACvD4C,OAAS,IAEfqB,EAAMmP,QAAUqC,EAChBxR,EAAM0R,WAAaT,EACnBzH,EAAM,GAAKxJ,EAAM0O,KAIZjS,EAAI,EAAGA,EAAI0U,EAAU1V,OAAQgB,IAChCuD,EAAMqP,OAAO5S,EAAI+R,GAAasC,EAAUrU,GACxCuD,EAAMkQ,OAAOzT,EAAI+R,GAAa2C,EAAU1U,GACxCuD,EAAM8O,OAAOrS,EAAI+R,GAAa0C,EAAUzU,GACxCuD,EAAMyR,QAAQhV,EAAI+R,GAAauC,EAAWtU,GAI5C,OAFAuD,EAAM+O,UAAYiC,GAEX,I,iCCvRT,IAAInY,EAAU,EAAQ,KAAmBA,QAGzCQ,EAAO7C,QAAU,SAAYwJ,EAAOwO,EAAWC,EAAS7N,GACtD,IAAIJ,EAAQmR,EAAKtb,EAAIgK,EACjB3H,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GAGvB,GAAIxO,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAK7D,GAAe,MAHfvO,EAASR,EAAMvH,IAAIP,WAAWQ,OAIf,KAAX8H,GACW,KAAXA,EACF,OAAO,EAMT,IADAmR,EAAM,EACCjZ,EAAM6H,GAAK,CAEhB,IADAlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,QACf8H,IAAW3H,EAAQxC,GAAO,OAAO,EACxCA,IAAOmK,GAAUmR,IAGvB,QAAIA,EAAM,KAEN/Q,IAEJZ,EAAM0O,KAAOF,EAAY,GAEzBnO,EAAeL,EAAMjE,KAAK,KAAM,KAAM,IAChCyC,IAAS,CAAEgQ,EAAWxO,EAAM0O,MAClCrO,EAAM1B,OAAS5H,MAAM4a,EAAM,GAAGvJ,KAAK3S,OAAOC,aAAa8K,MANlC,K,iCC/BvB,IAAI3H,EAAU,EAAQ,KAAmBA,QAKzC,SAAS+Y,EAAqB5R,EAAOwO,GACnC,IAAIhO,EAAQ9H,EAAK6H,EAAKlK,EAOtB,OALAqC,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GAIJ,MAFfhO,EAASR,EAAMvH,IAAIP,WAAWQ,OAGf,KAAX8H,GACW,KAAXA,GAIA9H,EAAM6H,IACRlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,IAErBG,EAAQxC,KANL,EAYHqC,EAKT,SAASmZ,EAAsB7R,EAAOwO,GACpC,IAAInY,EACAyK,EAAQd,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC/C9V,EAAMoI,EACNP,EAAMP,EAAMsP,OAAOd,GAGvB,GAAI9V,EAAM,GAAK6H,EAAO,OAAQ,EAI9B,IAFAlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,MAEjB,IAAerC,EAAK,GAAe,OAAQ,EAEpD,OAAS,CAEP,GAAIqC,GAAO6H,EAAO,OAAQ,EAI1B,MAFAlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,OAEhB,IAAerC,GAAM,IAA/B,CAUA,GAAW,KAAPA,GAA6B,KAAPA,EACxB,MAGF,OAAQ,EAVN,GAAIqC,EAAMoI,GAAS,GAAM,OAAQ,EAcrC,OAAIpI,EAAM6H,IACRlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,IAErBG,EAAQxC,KAEH,EAGLqC,EAiBTW,EAAO7C,QAAU,SAAcwJ,EAAOwO,EAAWC,EAAS7N,GACxD,IAAIvK,EACAyb,EACArV,EACAsV,EACAC,EACArB,EACAsB,EACAC,EACApN,EACAqN,EACAC,EACAC,EACAC,EACA/R,EACAqP,EACAiB,EACA0B,EACAtB,EACAC,EACAC,EACAqB,EACA9Z,EACA+Z,EACAC,EACA5R,EACAuQ,EACAC,EACAjR,EACAsS,GAAyB,EACzB3D,GAAQ,EAGZ,GAAIhP,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAQ7D,GAAI/O,EAAM4S,YAAc,GACpB5S,EAAM8O,OAAON,GAAaxO,EAAM4S,YAAc,GAC9C5S,EAAM8O,OAAON,GAAaxO,EAAM+O,UAClC,OAAO,EAiBT,GAZInO,GAA+B,cAArBZ,EAAM0R,YAMd1R,EAAMkQ,OAAO1B,IAAcxO,EAAM+O,YACnC4D,GAAyB,IAKxBF,EAAiBZ,EAAsB7R,EAAOwO,KAAe,GAOhE,GANAyD,GAAY,EACZnR,EAAQd,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC/C8D,EAAcO,OAAO7S,EAAMvH,IAAIuC,OAAO8F,EAAO2R,EAAiB3R,EAAQ,IAIlE6R,GAA0C,IAAhBL,EAAmB,OAAO,MAEnD,OAAKG,EAAiBb,EAAqB5R,EAAOwO,KAAe,GAItE,OAAO,EAHPyD,GAAY,EAQd,GAAIU,GACE3S,EAAMyQ,WAAWgC,IAAmBzS,EAAMsP,OAAOd,GAAY,OAAO,EAO1E,GAHA6D,EAAiBrS,EAAMvH,IAAIP,WAAWua,EAAiB,GAGnD7R,EAAU,OAAO,EA6BrB,IA1BAwR,EAAapS,EAAMU,OAAOjF,OAEtBwW,GACF5R,EAAcL,EAAMjE,KAAK,oBAAqB,KAAM,GAChC,IAAhBuW,IACFjS,EAAM9B,MAAQ,CAAE,CAAE,QAAS+T,MAI7BjS,EAAcL,EAAMjE,KAAK,mBAAoB,KAAM,GAGrDsE,EAAM7B,IAAS2T,EAAY,CAAE3D,EAAW,GACxCnO,EAAM1B,OAASlJ,OAAOC,aAAa2c,GAMnCzC,EAAWpB,EACXkE,GAAe,EACfpB,EAAkBtR,EAAMqJ,GAAGvK,MAAM6E,MAAMzF,SAAS,QAEhD+S,EAAgBjR,EAAM0R,WACtB1R,EAAM0R,WAAa,OAEZ9B,EAAWnB,GAAS,CAMzB,IALA/V,EAAM+Z,EACNlS,EAAMP,EAAMsP,OAAOM,GAEnBe,EAAUE,EAAS7Q,EAAM8O,OAAOc,GAAY6C,GAAkBzS,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,IAE9F9V,EAAM6H,GAAK,CAGhB,GAAW,KAFXlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,IAGxBmY,GAAU,GAAKA,EAAS7Q,EAAMyR,QAAQ7B,IAAa,MAC9C,IAAW,KAAPvZ,EAGT,MAFAwa,IAKFnY,IA4EF,IArEEsZ,GAJFF,EAAepZ,IAEK6H,EAEE,EAEAsQ,EAASF,GAKP,IAAKqB,EAAoB,GAIjDD,EAASpB,EAAUqB,GAGnB3R,EAAeL,EAAMjE,KAAK,iBAAkB,KAAM,IAC5C4C,OAASlJ,OAAOC,aAAa2c,GACnChS,EAAM7B,IAAS0T,EAAY,CAAE1D,EAAW,GAGxCgE,EAAWxS,EAAMgP,MACjBmC,EAAYnR,EAAMkQ,OAAO1B,GACzB0C,EAAYlR,EAAM8O,OAAON,GAMzB+D,EAAgBvS,EAAM4S,WACtB5S,EAAM4S,WAAa5S,EAAM+O,UACzB/O,EAAM+O,UAAYgD,EAElB/R,EAAMgP,OAAQ,EACdhP,EAAMkQ,OAAO1B,GAAasD,EAAe9R,EAAMqP,OAAOb,GACtDxO,EAAM8O,OAAON,GAAaqC,EAEtBiB,GAAgBvR,GAAOP,EAAMiP,QAAQT,EAAY,GAQnDxO,EAAM0O,KAAOoE,KAAKC,IAAI/S,EAAM0O,KAAO,EAAGD,GAEtCzO,EAAMqJ,GAAGvK,MAAM6B,SAASX,EAAOwO,EAAWC,GAAS,GAIhDzO,EAAMgP,QAAS0D,IAClB1D,GAAQ,GAIV0D,EAAgB1S,EAAM0O,KAAOF,EAAa,GAAKxO,EAAMiP,QAAQjP,EAAM0O,KAAO,GAE1E1O,EAAM+O,UAAY/O,EAAM4S,WACxB5S,EAAM4S,WAAaL,EACnBvS,EAAMkQ,OAAO1B,GAAa2C,EAC1BnR,EAAM8O,OAAON,GAAa0C,EAC1BlR,EAAMgP,MAAQwD,GAEdnS,EAAeL,EAAMjE,KAAK,kBAAmB,MAAO,IAC9C4C,OAASlJ,OAAOC,aAAa2c,GAEnCzC,EAAWpB,EAAYxO,EAAM0O,KAC7BwD,EAAU,GAAKtC,EACfkC,EAAe9R,EAAMqP,OAAOb,GAExBoB,GAAYnB,EAAW,MAK3B,GAAIzO,EAAM8O,OAAOc,GAAY5P,EAAM+O,UAAa,MAGhD,GAAI/O,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,MAItD,IADAsC,GAAY,EACP5U,EAAI,EAAGqI,EAAIwM,EAAgB7V,OAAQgB,EAAIqI,EAAGrI,IAC7C,GAAI6U,EAAgB7U,GAAGuD,EAAO4P,EAAUnB,GAAS,GAAO,CACtD4C,GAAY,EACZ,MAGJ,GAAIA,EAAa,MAGjB,GAAIY,GAEF,IADAQ,EAAiBZ,EAAsB7R,EAAO4P,IACzB,EAAK,WAG1B,IADA6C,EAAiBb,EAAqB5R,EAAO4P,IACxB,EAAK,MAG5B,GAAIyC,IAAmBrS,EAAMvH,IAAIP,WAAWua,EAAiB,GAAM,MAqBrE,OAhBEpS,EADE4R,EACMjS,EAAMjE,KAAK,qBAAsB,MAAO,GAExCiE,EAAMjE,KAAK,oBAAqB,MAAO,IAE3C4C,OAASlJ,OAAOC,aAAa2c,GAEnCF,EAAU,GAAKvC,EACf5P,EAAM0O,KAAOkB,EAEb5P,EAAM0R,WAAaT,EAGfjC,GA7QN,SAA6BhP,EAAOjC,GAClC,IAAItB,EAAGqI,EACHrG,EAAQuB,EAAMvB,MAAQ,EAE1B,IAAKhC,EAAIsB,EAAM,EAAG+G,EAAI9E,EAAMU,OAAOjF,OAAS,EAAGgB,EAAIqI,EAAGrI,IAChDuD,EAAMU,OAAOjE,GAAGgC,QAAUA,GAAkC,mBAAzBuB,EAAMU,OAAOjE,GAAG4B,OACrD2B,EAAMU,OAAOjE,EAAI,GAAGsC,QAAS,EAC7BiB,EAAMU,OAAOjE,GAAGsC,QAAS,EACzBtC,GAAK,GAsQPuW,CAAoBhT,EAAOoS,IAGtB,I,iCCnWT,IAAIlZ,EAAuB,EAAQ,KAAmBA,mBAClDL,EAAuB,EAAQ,KAAmBA,QAGtDQ,EAAO7C,QAAU,SAAmBwJ,EAAOwO,EAAWyE,EAAUrS,GAC9D,IAAIvK,EACA6c,EACAC,EACA1E,EACA2E,EACA3W,EACAqI,EACAuO,EACAnK,EACA+H,EACAqC,EACAxS,EACArJ,EACA4Z,EACAC,EACAiC,EACA/J,EAAQ,EACR9Q,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GACnBoB,EAAWpB,EAAY,EAG3B,GAAIxO,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAE7D,GAAkC,KAA9B/O,EAAMvH,IAAIP,WAAWQ,GAAwB,OAAO,EAIxD,OAASA,EAAM6H,GACb,GAAkC,KAA9BP,EAAMvH,IAAIP,WAAWQ,IACa,KAAlCsH,EAAMvH,IAAIP,WAAWQ,EAAM,GAAoB,CACjD,GAAIA,EAAM,IAAM6H,EAAO,OAAO,EAC9B,GAAsC,KAAlCP,EAAMvH,IAAIP,WAAWQ,EAAM,GAAsB,OAAO,EAC5D,MAYJ,IARA+V,EAAUzO,EAAMmP,QAGhBmC,EAAkBtR,EAAMqJ,GAAGvK,MAAM6E,MAAMzF,SAAS,aAEhD+S,EAAgBjR,EAAM0R,WACtB1R,EAAM0R,WAAa,YAEZ9B,EAAWnB,IAAYzO,EAAMiP,QAAQW,GAAWA,IAGrD,KAAI5P,EAAM8O,OAAOc,GAAY5P,EAAM+O,UAAY,GAG3C/O,EAAM8O,OAAOc,GAAY,GAA7B,CAIA,IADAyB,GAAY,EACP5U,EAAI,EAAGqI,EAAIwM,EAAgB7V,OAAQgB,EAAIqI,EAAGrI,IAC7C,GAAI6U,EAAgB7U,GAAGuD,EAAO4P,EAAUnB,GAAS,GAAO,CACtD4C,GAAY,EACZ,MAGJ,GAAIA,EAAa,MAMnB,IAFA9Q,GADA9I,EAAMuI,EAAMoQ,SAAS5B,EAAWoB,EAAU5P,EAAM+O,WAAW,GAAO5V,QACxDsC,OAEL/C,EAAM,EAAGA,EAAM6H,EAAK7H,IAAO,CAE9B,GAAW,MADXrC,EAAKoB,EAAIS,WAAWQ,IAElB,OAAO,EACF,GAAW,KAAPrC,EAAqB,CAC9B6S,EAAWxQ,EACX,OACgB,KAAPrC,GAEO,KAAPA,KACTqC,EACU6H,GAA+B,KAAxB9I,EAAIS,WAAWQ,KAHhC8Q,IASJ,GAAIN,EAAW,GAAsC,KAAjCzR,EAAIS,WAAWgR,EAAW,GAAsB,OAAO,EAI3E,IAAKxQ,EAAMwQ,EAAW,EAAGxQ,EAAM6H,EAAK7H,IAElC,GAAW,MADXrC,EAAKoB,EAAIS,WAAWQ,IAElB8Q,SACK,IAAI3Q,EAAQxC,GAGjB,MAOJ,KADAid,EAAMtT,EAAMqJ,GAAG5H,QAAQoH,qBAAqBpR,EAAKiB,EAAK6H,IAC7CgJ,GAAM,OAAO,EAGtB,GADA6J,EAAOpT,EAAMqJ,GAAG7G,cAAc8Q,EAAI7b,MAC7BuI,EAAMqJ,GAAGhH,aAAa+Q,GAAS,OAAO,EAY3C,IANAF,EAJAxa,EAAM4a,EAAI5a,IAKVya,EAJA3J,GAAS8J,EAAI9J,MAQb1I,EAAQpI,EACDA,EAAM6H,EAAK7H,IAEhB,GAAW,MADXrC,EAAKoB,EAAIS,WAAWQ,IAElB8Q,SACK,IAAI3Q,EAAQxC,GAGjB,MAkBJ,IAZAid,EAAMtT,EAAMqJ,GAAG5H,QAAQqH,eAAerR,EAAKiB,EAAK6H,GAC5C7H,EAAM6H,GAAOO,IAAUpI,GAAO4a,EAAI/J,IACpCgK,EAAQD,EAAI7b,IACZiB,EAAM4a,EAAI5a,IACV8Q,GAAS8J,EAAI9J,QAEb+J,EAAQ,GACR7a,EAAMwa,EACN1J,EAAQ2J,GAIHza,EAAM6H,IACXlK,EAAKoB,EAAIS,WAAWQ,GACfG,EAAQxC,KACbqC,IAGF,GAAIA,EAAM6H,GAA+B,KAAxB9I,EAAIS,WAAWQ,IAC1B6a,EAMF,IAHAA,EAAQ,GACR7a,EAAMwa,EACN1J,EAAQ2J,EACDza,EAAM6H,IACXlK,EAAKoB,EAAIS,WAAWQ,GACfG,EAAQxC,KACbqC,IAKN,QAAIA,EAAM6H,GAA+B,KAAxB9I,EAAIS,WAAWQ,SAKhC2a,EAAQna,EAAmBzB,EAAIT,MAAM,EAAGkS,OAQpCtI,SAEgC,IAAzBZ,EAAMoE,IAAIoP,aACnBxT,EAAMoE,IAAIoP,WAAa,SAEkB,IAAhCxT,EAAMoE,IAAIoP,WAAWH,KAC9BrT,EAAMoE,IAAIoP,WAAWH,GAAS,CAAEE,MAAOA,EAAOH,KAAMA,IAGtDpT,EAAM0R,WAAaT,EAEnBjR,EAAM0O,KAAOF,EAAYhF,EAAQ,IAXZ,M,iCCpLvB,IAAI3Q,EAAU,EAAQ,KAAmBA,QAGzCQ,EAAO7C,QAAU,SAAiBwJ,EAAOwO,EAAWC,EAAS7N,GAC3D,IAAIvK,EAAIoI,EAAOgV,EAAKpT,EAChB3H,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GAGvB,GAAIxO,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAI7D,GAAW,MAFX1Y,EAAM2J,EAAMvH,IAAIP,WAAWQ,KAEDA,GAAO6H,EAAO,OAAO,EAK/C,IAFA9B,EAAQ,EACRpI,EAAK2J,EAAMvH,IAAIP,aAAaQ,GACd,KAAPrC,GAAsBqC,EAAM6H,GAAO9B,GAAS,GACjDA,IACApI,EAAK2J,EAAMvH,IAAIP,aAAaQ,GAG9B,QAAI+F,EAAQ,GAAM/F,EAAM6H,IAAQ1H,EAAQxC,MAEpCuK,IAIJL,EAAMP,EAAM0T,eAAenT,EAAK7H,IAChC+a,EAAMzT,EAAM2T,cAAcpT,EAAK,GAAM7H,IAC3BA,GAAOG,EAAQmH,EAAMvH,IAAIP,WAAWub,EAAM,MAClDlT,EAAMkT,GAGRzT,EAAM0O,KAAOF,EAAY,GAEzBnO,EAAeL,EAAMjE,KAAK,eAAgB,IAAMtG,OAAOgJ,GAAQ,IACzDE,OAAS,WAAW3H,MAAM,EAAGyH,GACnC4B,EAAM7B,IAAS,CAAEgQ,EAAWxO,EAAM0O,OAElCrO,EAAiBL,EAAMjE,KAAK,SAAU,GAAI,IACpC7B,QAAW8F,EAAMvH,IAAIzB,MAAM0B,EAAK6H,GAAKpH,OAC3CkH,EAAM7B,IAAW,CAAEgQ,EAAWxO,EAAM0O,MACpCrO,EAAM3B,SAAW,IAEjB2B,EAAeL,EAAMjE,KAAK,gBAAiB,IAAMtG,OAAOgJ,IAAS,IAC3DE,OAAS,WAAW3H,MAAM,EAAGyH,KAtBd,K,iCCxBvBpF,EAAO7C,QAAU,SAAkBwJ,EAAOwO,EAAWC,GACnD,IAAIvU,EAASmX,EAAW5U,EAAGqI,EAAGzE,EAAO3H,EAAK6H,EAAK9B,EAAO+B,EACxByQ,EAA1BrB,EAAWpB,EAAY,EACvB8C,EAAkBtR,EAAMqJ,GAAGvK,MAAM6E,MAAMzF,SAAS,aAGpD,GAAI8B,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAM7D,IAJAkC,EAAgBjR,EAAM0R,WACtB1R,EAAM0R,WAAa,YAGZ9B,EAAWnB,IAAYzO,EAAMiP,QAAQW,GAAWA,IAGrD,KAAI5P,EAAM8O,OAAOc,GAAY5P,EAAM+O,UAAY,GAA/C,CAKA,GAAI/O,EAAM8O,OAAOc,IAAa5P,EAAM+O,YAClCrW,EAAMsH,EAAMqP,OAAOO,GAAY5P,EAAMkQ,OAAON,KAC5CrP,EAAMP,EAAMsP,OAAOM,MAKF,MAFfpP,EAASR,EAAMvH,IAAIP,WAAWQ,KAEW,KAAX8H,KAC5B9H,EAAMsH,EAAMwQ,UAAU9X,EAAK8H,IAC3B9H,EAAMsH,EAAMyQ,WAAW/X,KAEZ6H,GAAK,CACd9B,EAAoB,KAAX+B,EAAyB,EAAI,EACtC,MAOR,KAAIR,EAAM8O,OAAOc,GAAY,GAA7B,CAIA,IADAyB,GAAY,EACP5U,EAAI,EAAGqI,EAAIwM,EAAgB7V,OAAQgB,EAAIqI,EAAGrI,IAC7C,GAAI6U,EAAgB7U,GAAGuD,EAAO4P,EAAUnB,GAAS,GAAO,CACtD4C,GAAY,EACZ,MAGJ,GAAIA,EAAa,OAGnB,QAAK5S,IAKLvE,EAAU8F,EAAMoQ,SAAS5B,EAAWoB,EAAU5P,EAAM+O,WAAW,GAAO5V,OAEtE6G,EAAM0O,KAAOkB,EAAW,GAExBvP,EAAiBL,EAAMjE,KAAK,eAAgB,IAAMtG,OAAOgJ,GAAQ,IAC3DE,OAAWlJ,OAAOC,aAAa8K,GACrCH,EAAM7B,IAAW,CAAEgQ,EAAWxO,EAAM0O,OAEpCrO,EAAiBL,EAAMjE,KAAK,SAAU,GAAI,IACpC7B,QAAWA,EACjBmG,EAAM7B,IAAW,CAAEgQ,EAAWxO,EAAM0O,KAAO,GAC3CrO,EAAM3B,SAAW,IAEjB2B,EAAiBL,EAAMjE,KAAK,gBAAiB,IAAMtG,OAAOgJ,IAAS,IAC7DE,OAAWlJ,OAAOC,aAAa8K,GAErCR,EAAM0R,WAAaT,GAEZ,K,iCC5ET,IAAI2C,EAAc,EAAQ,KACtB9T,EAAyB,EAAQ,KAAqBA,uBAKtD+T,EAAiB,CACnB,CAAE,oCAAqC,2BAA2B,GAClE,CAAE,QAAgB,OAAS,GAC3B,CAAE,OAAgB,OAAS,GAC3B,CAAE,WAAgB,KAAS,GAC3B,CAAE,eAAgB,SAAS,GAC3B,CAAE,IAAIhe,OAAO,QAAU+d,EAAYxL,KAAK,KAAO,mBAAoB,KAAM,MAAM,GAC/E,CAAE,IAAIvS,OAAOiK,EAAuBhK,OAAS,SAAW,MAAM,IAIhEuD,EAAO7C,QAAU,SAAoBwJ,EAAOwO,EAAWC,EAAS7N,GAC9D,IAAInE,EAAGmT,EAAUvP,EAAOsP,EACpBjX,EAAMsH,EAAMqP,OAAOb,GAAaxO,EAAMkQ,OAAO1B,GAC7CjO,EAAMP,EAAMsP,OAAOd,GAGvB,GAAIxO,EAAM8O,OAAON,GAAaxO,EAAM+O,WAAa,EAAK,OAAO,EAE7D,IAAK/O,EAAMqJ,GAAG7P,QAAQK,KAAQ,OAAO,EAErC,GAAkC,KAA9BmG,EAAMvH,IAAIP,WAAWQ,GAAwB,OAAO,EAIxD,IAFAiX,EAAW3P,EAAMvH,IAAIzB,MAAM0B,EAAK6H,GAE3B9D,EAAI,EAAGA,EAAIoX,EAAepY,SACzBoY,EAAepX,GAAG,GAAGtE,KAAKwX,GADOlT,KAIvC,GAAIA,IAAMoX,EAAepY,OAAU,OAAO,EAE1C,GAAImF,EAEF,OAAOiT,EAAepX,GAAG,GAO3B,GAJAmT,EAAWpB,EAAY,GAIlBqF,EAAepX,GAAG,GAAGtE,KAAKwX,GAC7B,KAAOC,EAAWnB,KACZzO,EAAM8O,OAAOc,GAAY5P,EAAM+O,WADVa,IAOzB,GAJAlX,EAAMsH,EAAMqP,OAAOO,GAAY5P,EAAMkQ,OAAON,GAC5CrP,EAAMP,EAAMsP,OAAOM,GACnBD,EAAW3P,EAAMvH,IAAIzB,MAAM0B,EAAK6H,GAE5BsT,EAAepX,GAAG,GAAGtE,KAAKwX,GAAW,CACf,IAApBA,EAASlU,QAAgBmU,IAC7B,MAWN,OANA5P,EAAM0O,KAAOkB,GAEbvP,EAAgBL,EAAMjE,KAAK,aAAc,GAAI,IACvCyC,IAAU,CAAEgQ,EAAWoB,GAC7BvP,EAAMnG,QAAU8F,EAAMoQ,SAAS5B,EAAWoB,EAAU5P,EAAM+O,WAAW,IAE9D,I,iCClET1V,EAAO7C,QAAU,CACf,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,OACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,UACA,SACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,O,iCChEF6C,EAAO7C,QAAU,SAAmBwJ,EAAOwO,GACzC,IAAItU,EAASmX,EAAW5U,EAAGqI,EAAGzE,EAAO4Q,EACjCrB,EAAWpB,EAAY,EACvB8C,EAAkBtR,EAAMqJ,GAAGvK,MAAM6E,MAAMzF,SAAS,aAChDuQ,EAAUzO,EAAMmP,QAMpB,IAJA8B,EAAgBjR,EAAM0R,WACtB1R,EAAM0R,WAAa,YAGZ9B,EAAWnB,IAAYzO,EAAMiP,QAAQW,GAAWA,IAGrD,KAAI5P,EAAM8O,OAAOc,GAAY5P,EAAM+O,UAAY,GAG3C/O,EAAM8O,OAAOc,GAAY,GAA7B,CAIA,IADAyB,GAAY,EACP5U,EAAI,EAAGqI,EAAIwM,EAAgB7V,OAAQgB,EAAIqI,EAAGrI,IAC7C,GAAI6U,EAAgB7U,GAAGuD,EAAO4P,EAAUnB,GAAS,GAAO,CACtD4C,GAAY,EACZ,MAGJ,GAAIA,EAAa,MAmBnB,OAhBAnX,EAAU8F,EAAMoQ,SAAS5B,EAAWoB,EAAU5P,EAAM+O,WAAW,GAAO5V,OAEtE6G,EAAM0O,KAAOkB,GAEbvP,EAAiBL,EAAMjE,KAAK,iBAAkB,IAAK,IAC7CyC,IAAW,CAAEgQ,EAAWxO,EAAM0O,OAEpCrO,EAAiBL,EAAMjE,KAAK,SAAU,GAAI,IACpC7B,QAAWA,EACjBmG,EAAM7B,IAAW,CAAEgQ,EAAWxO,EAAM0O,MACpCrO,EAAM3B,SAAW,GAEjB2B,EAAiBL,EAAMjE,KAAK,kBAAmB,KAAM,GAErDiE,EAAM0R,WAAaT,GAEZ,I,iCC9CT,IAAI7S,EAAQ,EAAQ,KAChBvF,EAAU,EAAQ,KAAmBA,QAGzC,SAASib,EAAWrb,EAAK4Q,EAAIjF,EAAK1D,GAChC,IAAIrK,EAAI0d,EAAGjT,EAAOpI,EAAKwD,EAAK6V,EAAQlB,EAAQmD,EAuD5C,IArDA3X,KAAK5D,IAAMA,EAGX4D,KAAKgN,GAASA,EAEdhN,KAAK+H,IAAMA,EAMX/H,KAAKqE,OAASA,EAEdrE,KAAKgT,OAAS,GACdhT,KAAKiT,OAAS,GACdjT,KAAK6T,OAAS,GACd7T,KAAKyS,OAAS,GAYdzS,KAAKoV,QAAU,GAGfpV,KAAK0S,UAAa,EAElB1S,KAAKqS,KAAa,EAClBrS,KAAK8S,QAAa,EAClB9S,KAAK2S,OAAa,EAClB3S,KAAK4X,UAAc,EACnB5X,KAAKuW,YAAc,EAInBvW,KAAKqV,WAAa,OAElBrV,KAAKoC,MAAQ,EAGbpC,KAAK5C,OAAS,GAKdua,GAAe,EAEVlT,EAAQpI,EAAMqZ,EAASlB,EAAS,EAAG3U,GAHxC6X,EAAI1X,KAAK5D,KAGuCgD,OAAQ/C,EAAMwD,EAAKxD,IAAO,CAGxE,GAFArC,EAAK0d,EAAE7b,WAAWQ,IAEbsb,EAAc,CACjB,GAAInb,EAAQxC,GAAK,CACf0b,IAEW,IAAP1b,EACFwa,GAAU,EAAIA,EAAS,EAEvBA,IAEF,SAEAmD,GAAe,EAIR,KAAP3d,GAAeqC,IAAQwD,EAAM,IACpB,KAAP7F,GAAeqC,IACnB2D,KAAKgT,OAAOtT,KAAK+E,GACjBzE,KAAKiT,OAAOvT,KAAKrD,GACjB2D,KAAK6T,OAAOnU,KAAKgW,GACjB1V,KAAKyS,OAAO/S,KAAK8U,GACjBxU,KAAKoV,QAAQ1V,KAAK,GAElBiY,GAAe,EACfjC,EAAS,EACTlB,EAAS,EACT/P,EAAQpI,EAAM,GAKlB2D,KAAKgT,OAAOtT,KAAKgY,EAAEtY,QACnBY,KAAKiT,OAAOvT,KAAKgY,EAAEtY,QACnBY,KAAK6T,OAAOnU,KAAK,GACjBM,KAAKyS,OAAO/S,KAAK,GACjBM,KAAKoV,QAAQ1V,KAAK,GAElBM,KAAK8S,QAAU9S,KAAKgT,OAAO5T,OAAS,EAKtCqY,EAAWhf,UAAUiH,KAAO,SAAUsC,EAAM1E,EAAK2E,GAC/C,IAAI+B,EAAQ,IAAIjC,EAAMC,EAAM1E,EAAK2E,GAQjC,OAPA+B,EAAMvB,OAAQ,EAEVR,EAAU,GAAGjC,KAAKoC,QACtB4B,EAAM5B,MAAQpC,KAAKoC,MACfH,EAAU,GAAGjC,KAAKoC,QAEtBpC,KAAKqE,OAAO3E,KAAKsE,GACVA,GAGTyT,EAAWhf,UAAUma,QAAU,SAAiBP,GAC9C,OAAOrS,KAAKgT,OAAOX,GAAQrS,KAAK6T,OAAOxB,IAASrS,KAAKiT,OAAOZ,IAG9DoF,EAAWhf,UAAU+Z,eAAiB,SAAwBqF,GAC5D,IAAK,IAAI3T,EAAMlE,KAAK8S,QAAS+E,EAAO3T,KAC9BlE,KAAKgT,OAAO6E,GAAQ7X,KAAK6T,OAAOgE,GAAQ7X,KAAKiT,OAAO4E,IADjBA,KAKzC,OAAOA,GAITJ,EAAWhf,UAAU2b,WAAa,SAAoB/X,GAGpD,IAFA,IAAIrC,EAEKkK,EAAMlE,KAAK5D,IAAIgD,OAAQ/C,EAAM6H,IACpClK,EAAKgG,KAAK5D,IAAIP,WAAWQ,GACpBG,EAAQxC,IAF4BqC,KAI3C,OAAOA,GAITob,EAAWhf,UAAU4e,eAAiB,SAAwBhb,EAAKqa,GACjE,GAAIra,GAAOqa,EAAO,OAAOra,EAEzB,KAAOA,EAAMqa,GACX,IAAKla,EAAQwD,KAAK5D,IAAIP,aAAaQ,IAAS,OAAOA,EAAM,EAE3D,OAAOA,GAITob,EAAWhf,UAAU0b,UAAY,SAAmB9X,EAAKT,GACvD,IAAK,IAAIsI,EAAMlE,KAAK5D,IAAIgD,OAAQ/C,EAAM6H,GAChClE,KAAK5D,IAAIP,WAAWQ,KAAST,EADQS,KAG3C,OAAOA,GAITob,EAAWhf,UAAU6e,cAAgB,SAAuBjb,EAAKT,EAAM8a,GACrE,GAAIra,GAAOqa,EAAO,OAAOra,EAEzB,KAAOA,EAAMqa,GACX,GAAI9a,IAASoE,KAAK5D,IAAIP,aAAaQ,GAAQ,OAAOA,EAAM,EAE1D,OAAOA,GAITob,EAAWhf,UAAUsb,SAAW,SAAkB+D,EAAO1T,EAAKsR,EAAQqC,GACpE,IAAI3X,EAAG4X,EAAYhe,EAAIie,EAAOnE,EAAMoE,EAAOC,EACvC9F,EAAOyF,EAEX,GAAIA,GAAS1T,EACX,MAAO,GAKT,IAFA8T,EAAQ,IAAIxd,MAAM0J,EAAM0T,GAEnB1X,EAAI,EAAGiS,EAAOjO,EAAKiO,IAAQjS,IAAK,CAWnC,IAVA4X,EAAa,EACbG,EAAYF,EAAQjY,KAAKgT,OAAOX,GAI9ByB,EAFEzB,EAAO,EAAIjO,GAAO2T,EAEb/X,KAAKiT,OAAOZ,GAAQ,EAEpBrS,KAAKiT,OAAOZ,GAGd4F,EAAQnE,GAAQkE,EAAatC,GAAQ,CAG1C,GAFA1b,EAAKgG,KAAK5D,IAAIP,WAAWoc,GAErBzb,EAAQxC,GACC,IAAPA,EACFge,GAAc,GAAKA,EAAahY,KAAKoV,QAAQ/C,IAAS,EAEtD2F,QAEG,MAAIC,EAAQE,EAAYnY,KAAK6T,OAAOxB,IAIzC,MAFA2F,IAKFC,IAMAC,EAAM9X,GAHJ4X,EAAatC,EAGJ,IAAIhb,MAAMsd,EAAatC,EAAS,GAAG3J,KAAK,KAAO/L,KAAK5D,IAAIzB,MAAMsd,EAAOnE,GAErE9T,KAAK5D,IAAIzB,MAAMsd,EAAOnE,GAIrC,OAAOoE,EAAMnM,KAAK,KAIpB0L,EAAWhf,UAAUsJ,MAAQA,EAG7B/E,EAAO7C,QAAUsd,G,iCC9NjB,IAAI1X,EAAkB,EAAQ,KAM1B6O,EAAS,CACX,CAAE,OAAmB,EAAQ,MAC7B,CAAE,UAAmB,EAAQ,MAC7B,CAAE,SAAmB,EAAQ,MAC7B,CAAE,YAAmB,EAAQ,MAC7B,CAAE,gBAAmB,EAAQ,KAAgCtK,UAC7D,CAAE,WAAmB,EAAQ,KAA2BA,UACxD,CAAE,OAAmB,EAAQ,MAC7B,CAAE,QAAmB,EAAQ,MAC7B,CAAE,WAAmB,EAAQ,MAC7B,CAAE,cAAmB,EAAQ,MAC7B,CAAE,SAAmB,EAAQ,OAG3B8T,EAAU,CACZ,CAAE,gBAAmB,EAAQ,MAC7B,CAAE,gBAAmB,EAAQ,KAAgC1U,aAC7D,CAAE,WAAmB,EAAQ,KAA2BA,aACxD,CAAE,gBAAmB,EAAQ,OAO/B,SAAS8B,IACP,IAAIpF,EASJ,IAFAJ,KAAKsH,MAAQ,IAAIvH,EAEZK,EAAI,EAAGA,EAAIwO,EAAOxP,OAAQgB,IAC7BJ,KAAKsH,MAAM5H,KAAKkP,EAAOxO,GAAG,GAAIwO,EAAOxO,GAAG,IAW1C,IAFAJ,KAAKwH,OAAS,IAAIzH,EAEbK,EAAI,EAAGA,EAAIgY,EAAQhZ,OAAQgB,IAC9BJ,KAAKwH,OAAO9H,KAAK0Y,EAAQhY,GAAG,GAAIgY,EAAQhY,GAAG,IAQ/CoF,EAAa/M,UAAUwU,UAAY,SAAUtJ,GAC3C,IAAIuJ,EAAI9M,EAAG/D,EAAMsH,EAAMtH,IACnBgL,EAAQrH,KAAKsH,MAAMzF,SAAS,IAC5BhC,EAAMwH,EAAMjI,OACZmT,EAAa5O,EAAMqJ,GAAG7P,QAAQoV,WAC9B5J,EAAQhF,EAAMgF,MAGlB,QAA0B,IAAfA,EAAMtM,GAAjB,CAKA,GAAIsH,EAAMvB,MAAQmQ,EAChB,IAAKnS,EAAI,EAAGA,EAAIP,IAKd8D,EAAMvB,QACN8K,EAAK7F,EAAMjH,GAAGuD,GAAO,GACrBA,EAAMvB,SAEF8K,GATe9M,UAuBrBuD,EAAMtH,IAAMsH,EAAMmJ,OAGfI,GAAMvJ,EAAMtH,MACjBsM,EAAMtM,GAAOsH,EAAMtH,SAhCjBsH,EAAMtH,IAAMsM,EAAMtM,IAsCtBmJ,EAAa/M,UAAU6L,SAAW,SAAUX,GAO1C,IANA,IAAIuJ,EAAI9M,EACJiH,EAAQrH,KAAKsH,MAAMzF,SAAS,IAC5BhC,EAAMwH,EAAMjI,OACZgF,EAAMT,EAAMmJ,OACZyF,EAAa5O,EAAMqJ,GAAG7P,QAAQoV,WAE3B5O,EAAMtH,IAAM+H,GAAK,CAQtB,GAAIT,EAAMvB,MAAQmQ,EAChB,IAAKnS,EAAI,EAAGA,EAAIP,KACdqN,EAAK7F,EAAMjH,GAAGuD,GAAO,IADFvD,KAMvB,GAAI8M,GACF,GAAIvJ,EAAMtH,KAAO+H,EAAO,WAI1BT,EAAM0U,SAAW1U,EAAMvH,IAAIuH,EAAMtH,OAG/BsH,EAAM0U,SACR1U,EAAM2U,eAUV9S,EAAa/M,UAAU4K,MAAQ,SAAUjI,EAAK4R,EAAIjF,EAAK8K,GACrD,IAAIzS,EAAGiH,EAAOxH,EACV8D,EAAQ,IAAI3D,KAAKgI,MAAM5M,EAAK4R,EAAIjF,EAAK8K,GAOzC,IALA7S,KAAKsE,SAASX,GAGd9D,GADAwH,EAAQrH,KAAKwH,OAAO3F,SAAS,KACjBzC,OAEPgB,EAAI,EAAGA,EAAIP,EAAKO,IACnBiH,EAAMjH,GAAGuD,IAKb6B,EAAa/M,UAAUuP,MAAQ,EAAQ,KAGvChL,EAAO7C,QAAUqL,G,iCCnKjB,SAAS+S,EAAiBve,GACxB,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,IACL,KAAK,IACH,OAAO,EACT,QACE,OAAO,GAIbgD,EAAO7C,QAAU,SAAcwJ,EAAOY,GAGpC,IAFA,IAAIlI,EAAMsH,EAAMtH,IAETA,EAAMsH,EAAMmJ,SAAWyL,EAAiB5U,EAAMvH,IAAIP,WAAWQ,KAClEA,IAGF,OAAIA,IAAQsH,EAAMtH,MAEbkI,IAAUZ,EAAM0U,SAAW1U,EAAMvH,IAAIzB,MAAMgJ,EAAMtH,IAAKA,IAE3DsH,EAAMtH,IAAMA,GAEL,K,iCCrDT,IAAIG,EAAU,EAAQ,KAAmBA,QAGzCQ,EAAO7C,QAAU,SAAiBwJ,EAAOY,GACvC,IAAIiU,EAAMtU,EAAK7H,EAAMsH,EAAMtH,IAE3B,GAAkC,KAA9BsH,EAAMvH,IAAIP,WAAWQ,GAAyB,OAAO,EA2BzD,IAzBAmc,EAAO7U,EAAM0U,QAAQjZ,OAAS,EAC9B8E,EAAMP,EAAMmJ,OAMPvI,IACCiU,GAAQ,GAAwC,KAAnC7U,EAAM0U,QAAQxc,WAAW2c,GACpCA,GAAQ,GAA4C,KAAvC7U,EAAM0U,QAAQxc,WAAW2c,EAAO,IAC/C7U,EAAM0U,QAAU1U,EAAM0U,QAAQ/c,QAAQ,MAAO,IAC7CqI,EAAMjE,KAAK,YAAa,KAAM,KAE9BiE,EAAM0U,QAAU1U,EAAM0U,QAAQ1d,MAAM,GAAI,GACxCgJ,EAAMjE,KAAK,YAAa,KAAM,IAIhCiE,EAAMjE,KAAK,YAAa,KAAM,IAIlCrD,IAGOA,EAAM6H,GAAO1H,EAAQmH,EAAMvH,IAAIP,WAAWQ,KAASA,IAG1D,OADAsH,EAAMtH,IAAMA,GACL,I,iCChCT,IAJA,IAAIG,EAAU,EAAQ,KAAmBA,QAErCic,EAAU,GAELrY,EAAI,EAAGA,EAAI,IAAKA,IAAOqY,EAAQ/Y,KAAK,GAE7C,qCACGoL,MAAM,IAAIjQ,SAAQ,SAAUb,GAAMye,EAAQze,EAAG6B,WAAW,IAAM,KAGjEmB,EAAO7C,QAAU,SAAgBwJ,EAAOY,GACtC,IAAIvK,EAAIqC,EAAMsH,EAAMtH,IAAK6H,EAAMP,EAAMmJ,OAErC,GAAkC,KAA9BnJ,EAAMvH,IAAIP,WAAWQ,GAAwB,OAAO,EAIxD,KAFAA,EAEU6H,EAAK,CAGb,IAFAlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,IAEjB,KAAuB,IAAhBoc,EAAQze,GAGtB,OAFKuK,IAAUZ,EAAM0U,SAAW1U,EAAMvH,IAAIC,IAC1CsH,EAAMtH,KAAO,GACN,EAGT,GAAW,KAAPrC,EAAa,CAOf,IANKuK,GACHZ,EAAMjE,KAAK,YAAa,KAAM,GAGhCrD,IAEOA,EAAM6H,IACXlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,GACrBG,EAAQxC,KACbqC,IAIF,OADAsH,EAAMtH,IAAMA,GACL,GAMX,OAFKkI,IAAUZ,EAAM0U,SAAW,MAChC1U,EAAMtH,OACC,I,iCC9CTW,EAAO7C,QAAU,SAAkBwJ,EAAOY,GACxC,IAAIE,EAAOP,EAAKC,EAAQuU,EAAYC,EAAU3U,EAC1C3H,EAAMsH,EAAMtH,IAGhB,GAAW,KAFFsH,EAAMvH,IAAIP,WAAWQ,GAEJ,OAAO,EAMjC,IAJAoI,EAAQpI,EACRA,IACA6H,EAAMP,EAAMmJ,OAELzQ,EAAM6H,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,IAAwBA,IAMjE,IAJA8H,EAASR,EAAMvH,IAAIzB,MAAM8J,EAAOpI,GAEhCqc,EAAaC,EAAWtc,GAEoC,KAApDqc,EAAa/U,EAAMvH,IAAIf,QAAQ,IAAKsd,KAAmB,CAG7D,IAFAA,EAAWD,EAAa,EAEjBC,EAAWzU,GAA0C,KAAnCP,EAAMvH,IAAIP,WAAW8c,IAA6BA,IAE3E,GAAIA,EAAWD,IAAevU,EAAO/E,OASnC,OARKmF,KACHP,EAAgBL,EAAMjE,KAAK,cAAe,OAAQ,IAC5C4C,OAAU6B,EAChBH,EAAMnG,QAAU8F,EAAMvH,IAAIzB,MAAM0B,EAAKqc,GAClCpd,QAAQ,MAAO,KACfA,QAAQ,WAAY,OAEzBqI,EAAMtH,IAAMsc,GACL,EAMX,OAFKpU,IAAUZ,EAAM0U,SAAWlU,GAChCR,EAAMtH,KAAO8H,EAAO/E,QACb,I,iCCrCT,IAAIvC,EAAuB,EAAQ,KAAmBA,mBAClDL,EAAuB,EAAQ,KAAmBA,QAGtDQ,EAAO7C,QAAU,SAAcwJ,EAAOY,GACpC,IAAIrC,EACAtG,EACAob,EACAnK,EACA+L,EACAvc,EACA4a,EACA4B,EACA3B,EAEAH,EAAO,GACPhK,EAASpJ,EAAMtH,IACf6H,EAAMP,EAAMmJ,OACZrI,EAAQd,EAAMtH,IACdyc,GAAiB,EAErB,GAAwC,KAApCnV,EAAMvH,IAAIP,WAAW8H,EAAMtH,KAAwB,OAAO,EAM9D,GAJAuc,EAAajV,EAAMtH,IAAM,GACzBwQ,EAAWlJ,EAAMqJ,GAAG5H,QAAQmH,eAAe5I,EAAOA,EAAMtH,KAAK,IAG9C,EAAK,OAAO,EAG3B,IADAA,EAAMwQ,EAAW,GACP3I,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,GAAsB,CAW1D,IALAyc,GAAiB,EAIjBzc,IACOA,EAAM6H,IACXtI,EAAO+H,EAAMvH,IAAIP,WAAWQ,GACvBG,EAAQZ,IAAkB,KAATA,GAFNS,KAIlB,GAAIA,GAAO6H,EAAO,OAAO,EAkBzB,IAdAO,EAAQpI,GACR4a,EAAMtT,EAAMqJ,GAAG5H,QAAQoH,qBAAqB7I,EAAMvH,IAAKC,EAAKsH,EAAMmJ,SAC1DI,KACN6J,EAAOpT,EAAMqJ,GAAG7G,cAAc8Q,EAAI7b,KAC9BuI,EAAMqJ,GAAGhH,aAAa+Q,GACxB1a,EAAM4a,EAAI5a,IAEV0a,EAAO,IAMXtS,EAAQpI,EACDA,EAAM6H,IACXtI,EAAO+H,EAAMvH,IAAIP,WAAWQ,GACvBG,EAAQZ,IAAkB,KAATA,GAFNS,KAQlB,GADA4a,EAAMtT,EAAMqJ,GAAG5H,QAAQqH,eAAe9I,EAAMvH,IAAKC,EAAKsH,EAAMmJ,QACxDzQ,EAAM6H,GAAOO,IAAUpI,GAAO4a,EAAI/J,GAMpC,IALAgK,EAAQD,EAAI7b,IACZiB,EAAM4a,EAAI5a,IAIHA,EAAM6H,IACXtI,EAAO+H,EAAMvH,IAAIP,WAAWQ,GACvBG,EAAQZ,IAAkB,KAATA,GAFNS,UAKlB6a,EAAQ,IAGN7a,GAAO6H,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,MAErCyc,GAAiB,GAEnBzc,IAGF,GAAIyc,EAAgB,CAIlB,QAAoC,IAAzBnV,EAAMoE,IAAIoP,WAA8B,OAAO,EAmB1D,GAjBI9a,EAAM6H,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,IACpCoI,EAAQpI,EAAM,GACdA,EAAMsH,EAAMqJ,GAAG5H,QAAQmH,eAAe5I,EAAOtH,KAClC,EACT2a,EAAQrT,EAAMvH,IAAIzB,MAAM8J,EAAOpI,KAE/BA,EAAMwQ,EAAW,GAGnBxQ,EAAMwQ,EAAW,EAKdmK,IAASA,EAAQrT,EAAMvH,IAAIzB,MAAMie,EAAY/L,MAElDgM,EAAMlV,EAAMoE,IAAIoP,WAAWta,EAAmBma,KAG5C,OADArT,EAAMtH,IAAM0Q,GACL,EAETgK,EAAO8B,EAAI9B,KACXG,EAAQ2B,EAAI3B,MAwBd,OAjBK3S,IACHZ,EAAMtH,IAAMuc,EACZjV,EAAMmJ,OAASD,EAEAlJ,EAAMjE,KAAK,YAAa,IAAK,GACtCwC,MAASA,EAAQ,CAAE,CAAE,OAAQ6U,IAC/BG,GACFhV,EAAMxC,KAAK,CAAE,QAASwX,IAGxBvT,EAAMqJ,GAAGnG,OAAOvC,SAASX,GAEVA,EAAMjE,KAAK,aAAc,KAAM,IAGhDiE,EAAMtH,IAAMA,EACZsH,EAAMmJ,OAAS5I,GACR,I,iCChJT,IAAIrH,EAAuB,EAAQ,KAAmBA,mBAClDL,EAAuB,EAAQ,KAAmBA,QAGtDQ,EAAO7C,QAAU,SAAewJ,EAAOY,GACrC,IAAIrC,EACAtG,EACAiC,EACAmZ,EACAnK,EACA+L,EACAvc,EACAwc,EACA5B,EACAC,EACAlT,EACAK,EACAI,EACAsS,EAAO,GACPhK,EAASpJ,EAAMtH,IACf6H,EAAMP,EAAMmJ,OAEhB,GAAwC,KAApCnJ,EAAMvH,IAAIP,WAAW8H,EAAMtH,KAAwB,OAAO,EAC9D,GAA4C,KAAxCsH,EAAMvH,IAAIP,WAAW8H,EAAMtH,IAAM,GAAsB,OAAO,EAMlE,GAJAuc,EAAajV,EAAMtH,IAAM,GACzBwQ,EAAWlJ,EAAMqJ,GAAG5H,QAAQmH,eAAe5I,EAAOA,EAAMtH,IAAM,GAAG,IAGlD,EAAK,OAAO,EAG3B,IADAA,EAAMwQ,EAAW,GACP3I,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,GAAsB,CAQ1D,IADAA,IACOA,EAAM6H,IACXtI,EAAO+H,EAAMvH,IAAIP,WAAWQ,GACvBG,EAAQZ,IAAkB,KAATA,GAFNS,KAIlB,GAAIA,GAAO6H,EAAO,OAAO,EAkBzB,IAdAO,EAAQpI,GACR4a,EAAMtT,EAAMqJ,GAAG5H,QAAQoH,qBAAqB7I,EAAMvH,IAAKC,EAAKsH,EAAMmJ,SAC1DI,KACN6J,EAAOpT,EAAMqJ,GAAG7G,cAAc8Q,EAAI7b,KAC9BuI,EAAMqJ,GAAGhH,aAAa+Q,GACxB1a,EAAM4a,EAAI5a,IAEV0a,EAAO,IAMXtS,EAAQpI,EACDA,EAAM6H,IACXtI,EAAO+H,EAAMvH,IAAIP,WAAWQ,GACvBG,EAAQZ,IAAkB,KAATA,GAFNS,KAQlB,GADA4a,EAAMtT,EAAMqJ,GAAG5H,QAAQqH,eAAe9I,EAAMvH,IAAKC,EAAKsH,EAAMmJ,QACxDzQ,EAAM6H,GAAOO,IAAUpI,GAAO4a,EAAI/J,GAMpC,IALAgK,EAAQD,EAAI7b,IACZiB,EAAM4a,EAAI5a,IAIHA,EAAM6H,IACXtI,EAAO+H,EAAMvH,IAAIP,WAAWQ,GACvBG,EAAQZ,IAAkB,KAATA,GAFNS,UAKlB6a,EAAQ,GAGV,GAAI7a,GAAO6H,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,GAErC,OADAsH,EAAMtH,IAAM0Q,GACL,EAET1Q,QACK,CAIL,QAAoC,IAAzBsH,EAAMoE,IAAIoP,WAA8B,OAAO,EAmB1D,GAjBI9a,EAAM6H,GAAqC,KAA9BP,EAAMvH,IAAIP,WAAWQ,IACpCoI,EAAQpI,EAAM,GACdA,EAAMsH,EAAMqJ,GAAG5H,QAAQmH,eAAe5I,EAAOtH,KAClC,EACT2a,EAAQrT,EAAMvH,IAAIzB,MAAM8J,EAAOpI,KAE/BA,EAAMwQ,EAAW,GAGnBxQ,EAAMwQ,EAAW,EAKdmK,IAASA,EAAQrT,EAAMvH,IAAIzB,MAAMie,EAAY/L,MAElDgM,EAAMlV,EAAMoE,IAAIoP,WAAWta,EAAmBma,KAG5C,OADArT,EAAMtH,IAAM0Q,GACL,EAETgK,EAAO8B,EAAI9B,KACXG,EAAQ2B,EAAI3B,MA6Bd,OAtBK3S,IACH1G,EAAU8F,EAAMvH,IAAIzB,MAAMie,EAAY/L,GAEtClJ,EAAMqJ,GAAGnG,OAAOxD,MACdxF,EACA8F,EAAMqJ,GACNrJ,EAAMoE,IACN1D,EAAS,KAGXL,EAAiBL,EAAMjE,KAAK,QAAS,MAAO,IACtCwC,MAAWA,EAAQ,CAAE,CAAE,MAAO6U,GAAQ,CAAE,MAAO,KACrD/S,EAAM3B,SAAWgC,EACjBL,EAAMnG,QAAWA,EAEbqZ,GACFhV,EAAMxC,KAAK,CAAE,QAASwX,KAI1BvT,EAAMtH,IAAMA,EACZsH,EAAMmJ,OAAS5I,GACR,I,iCChJT,IAAI6U,EAAc,2IACdC,EAAc,uDAGlBhc,EAAO7C,QAAU,SAAkBwJ,EAAOY,GACxC,IAAIjG,EAAM2a,EAAWC,EAAYjT,EAAKsJ,EAASvL,EAC3C3H,EAAMsH,EAAMtH,IAEhB,OAAkC,KAA9BsH,EAAMvH,IAAIP,WAAWQ,QAEzBiC,EAAOqF,EAAMvH,IAAIzB,MAAM0B,IAEdhB,QAAQ,KAAO,KAEpB2d,EAAYld,KAAKwC,IAGnB2H,GAFAgT,EAAY3a,EAAK9C,MAAMwd,IAEP,GAAGre,MAAM,GAAI,GAC7B4U,EAAU5L,EAAMqJ,GAAG7G,cAAcF,KAC5BtC,EAAMqJ,GAAGhH,aAAauJ,KAEtBhL,KACHP,EAAgBL,EAAMjE,KAAK,YAAa,IAAK,IACvCwC,MAAU,CAAE,CAAE,OAAQqN,IAC5BvL,EAAM1B,OAAU,WAChB0B,EAAMzB,KAAU,QAEhByB,EAAgBL,EAAMjE,KAAK,OAAQ,GAAI,IACjC7B,QAAU8F,EAAMqJ,GAAGvG,kBAAkBR,IAE3CjC,EAAgBL,EAAMjE,KAAK,aAAc,KAAM,IACzC4C,OAAU,WAChB0B,EAAMzB,KAAU,QAGlBoB,EAAMtH,KAAO4c,EAAU,GAAG7Z,QACnB,MAGL2Z,EAASjd,KAAKwC,KAGhB2H,GAFAiT,EAAa5a,EAAK9C,MAAMud,IAEP,GAAGpe,MAAM,GAAI,GAC9B4U,EAAU5L,EAAMqJ,GAAG7G,cAAc,UAAYF,KACxCtC,EAAMqJ,GAAGhH,aAAauJ,KAEtBhL,KACHP,EAAgBL,EAAMjE,KAAK,YAAa,IAAK,IACvCwC,MAAU,CAAE,CAAE,OAAQqN,IAC5BvL,EAAM1B,OAAU,WAChB0B,EAAMzB,KAAU,QAEhByB,EAAgBL,EAAMjE,KAAK,OAAQ,GAAI,IACjC7B,QAAU8F,EAAMqJ,GAAGvG,kBAAkBR,IAE3CjC,EAAgBL,EAAMjE,KAAK,aAAc,KAAM,IACzC4C,OAAU,WAChB0B,EAAMzB,KAAU,QAGlBoB,EAAMtH,KAAO6c,EAAW,GAAG9Z,QACpB,Q,iCC9DX,IAAIoE,EAAc,EAAQ,KAAqBA,YAU/CxG,EAAO7C,QAAU,SAAqBwJ,EAAOY,GAC3C,IAAIvK,EAAIwB,EAAO0I,EACX7H,EAAMsH,EAAMtH,IAEhB,QAAKsH,EAAMqJ,GAAG7P,QAAQK,OAGtB0G,EAAMP,EAAMmJ,SACsB,KAA9BnJ,EAAMvH,IAAIP,WAAWQ,IACrBA,EAAM,GAAK6H,OAMJ,MADXlK,EAAK2J,EAAMvH,IAAIP,WAAWQ,EAAM,KAErB,KAAPrC,GACO,KAAPA,IAxBN,SAAkBA,GAEhB,IAAImf,EAAU,GAALnf,EACT,OAAQmf,GAAM,IAAiBA,GAAM,IAsBhCC,CAASpf,SAIdwB,EAAQmI,EAAMvH,IAAIzB,MAAM0B,GAAKb,MAAMgI,MAG9Be,IACaZ,EAAMjE,KAAK,cAAe,GAAI,GACxC7B,QAAU8F,EAAMvH,IAAIzB,MAAM0B,EAAKA,EAAMb,EAAM,GAAG4D,SAEtDuE,EAAMtH,KAAOb,EAAM,GAAG4D,QACf,Q,iCCzCT,IAAIzF,EAAoB,EAAQ,KAC5BhB,EAAoB,EAAQ,KAAmBA,IAC/CI,EAAoB,EAAQ,KAAmBA,kBAC/CE,EAAoB,EAAQ,KAAmBA,cAG/CogB,EAAa,uCACbC,EAAa,4BAGjBtc,EAAO7C,QAAU,SAAgBwJ,EAAOY,GACtC,IAAQ3I,EAAMJ,EAAOa,EAAMsH,EAAMtH,IAAK6H,EAAMP,EAAMmJ,OAElD,GAAkC,KAA9BnJ,EAAMvH,IAAIP,WAAWQ,GAAwB,OAAO,EAExD,GAAIA,EAAM,EAAI6H,EAGZ,GAAW,KAFNP,EAAMvH,IAAIP,WAAWQ,EAAM,IAI9B,GADAb,EAAQmI,EAAMvH,IAAIzB,MAAM0B,GAAKb,MAAM6d,GAOjC,OALK9U,IACH3I,EAAqC,MAA9BJ,EAAM,GAAG,GAAGO,cAAwBC,SAASR,EAAM,GAAGb,MAAM,GAAI,IAAMqB,SAASR,EAAM,GAAI,IAChGmI,EAAM0U,SAAWtf,EAAkB6C,GAAQ3C,EAAc2C,GAAQ3C,EAAc,QAEjF0K,EAAMtH,KAAOb,EAAM,GAAG4D,QACf,OAIT,IADA5D,EAAQmI,EAAMvH,IAAIzB,MAAM0B,GAAKb,MAAM8d,KAE7B3gB,EAAIgB,EAAU6B,EAAM,IAGtB,OAFK+I,IAAUZ,EAAM0U,SAAW1e,EAAS6B,EAAM,KAC/CmI,EAAMtH,KAAOb,EAAM,GAAG4D,QACf,EAQf,OAFKmF,IAAUZ,EAAM0U,SAAW,KAChC1U,EAAMtH,OACC,I,iCCzCT,SAASkd,EAAkB5V,EAAOC,GAChC,IAAI4V,EAAWC,EAAWC,EAAQC,EAAQC,EAAcC,EACpDC,EAAYC,EACZC,EAAgB,GAChB9V,EAAMN,EAAWxE,OAErB,IAAKoa,EAAY,EAAGA,EAAYtV,EAAKsV,IASnC,IARAE,EAAS9V,EAAW4V,IAMbpa,OAASsa,EAAOta,QAAU,EAE5Bsa,EAAO5U,MAAZ,CAaA,IATKkV,EAActhB,eAAeghB,EAAOvV,UACvC6V,EAAcN,EAAOvV,QAAU,EAAG,GAAI,GAAI,IAG5CyV,EAAeI,EAAcN,EAAOvV,QAAQuV,EAAOta,OAAS,GAC5Dya,GAAmB,EAEnBJ,EAAYD,EAAYE,EAAO/U,KAAO,EAE/B8U,EAAYG,EAAcH,GAAaE,EAAOhV,KAAO,EAG1D,IAFAgV,EAAS/V,EAAW6V,IAETtV,SAAWuV,EAAOvV,UAEJ,IAArB0V,IAAwBA,EAAkBJ,GAE1CE,EAAO/U,MACP+U,EAAOvV,IAAM,GACbuV,EAAOvX,QAAUsX,EAAOtX,QAE1B0X,GAAa,GASTH,EAAO7U,OAAS4U,EAAO9U,QACpB+U,EAAOva,OAASsa,EAAOta,QAAU,GAAM,IACtCua,EAAOva,OAAS,GAAM,GAAKsa,EAAOta,OAAS,GAAM,IACnD0a,GAAa,KAKdA,IAAY,CAKfC,EAAWN,EAAY,IAAM7V,EAAW6V,EAAY,GAAG7U,KACrDhB,EAAW6V,EAAY,GAAG9U,KAAO,EACjC,EAEF+U,EAAO/U,KAAQ6U,EAAYC,EAAYM,EACvCL,EAAO9U,MAAQ,EACf+U,EAAOvV,IAAQoV,EACfG,EAAOhV,KAAQoV,EACfJ,EAAO7U,OAAQ,EACf+U,GAAmB,EACnB,OAKmB,IAArBA,IAQFG,EAAcN,EAAOvV,SAASuV,EAAOta,QAAU,GAAK,GAAKya,IAM/D7c,EAAO7C,QAAU,SAAoBwJ,GACnC,IAAIqB,EACAC,EAActB,EAAMsB,YACpBf,EAAMP,EAAMsB,YAAY7F,OAI5B,IAFAma,EAAkB5V,EAAOA,EAAMC,YAE1BoB,EAAO,EAAGA,EAAOd,EAAKc,IACrBC,EAAYD,IAASC,EAAYD,GAAMpB,YACzC2V,EAAkB5V,EAAOsB,EAAYD,GAAMpB,c,iCC7FjD5G,EAAO7C,QAAU,SAAuBwJ,GACtC,IAAIqB,EAAM8O,EACN1R,EAAQ,EACRiC,EAASV,EAAMU,OACfH,EAAMP,EAAMU,OAAOjF,OAEvB,IAAK4F,EAAO8O,EAAO,EAAG9O,EAAOd,EAAKc,IAG5BX,EAAOW,GAAM/C,QAAU,GAAGG,IAC9BiC,EAAOW,GAAM5C,MAAQA,EACjBiC,EAAOW,GAAM/C,QAAU,GAAGG,IAEJ,SAAtBiC,EAAOW,GAAMhD,MACbgD,EAAO,EAAId,GACe,SAA1BG,EAAOW,EAAO,GAAGhD,KAGnBqC,EAAOW,EAAO,GAAGnH,QAAUwG,EAAOW,GAAMnH,QAAUwG,EAAOW,EAAO,GAAGnH,SAE/DmH,IAAS8O,IAAQzP,EAAOyP,GAAQzP,EAAOW,IAE3C8O,KAIA9O,IAAS8O,IACXzP,EAAOjF,OAAS0U,K,iCCjCpB,IAAI/R,EAAiB,EAAQ,KACzBtF,EAAiB,EAAQ,KAAmBA,aAC5CE,EAAiB,EAAQ,KAAmBA,YAC5CD,EAAiB,EAAQ,KAAmBA,eAGhD,SAASud,EAAY7d,EAAK4Q,EAAIjF,EAAK8K,GACjC7S,KAAK5D,IAAMA,EACX4D,KAAK+H,IAAMA,EACX/H,KAAKgN,GAAKA,EACVhN,KAAKqE,OAASwO,EACd7S,KAAKiF,YAAcvK,MAAMmY,EAAUzT,QAEnCY,KAAK3D,IAAM,EACX2D,KAAK8M,OAAS9M,KAAK5D,IAAIgD,OACvBY,KAAKoC,MAAQ,EACbpC,KAAKqY,QAAU,GACfrY,KAAKka,aAAe,EAIpBla,KAAK2I,MAAQ,GAGb3I,KAAK4D,WAAa,GAGlB5D,KAAKma,iBAAmB,GAM1BF,EAAYxhB,UAAU6f,YAAc,WAClC,IAAItU,EAAQ,IAAIjC,EAAM,OAAQ,GAAI,GAKlC,OAJAiC,EAAMnG,QAAUmC,KAAKqY,QACrBrU,EAAM5B,MAAQpC,KAAKka,aACnBla,KAAKqE,OAAO3E,KAAKsE,GACjBhE,KAAKqY,QAAU,GACRrU,GAOTiW,EAAYxhB,UAAUiH,KAAO,SAAUsC,EAAM1E,EAAK2E,GAC5CjC,KAAKqY,SACPrY,KAAKsY,cAGP,IAAItU,EAAQ,IAAIjC,EAAMC,EAAM1E,EAAK2E,GAC7BmY,EAAa,KAqBjB,OAnBInY,EAAU,IAEZjC,KAAKoC,QACLpC,KAAK4D,WAAa5D,KAAKma,iBAAiB1a,OAG1CuE,EAAM5B,MAAQpC,KAAKoC,MAEfH,EAAU,IAEZjC,KAAKoC,QACLpC,KAAKma,iBAAiBza,KAAKM,KAAK4D,YAChC5D,KAAK4D,WAAa,GAClBwW,EAAa,CAAExW,WAAY5D,KAAK4D,aAGlC5D,KAAKka,aAAela,KAAKoC,MACzBpC,KAAKqE,OAAO3E,KAAKsE,GACjBhE,KAAKiF,YAAYvF,KAAK0a,GACfpW,GAUTiW,EAAYxhB,UAAUiM,WAAa,SAAUD,EAAO4V,GAClD,IAAiBlJ,EAAUC,EAAUkJ,EAAOzV,EAAUE,EAClDwM,EAAkBF,EAClBG,EAAkBF,EAFlBjV,EAAMoI,EAGN8V,GAAgB,EAChBC,GAAiB,EACjBtW,EAAMlE,KAAK8M,OACX3I,EAASnE,KAAK5D,IAAIP,WAAW4I,GAKjC,IAFA0M,EAAW1M,EAAQ,EAAIzE,KAAK5D,IAAIP,WAAW4I,EAAQ,GAAK,GAEjDpI,EAAM6H,GAAOlE,KAAK5D,IAAIP,WAAWQ,KAAS8H,GAAU9H,IAqC3D,OAnCAie,EAAQje,EAAMoI,EAGd2M,EAAW/U,EAAM6H,EAAMlE,KAAK5D,IAAIP,WAAWQ,GAAO,GAElDgV,EAAkB3U,EAAeyU,IAAaxU,EAAYvD,OAAOC,aAAa8X,IAC9EG,EAAkB5U,EAAe0U,IAAazU,EAAYvD,OAAOC,aAAa+X,IAE9EG,EAAmB9U,EAAa0U,IAChCK,EAAmB/U,EAAa2U,IAG9BmJ,GAAgB,EACPjJ,IACHC,GAAoBF,IACxBkJ,GAAgB,IAIhBhJ,EACFiJ,GAAiB,EACRnJ,IACHG,GAAoBF,IACxBkJ,GAAiB,IAIhBH,GAIHxV,EAAY0V,EACZxV,EAAYyV,IAJZ3V,EAAY0V,KAAoBC,GAAkBnJ,GAClDtM,EAAYyV,KAAoBD,GAAkBjJ,IAM7C,CACLzM,SAAWA,EACXE,UAAWA,EACX3F,OAAWkb,IAMfL,EAAYxhB,UAAUsJ,MAAQA,EAG9B/E,EAAO7C,QAAU8f,G,iCC7IjB,SAAS1f,EAAOC,GACd,IAAIC,EAAUC,MAAMjC,UAAUkC,MAAM7B,KAAK8B,UAAW,GAUpD,OARAH,EAAQI,SAAQ,SAAUpB,GACnBA,GAELjB,OAAOuC,KAAKtB,GAAQoB,SAAQ,SAAUhC,GACpC2B,EAAI3B,GAAOY,EAAOZ,SAIf2B,EAGT,SAASU,EAAOV,GAAO,OAAOhC,OAAOC,UAAUwC,SAASnC,KAAK0B,GAI7D,SAASigB,EAAWjgB,GAAO,MAAuB,sBAAhBU,EAAOV,GAGzC,SAASoC,EAASxB,GAAO,OAAOA,EAAIE,QAAQ,uBAAwB,QAKpE,IAAIof,EAAiB,CACnBC,WAAW,EACXC,YAAY,EACZC,SAAS,GAWX,IAAIC,EAAiB,CACnB,QAAS,CACPC,SAAU,SAAUxM,EAAMlS,EAAKiE,GAC7B,IAAIhC,EAAOiQ,EAAK5T,MAAM0B,GAQtB,OANKiE,EAAK0a,GAAGC,OAEX3a,EAAK0a,GAAGC,KAAQ,IAAIzhB,OAClB,UAAY8G,EAAK0a,GAAGE,SAAW5a,EAAK0a,GAAGG,qBAAuB7a,EAAK0a,GAAGI,SAAU,MAGhF9a,EAAK0a,GAAGC,KAAKnf,KAAKwC,GACbA,EAAK9C,MAAM8E,EAAK0a,GAAGC,MAAM,GAAG7b,OAE9B,IAGX,SAAW,QACX,OAAW,QACX,KAAW,CACT2b,SAAU,SAAUxM,EAAMlS,EAAKiE,GAC7B,IAAIhC,EAAOiQ,EAAK5T,MAAM0B,GAkBtB,OAhBKiE,EAAK0a,GAAGK,UAEX/a,EAAK0a,GAAGK,QAAW,IAAI7hB,OACrB,IACA8G,EAAK0a,GAAGE,SAGR,sBAAwB5a,EAAK0a,GAAGM,WAAa,SAAWhb,EAAK0a,GAAGO,gBAAkB,IAClFjb,EAAK0a,GAAGQ,SACRlb,EAAK0a,GAAGS,oBACRnb,EAAK0a,GAAGI,SAER,MAIA9a,EAAK0a,GAAGK,QAAQvf,KAAKwC,GAEnBjC,GAAO,GAAuB,MAAlBkS,EAAKlS,EAAM,IACvBA,GAAO,GAAuB,MAAlBkS,EAAKlS,EAAM,GADqB,EAEzCiC,EAAK9C,MAAM8E,EAAK0a,GAAGK,SAAS,GAAGjc,OAEjC,IAGX,UAAW,CACT2b,SAAU,SAAUxM,EAAMlS,EAAKiE,GAC7B,IAAIhC,EAAOiQ,EAAK5T,MAAM0B,GAOtB,OALKiE,EAAK0a,GAAGU,SACXpb,EAAK0a,GAAGU,OAAU,IAAIliB,OACpB,IAAM8G,EAAK0a,GAAGW,eAAiB,IAAMrb,EAAK0a,GAAGY,gBAAiB,MAG9Dtb,EAAK0a,GAAGU,OAAO5f,KAAKwC,GACfA,EAAK9C,MAAM8E,EAAK0a,GAAGU,QAAQ,GAAGtc,OAEhC,KAWTyc,EAAe,8EAA8E/Q,MAAM,KA8BvG,SAASgR,EAAQxb,GAGf,IAAI0a,EAAK1a,EAAK0a,GAAK,EAAQ,IAAR,CAAoB1a,EAAKyb,UAGxCC,EAAO1b,EAAK2b,SAASthB,QAWzB,SAASuhB,EAAMC,GAAO,OAAOA,EAAI7gB,QAAQ,SAAU0f,EAAGoB,UATtD9b,EAAK+b,YAEA/b,EAAKgc,mBACRN,EAAKtc,KA5Ca,2VA8CpBsc,EAAKtc,KAAKsb,EAAGuB,QAEbvB,EAAGoB,SAAWJ,EAAKjQ,KAAK,KAIxBiP,EAAGwB,YAAmBhjB,OAAO0iB,EAAMlB,EAAGyB,iBAAkB,KACxDzB,EAAG0B,WAAmBljB,OAAO0iB,EAAMlB,EAAG2B,gBAAiB,KACvD3B,EAAG4B,iBAAmBpjB,OAAO0iB,EAAMlB,EAAG6B,sBAAuB,KAC7D7B,EAAG8B,gBAAmBtjB,OAAO0iB,EAAMlB,EAAG+B,qBAAsB,KAM5D,IAAIC,EAAU,GAId,SAASC,EAAYthB,EAAMuhB,GACzB,MAAM,IAAI3e,MAAM,+BAAiC5C,EAAO,MAAQuhB,GAHlE5c,EAAK6c,aAAe,GAMpB3kB,OAAOuC,KAAKuF,EAAK8c,aAAaviB,SAAQ,SAAUc,GAC9C,IAAIuhB,EAAM5c,EAAK8c,YAAYzhB,GAG3B,GAAY,OAARuhB,EAAJ,CAEA,IAAIG,EAAW,CAAEtC,SAAU,KAAMuC,KAAM,MAIvC,GAFAhd,EAAK6c,aAAaxhB,GAAQ0hB,EAzKkB,oBAAhBniB,EA2KfgiB,GAiBX,OA3LN,SAAkB1iB,GAAO,MAAuB,oBAAhBU,EAAOV,GA2K7B+iB,CAASL,EAAInC,UAENN,EAAWyC,EAAInC,UACxBsC,EAAStC,SAAWmC,EAAInC,SAExBkC,EAAYthB,EAAMuhB,GAJlBG,EAAStC,SAnEjB,SAAyBC,GACvB,OAAO,SAAUzM,EAAMlS,GACrB,IAAIiC,EAAOiQ,EAAK5T,MAAM0B,GAEtB,OAAI2e,EAAGlf,KAAKwC,GACHA,EAAK9C,MAAMwf,GAAI,GAAG5b,OAEpB,GA4DiBoe,CAAgBN,EAAInC,eAOtCN,EAAWyC,EAAIO,WACjBJ,EAASI,UAAYP,EAAIO,UACfP,EAAIO,UAGdR,EAAYthB,EAAMuhB,GAFlBG,EAASI,UAjER,SAAUjiB,EAAO8E,GACtBA,EAAKmd,UAAUjiB,MAxHnB,SAAkBhB,GAAO,MAAuB,oBAAhBU,EAAOV,GAgM/BQ,CAASkiB,GAKbD,EAAYthB,EAAMuhB,GAJhBF,EAAQtd,KAAK/D,OAWjBqhB,EAAQniB,SAAQ,SAAU6iB,GACnBpd,EAAK6c,aAAa7c,EAAK8c,YAAYM,MAMxCpd,EAAK6c,aAAaO,GAAO3C,SACvBza,EAAK6c,aAAa7c,EAAK8c,YAAYM,IAAQ3C,SAC7Cza,EAAK6c,aAAaO,GAAOD,UACvBnd,EAAK6c,aAAa7c,EAAK8c,YAAYM,IAAQD,cAM/Cnd,EAAK6c,aAAa,IAAM,CAAEpC,SAAU,KAAM0C,UArGnC,SAAUjiB,EAAO8E,GACtBA,EAAKmd,UAAUjiB,KAyGjB,IAAImiB,EAAQnlB,OAAOuC,KAAKuF,EAAK6c,cACRzV,QAAO,SAAU/L,GAEhB,OAAOA,EAAKyD,OAAS,GAAKkB,EAAK6c,aAAaxhB,MAE7CwG,IAAIvF,GACJmP,KAAK,KAE1BzL,EAAK0a,GAAG4C,YAAgBpkB,OAAO,oBAA2BwhB,EAAG6C,SAAW,MAAQF,EAAQ,IAAK,KAC7Frd,EAAK0a,GAAG8C,cAAgBtkB,OAAO,oBAA2BwhB,EAAG6C,SAAW,MAAQF,EAAQ,IAAK,MAE7Frd,EAAK0a,GAAGrL,QAAUnW,OAChB,IAAM8G,EAAK0a,GAAG4C,YAAYnkB,OAAS,MAAQ6G,EAAK0a,GAAG8B,gBAAgBrjB,OAAS,MAC5E,KAxIJ,SAAwB6G,GACtBA,EAAKyd,WAAa,EAClBzd,EAAK0d,eAAmB,GA6IxBC,CAAe3d,GAQjB,SAAS4d,EAAM5d,EAAM6d,GACnB,IAAI1Z,EAAQnE,EAAKyd,UACb3Z,EAAQ9D,EAAK8d,eACb7P,EAAQjO,EAAK0d,eAAerjB,MAAM8J,EAAOL,GAO7CpE,KAAK4P,OAAYtP,EAAK+d,WAAWtiB,cAMjCiE,KAAK3C,MAAYoH,EAAQ0Z,EAMzBne,KAAK6P,UAAYzL,EAAM+Z,EAMvBne,KAAKse,IAAY/P,EAMjBvO,KAAKuO,KAAYA,EAMjBvO,KAAKiG,IAAYsI,EAGnB,SAASgQ,EAAYje,EAAM6d,GACzB,IAAI3iB,EAAQ,IAAI0iB,EAAM5d,EAAM6d,GAI5B,OAFA7d,EAAK6c,aAAa3hB,EAAMoU,QAAQ6N,UAAUjiB,EAAO8E,GAE1C9E,EA0CT,SAASiK,EAAU+Y,EAASrhB,GAC1B,KAAM6C,gBAAgByF,GACpB,OAAO,IAAIA,EAAU+Y,EAASrhB,GAvUlC,IAAsB3C,EA0Uf2C,IA1Ue3C,EA2UDgkB,EA1UZhmB,OAAOuC,KAAKP,GAAO,IAAIikB,QAAO,SAAUC,EAAKhT,GAClD,OAAOgT,GAAOhE,EAAehiB,eAAegT,MAC3C,KAyUCvO,EAAUqhB,EACVA,EAAU,KAIdxe,KAAK+b,SAAqBxhB,EAAO,GAAImgB,EAAgBvd,GAGrD6C,KAAK+d,WAAsB,EAC3B/d,KAAKoe,gBAAsB,EAC3Bpe,KAAKqe,WAAqB,GAC1Bre,KAAKge,eAAqB,GAE1Bhe,KAAKod,YAAqB7iB,EAAO,GAAIugB,EAAgB0D,GACrDxe,KAAKmd,aAAqB,GAE1Bnd,KAAKic,SAAqBJ,EAC1B7b,KAAKsc,mBAAqB,EAE1Btc,KAAKgb,GAAK,GAEVc,EAAQ9b,MAWVyF,EAAUhN,UAAUkmB,IAAM,SAAa/O,EAAQgP,GAG7C,OAFA5e,KAAKod,YAAYxN,GAAUgP,EAC3B9C,EAAQ9b,MACDA,MAUTyF,EAAUhN,UAAUyO,IAAM,SAAa/J,GAErC,OADA6C,KAAK+b,SAAWxhB,EAAOyF,KAAK+b,SAAU5e,GAC/B6C,MASTyF,EAAUhN,UAAUqD,KAAO,SAAcyS,GAKvC,GAHAvO,KAAKge,eAAiBzP,EACtBvO,KAAK+d,WAAkB,GAElBxP,EAAKnP,OAAU,OAAO,EAE3B,IAAIyf,EAAGC,EAAIC,EAAIlf,EAAKse,EAAOa,EAAMhE,EAAIiE,EAGrC,GAAIjf,KAAKgb,GAAG4C,YAAY9hB,KAAKyS,GAG3B,KAFAyM,EAAKhb,KAAKgb,GAAG8C,eACVjO,UAAY,EACgB,QAAvBgP,EAAI7D,EAAG3b,KAAKkP,KAElB,GADA1O,EAAMG,KAAKkf,aAAa3Q,EAAMsQ,EAAE,GAAI7D,EAAGnL,WAC9B,CACP7P,KAAKqe,WAAiBQ,EAAE,GACxB7e,KAAK+d,UAAiBc,EAAExhB,MAAQwhB,EAAE,GAAGzf,OACrCY,KAAKoe,eAAiBS,EAAExhB,MAAQwhB,EAAE,GAAGzf,OAASS,EAC9C,MA8CN,OAzCIG,KAAK+b,SAASpB,WAAa3a,KAAKmd,aAAa,WAE/C8B,EAAU1Q,EAAK3E,OAAO5J,KAAKgb,GAAG8B,mBACf,IAET9c,KAAK+d,UAAY,GAAKkB,EAAUjf,KAAK+d,YAC0D,QAA5Fe,EAAKvQ,EAAK/S,MAAMwE,KAAK+b,SAASlB,QAAU7a,KAAKgb,GAAG0B,WAAa1c,KAAKgb,GAAG4B,qBAExEuB,EAAQW,EAAGzhB,MAAQyhB,EAAG,GAAG1f,QAErBY,KAAK+d,UAAY,GAAKI,EAAQne,KAAK+d,aACrC/d,KAAKqe,WAAiB,GACtBre,KAAK+d,UAAiBI,EACtBne,KAAKoe,eAAiBU,EAAGzhB,MAAQyhB,EAAG,GAAG1f,SAO7CY,KAAK+b,SAASnB,YAAc5a,KAAKmd,aAAa,YAEvC5O,EAAKlT,QAAQ,MACR,GAGmC,QAA1C0jB,EAAKxQ,EAAK/S,MAAMwE,KAAKgb,GAAGwB,gBAE3B2B,EAAQY,EAAG1hB,MAAQ0hB,EAAG,GAAG3f,OACzB4f,EAAQD,EAAG1hB,MAAQ0hB,EAAG,GAAG3f,QAErBY,KAAK+d,UAAY,GAAKI,EAAQne,KAAK+d,WAClCI,IAAUne,KAAK+d,WAAaiB,EAAOhf,KAAKoe,kBAC3Cpe,KAAKqe,WAAiB,UACtBre,KAAK+d,UAAiBI,EACtBne,KAAKoe,eAAiBY,IAMvBhf,KAAK+d,WAAa,GAW3BtY,EAAUhN,UAAUkX,QAAU,SAAiBpB,GAC7C,OAAOvO,KAAKgb,GAAGrL,QAAQ7T,KAAKyS,IAa9B9I,EAAUhN,UAAUymB,aAAe,SAAsB3Q,EAAMqB,EAAQvT,GAErE,OAAK2D,KAAKmd,aAAavN,EAAO7T,eAGvBiE,KAAKmd,aAAavN,EAAO7T,eAAegf,SAASxM,EAAMlS,EAAK2D,MAF1D,GAsBXyF,EAAUhN,UAAU+C,MAAQ,SAAe+S,GACzC,IAAI4P,EAAQ,EAAG/gB,EAAS,GAGpB4C,KAAK+d,WAAa,GAAK/d,KAAKge,iBAAmBzP,IACjDnR,EAAOsC,KAAK6e,EAAYve,KAAMme,IAC9BA,EAAQne,KAAKoe,gBAOf,IAHA,IAAI9f,EAAO6f,EAAQ5P,EAAK5T,MAAMwjB,GAAS5P,EAGhCvO,KAAKlE,KAAKwC,IACflB,EAAOsC,KAAK6e,EAAYve,KAAMme,IAE9B7f,EAAOA,EAAK3D,MAAMqF,KAAKoe,gBACvBD,GAASne,KAAKoe,eAGhB,OAAIhhB,EAAOgC,OACFhC,EAGF,MAmBTqI,EAAUhN,UAAUujB,KAAO,SAAcza,EAAM4d,GAG7C,OAFA5d,EAAO7G,MAAM+G,QAAQF,GAAQA,EAAO,CAAEA,GAEjC4d,GAOLnf,KAAKic,SAAWjc,KAAKic,SAAS1f,OAAOgF,GACJ6d,OACA1X,QAAO,SAAU2X,EAAI3d,EAAK4d,GACzB,OAAOD,IAAOC,EAAI5d,EAAM,MAEzB/B,UAEjCmc,EAAQ9b,MACDA,OAdLA,KAAKic,SAAW1a,EAAK5G,QACrBqF,KAAKsc,mBAAoB,EACzBR,EAAQ9b,MACDA,OAmBXyF,EAAUhN,UAAUglB,UAAY,SAAmBjiB,GAK5CA,EAAMoU,SAAUpU,EAAMyK,IAAM,UAAYzK,EAAMyK,KAE9B,YAAjBzK,EAAMoU,QAAyB,YAAY9T,KAAKN,EAAMyK,OACxDzK,EAAMyK,IAAM,UAAYzK,EAAMyK,MAUlCR,EAAUhN,UAAU4jB,UAAY,aAIhCrf,EAAO7C,QAAUsL,G,iCCxnBjBzI,EAAO7C,QAAU,SAAUolB,GACzB,IAAIvE,EAAK,GAGTA,EAAGwE,QAAU,EAAQ,KAAiC/lB,OACtDuhB,EAAGyE,OAAU,EAAQ,KAAgChmB,OACrDuhB,EAAG0E,MAAU,EAAQ,KAA+BjmB,OACpDuhB,EAAG2E,MAAU,EAAQ,KAA+BlmB,OAGpDuhB,EAAG6C,SAAW,CAAE7C,EAAG0E,MAAO1E,EAAG2E,MAAO3E,EAAGyE,QAAS1T,KAAK,KAGrDiP,EAAG4E,QAAU,CAAE5E,EAAG0E,MAAO1E,EAAGyE,QAAS1T,KAAK,KAiK1C,OAxJAiP,EAAG6E,kBAA0B,eAAmC7E,EAAG6C,SAAW,IAAM7C,EAAGwE,QAAU,IAMjGxE,EAAG8E,QAED,yFAGF9E,EAAGE,SAAc,YAAcF,EAAG4E,QAAU,uBAE5C5E,EAAGQ,SAED,kFAEFR,EAAGS,oBAED,cAAkCT,EAAG6C,SAAW,6BAA+B7C,EAAG6C,SAAW,KAE/F7C,EAAGI,SAED,iBAGcJ,EAAG4E,QAAU,IAH3B,yCAIoB5E,EAAG4E,QAJvB,wBAKoB5E,EAAG4E,QALvB,wBAMoB5E,EAAG4E,QANvB,wBAOoB5E,EAAG4E,QAPvB,yBAQoB5E,EAAG4E,QARvB,qBASiB5E,EAAG6E,kBATpB,sCAiBiB7E,EAAG4E,QAAU,WACvBL,GAAQA,EAAK,OACZ,6BAEA,SAEF,SAAWvE,EAAG4E,QAvBpB,YAwBiB5E,EAAG4E,QAxBpB,gBAyBiB5E,EAAG4E,QAzBpB,iBAgCF5E,EAAGW,eAED,iEAEFX,EAAGuB,OAED,wBAKFvB,EAAGO,gBAGD,MACEP,EAAGuB,OACH,IACAvB,EAAG6E,kBAHL,UAMF7E,EAAGM,WAED,MACEN,EAAGuB,OADL,OAGUvB,EAAG6E,kBAHb,QAKU7E,EAAG6E,kBAAoB,QAAU7E,EAAG6E,kBAAoB,UAAY7E,EAAG6E,kBALjF,KAQF7E,EAAG+E,SAED,eAIgB/E,EAAGM,WAAa,SAAWN,EAAGM,WAJ9C,KAOFN,EAAGgF,eAED,MACEhF,EAAG8E,QADL,aAGgB9E,EAAGM,WAHnB,qBAMFN,EAAGiF,qBAED,YAAcjF,EAAGM,WAAa,oBAEhCN,EAAGY,gBAEDZ,EAAG+E,SAAW/E,EAAGS,oBAEnBT,EAAGkF,sBAEDlF,EAAGgF,eAAiBhF,EAAGS,oBAEzBT,EAAGG,qBAEDH,EAAG+E,SAAW/E,EAAGQ,SAAWR,EAAGS,oBAEjCT,EAAGmF,2BAEDnF,EAAGgF,eAAiBhF,EAAGQ,SAAWR,EAAGS,oBAEvCT,EAAGoF,iCAEDpF,EAAGiF,qBAAuBjF,EAAGQ,SAAWR,EAAGS,oBAO7CT,EAAG+B,oBAED,sDAAwD/B,EAAG6C,SAAW,SAExE7C,EAAGyB,gBAEC,kBAAsCzB,EAAG4E,QAAzC,KACM5E,EAAGW,eAAiB,IAAMX,EAAGkF,sBAAwB,IAE/DlF,EAAG2B,eAGC,mCAA0C3B,EAAG6C,SAA7C,qBAC0B7C,EAAGmF,2BAA6BnF,EAAGI,SAAW,IAE5EJ,EAAG6B,qBAGC,mCAA0C7B,EAAG6C,SAA7C,qBAC0B7C,EAAGoF,iCAAmCpF,EAAGI,SAAW,IAE3EJ,I,qBCjLT,qBACE,SAASqF,GAGsClmB,GAC9CA,EAAQmmB,SACoCtjB,GAC5CA,EAAOsjB,SAHT,IAIIC,EAA8B,iBAAVC,GAAsBA,EAE7CD,EAAWC,SAAWD,GACtBA,EAAWE,SAAWF,GACtBA,EAAWjgB,KAUZ,IAAIoF,EAGJgb,EAAS,WAGTC,EAAO,GAUPC,EAAgB,QAChBC,EAAgB,eAChBC,EAAkB,4BAGlBC,EAAS,CACR,SAAY,kDACZ,YAAa,iDACb,gBAAiB,iBAKlBC,EAAQvK,KAAKuK,MACbC,EAAqB7nB,OAAOC,aAa5B,SAAS6nB,EAAMlf,GACd,MAAM,IAAImf,WAAWJ,EAAO/e,IAW7B,SAASG,EAAIif,EAAOvgB,GAGnB,IAFA,IAAIzB,EAASgiB,EAAMhiB,OACfhC,EAAS,GACNgC,KACNhC,EAAOgC,GAAUyB,EAAGugB,EAAMhiB,IAE3B,OAAOhC,EAaR,SAASikB,EAAUpkB,EAAQ4D,GAC1B,IAAIygB,EAAQrkB,EAAO6N,MAAM,KACrB1N,EAAS,GAWb,OAVIkkB,EAAMliB,OAAS,IAGlBhC,EAASkkB,EAAM,GAAK,IACpBrkB,EAASqkB,EAAM,IAMTlkB,EADO+E,GAFdlF,EAASA,EAAO3B,QAAQwlB,EAAiB,MACrBhW,MAAM,KACAjK,GAAIkL,KAAK,KAiBpC,SAASwV,EAAWtkB,GAMnB,IALA,IAGI8F,EACAye,EAJAC,EAAS,GACTC,EAAU,EACVtiB,EAASnC,EAAOmC,OAGbsiB,EAAUtiB,IAChB2D,EAAQ9F,EAAOpB,WAAW6lB,OACb,OAAU3e,GAAS,OAAU2e,EAAUtiB,EAG3B,QAAX,OADboiB,EAAQvkB,EAAOpB,WAAW6lB,OAEzBD,EAAO/hB,OAAe,KAARqD,IAAkB,KAAe,KAARye,GAAiB,QAIxDC,EAAO/hB,KAAKqD,GACZ2e,KAGDD,EAAO/hB,KAAKqD,GAGd,OAAO0e,EAWR,SAASE,EAAWP,GACnB,OAAOjf,EAAIif,GAAO,SAASre,GAC1B,IAAI0e,EAAS,GAOb,OANI1e,EAAQ,QAEX0e,GAAUR,GADVle,GAAS,SAC8B,GAAK,KAAQ,OACpDA,EAAQ,MAAiB,KAARA,GAElB0e,GAAUR,EAAmBle,MAE3BgJ,KAAK,IAoCT,SAAS6V,EAAaC,EAAOC,GAG5B,OAAOD,EAAQ,GAAK,IAAMA,EAAQ,MAAgB,GAARC,IAAc,GAQzD,SAASC,EAAMC,EAAOC,EAAWC,GAChC,IAAIxW,EAAI,EAGR,IAFAsW,EAAQE,EAAYlB,EAAMgB,EA1LpB,KA0LoCA,GAAS,EACnDA,GAAShB,EAAMgB,EAAQC,GACOD,EAAQG,IAA2BzW,GAAKiV,EACrEqB,EAAQhB,EAAMgB,EA3KArB,IA6Kf,OAAOK,EAAMtV,EAAI,GAAsBsW,GAASA,EAhM1C,KA0MP,SAAS7e,EAAOif,GAEf,IAEIC,EAIAC,EACAze,EACAxG,EACAklB,EACAC,EACA9W,EACAmW,EACA7Q,EAEAyR,EArEiBC,EAsDjBjB,EAAS,GACTkB,EAAcP,EAAMhjB,OAEpBgB,EAAI,EACJwiB,EA7MM,IA8MNC,EA/MS,GAoOb,KALAP,EAAQF,EAAMjX,YA7NH,MA8NC,IACXmX,EAAQ,GAGJze,EAAI,EAAGA,EAAIye,IAASze,EAEpBue,EAAMvmB,WAAWgI,IAAM,KAC1Bqd,EAAM,aAEPO,EAAO/hB,KAAK0iB,EAAMvmB,WAAWgI,IAM9B,IAAKxG,EAAQilB,EAAQ,EAAIA,EAAQ,EAAI,EAAGjlB,EAAQslB,GAAwC,CAOvF,IAAKJ,EAAOniB,EAAGoiB,EAAI,EAAG9W,EAAIiV,EAErBtjB,GAASslB,GACZzB,EAAM,mBAGPW,GAxGmBa,EAwGEN,EAAMvmB,WAAWwB,MAvGxB,GAAK,GACbqlB,EAAY,GAEhBA,EAAY,GAAK,GACbA,EAAY,GAEhBA,EAAY,GAAK,GACbA,EAAY,GAEb/B,IAgGQA,GAAQkB,EAAQb,GAAON,EAAStgB,GAAKoiB,KACjDtB,EAAM,YAGP9gB,GAAKyhB,EAAQW,IAGTX,GAFJ7Q,EAAItF,GAAKmX,EAvQL,EAuQoBnX,GAAKmX,EAtQzB,MAsQ8CnX,EAAImX,IAbHnX,GAAKiV,EAoBpD6B,EAAIxB,EAAMN,GADd+B,EAAa9B,EAAO3P,KAEnBkQ,EAAM,YAGPsB,GAAKC,EAKNI,EAAOd,EAAM3hB,EAAImiB,EADjBF,EAAMZ,EAAOriB,OAAS,EACc,GAARmjB,GAIxBvB,EAAM5gB,EAAIiiB,GAAO3B,EAASkC,GAC7B1B,EAAM,YAGP0B,GAAK5B,EAAM5gB,EAAIiiB,GACfjiB,GAAKiiB,EAGLZ,EAAOtgB,OAAOf,IAAK,EAAGwiB,GAIvB,OAAOjB,EAAWF,GAUnB,SAASve,EAAOkf,GACf,IAAIQ,EACAZ,EACAc,EACAC,EACAF,EACAhf,EACAgb,EACAmE,EACAtX,EACAsF,EACAiS,EAGAN,EAEAO,EACAT,EACAU,EANA1B,EAAS,GAoBb,IARAkB,GAHAP,EAAQb,EAAWa,IAGChjB,OAGpBwjB,EAvUU,IAwUVZ,EAAQ,EACRa,EA1Ua,GA6URhf,EAAI,EAAGA,EAAI8e,IAAe9e,GAC9Bof,EAAeb,EAAMve,IACF,KAClB4d,EAAO/hB,KAAKuhB,EAAmBgC,IAejC,IAXAH,EAAiBC,EAActB,EAAOriB,OAMlC2jB,GACHtB,EAAO/hB,KAzVG,KA6VJojB,EAAiBH,GAAa,CAIpC,IAAK9D,EAAI6B,EAAQ7c,EAAI,EAAGA,EAAI8e,IAAe9e,GAC1Cof,EAAeb,EAAMve,KACD+e,GAAKK,EAAepE,IACvCA,EAAIoE,GAcN,IAPIpE,EAAI+D,EAAI5B,GAAON,EAASsB,IAD5BkB,EAAwBJ,EAAiB,KAExC5B,EAAM,YAGPc,IAAUnD,EAAI+D,GAAKM,EACnBN,EAAI/D,EAEChb,EAAI,EAAGA,EAAI8e,IAAe9e,EAO9B,IANAof,EAAeb,EAAMve,IAEF+e,KAAOZ,EAAQtB,GACjCQ,EAAM,YAGH+B,GAAgBL,EAAG,CAEtB,IAAKI,EAAIhB,EAAOtW,EAAIiV,IAEfqC,GADJhS,EAAItF,GAAKmX,EAlYP,EAkYsBnX,GAAKmX,EAjY3B,MAiYgDnX,EAAImX,IADTnX,GAAKiV,EAKlDwC,EAAUH,EAAIhS,EACdyR,EAAa9B,EAAO3P,EACpByQ,EAAO/hB,KACNuhB,EAAmBW,EAAa5Q,EAAImS,EAAUV,EAAY,KAE3DO,EAAIhC,EAAMmC,EAAUV,GAGrBhB,EAAO/hB,KAAKuhB,EAAmBW,EAAaoB,EAAG,KAC/CH,EAAOd,EAAMC,EAAOkB,EAAuBJ,GAAkBC,GAC7Df,EAAQ,IACNc,IAIFd,IACAY,EAGH,OAAOnB,EAAO1V,KAAK,IA4CpBrG,EAAW,CAMV,QAAW,QAQX,KAAQ,CACP,OAAU6b,EACV,OAAUI,GAEX,OAAUxe,EACV,OAAUD,EACV,QA/BD,SAAiBkf,GAChB,OAAOf,EAAUe,GAAO,SAASnlB,GAChC,OAAO4jB,EAAc/kB,KAAKmB,GACvB,OAASiG,EAAOjG,GAChBA,MA4BJ,UAnDD,SAAmBmlB,GAClB,OAAOf,EAAUe,GAAO,SAASnlB,GAChC,OAAO2jB,EAAc9kB,KAAKmB,GACvBkG,EAAOlG,EAAOtC,MAAM,GAAGoB,eACvBkB,YA4DH,KAFD,aACC,OAAOyI,GACP,8BAngBF,K,6DCID1I,EAAO7C,QAAU,CACfgD,QAAS,CACPK,MAAc,EACd4Q,UAAc,EACdE,QAAc,EACdP,WAAc,YACd/G,SAAc,EAGd2J,aAAc,EAOdsB,OAAQ,OAQRnE,UAAW,KAEXyE,WAAc,KAGhBnL,WAAY,CAEVN,KAAM,GACNrE,MAAO,GACPoE,OAAQ,M,iCChCZ7J,EAAO7C,QAAU,CACfgD,QAAS,CACPK,MAAc,EACd4Q,UAAc,EACdE,QAAc,EACdP,WAAc,YACd/G,SAAc,EAGd2J,aAAc,EAOdsB,OAAQ,OAQRnE,UAAW,KAEXyE,WAAc,IAGhBnL,WAAY,CAEVN,KAAM,CACJO,MAAO,CACL,YACA,QACA,WAIJ5E,MAAO,CACL4E,MAAO,CACL,cAIJR,OAAQ,CACNQ,MAAO,CACL,QAEFE,OAAQ,CACN,gBACA,qB,iCCpDRvK,EAAO7C,QAAU,CACfgD,QAAS,CACPK,MAAc,EACd4Q,UAAc,EACdE,QAAc,EACdP,WAAc,YACd/G,SAAc,EAGd2J,aAAc,EAOdsB,OAAQ,OAQRnE,UAAW,KAEXyE,WAAc,IAGhBnL,WAAY,CAEVN,KAAM,CACJO,MAAO,CACL,YACA,QACA,WAIJ5E,MAAO,CACL4E,MAAO,CACL,aACA,OACA,QACA,UACA,KACA,aACA,WACA,OACA,YACA,cAIJR,OAAQ,CACNQ,MAAO,CACL,WACA,YACA,WACA,SACA,SACA,cACA,QACA,OACA,UACA,QAEFE,OAAQ,CACN,gBACA,WACA","file":"static/js/1.1a027ca1.chunk.js","sourcesContent":["// Utilities\n//\n'use strict';\n\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\n\nfunction isString(obj) { return _class(obj) === '[object String]'; }\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction has(object, key) {\n  return _hasOwnProperty.call(object, key);\n}\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be object');\n    }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\n// Remove element from array and put another array at those position.\n// Useful for some operations with tokens\nfunction arrayReplaceAt(src, pos, newElements) {\n  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isValidEntityCode(c) {\n  /*eslint no-bitwise:0*/\n  // broken sequence\n  if (c >= 0xD800 && c <= 0xDFFF) { return false; }\n  // never used\n  if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }\n  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }\n  // control codes\n  if (c >= 0x00 && c <= 0x08) { return false; }\n  if (c === 0x0B) { return false; }\n  if (c >= 0x0E && c <= 0x1F) { return false; }\n  if (c >= 0x7F && c <= 0x9F) { return false; }\n  // out of range\n  if (c > 0x10FFFF) { return false; }\n  return true;\n}\n\nfunction fromCodePoint(c) {\n  /*eslint no-bitwise:0*/\n  if (c > 0xffff) {\n    c -= 0x10000;\n    var surrogate1 = 0xd800 + (c >> 10),\n        surrogate2 = 0xdc00 + (c & 0x3ff);\n\n    return String.fromCharCode(surrogate1, surrogate2);\n  }\n  return String.fromCharCode(c);\n}\n\n\nvar UNESCAPE_MD_RE  = /\\\\([!\"#$%&'()*+,\\-.\\/:;<=>?@[\\\\\\]^_`{|}~])/g;\nvar ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;\nvar UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');\n\nvar DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;\n\nvar entities = require('./entities');\n\nfunction replaceEntityPattern(match, name) {\n  var code = 0;\n\n  if (has(entities, name)) {\n    return entities[name];\n  }\n\n  if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {\n    code = name[1].toLowerCase() === 'x' ?\n      parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);\n\n    if (isValidEntityCode(code)) {\n      return fromCodePoint(code);\n    }\n  }\n\n  return match;\n}\n\n/*function replaceEntities(str) {\n  if (str.indexOf('&') < 0) { return str; }\n\n  return str.replace(ENTITY_RE, replaceEntityPattern);\n}*/\n\nfunction unescapeMd(str) {\n  if (str.indexOf('\\\\') < 0) { return str; }\n  return str.replace(UNESCAPE_MD_RE, '$1');\n}\n\nfunction unescapeAll(str) {\n  if (str.indexOf('\\\\') < 0 && str.indexOf('&') < 0) { return str; }\n\n  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {\n    if (escaped) { return escaped; }\n    return replaceEntityPattern(match, entity);\n  });\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar HTML_ESCAPE_TEST_RE = /[&<>\"]/;\nvar HTML_ESCAPE_REPLACE_RE = /[&<>\"]/g;\nvar HTML_REPLACEMENTS = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;'\n};\n\nfunction replaceUnsafeChar(ch) {\n  return HTML_REPLACEMENTS[ch];\n}\n\nfunction escapeHtml(str) {\n  if (HTML_ESCAPE_TEST_RE.test(str)) {\n    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);\n  }\n  return str;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar REGEXP_ESCAPE_RE = /[.?*+^$[\\]\\\\(){}|-]/g;\n\nfunction escapeRE(str) {\n  return str.replace(REGEXP_ESCAPE_RE, '\\\\$&');\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction isSpace(code) {\n  switch (code) {\n    case 0x09:\n    case 0x20:\n      return true;\n  }\n  return false;\n}\n\n// Zs (unicode class) || [\\t\\f\\v\\r\\n]\nfunction isWhiteSpace(code) {\n  if (code >= 0x2000 && code <= 0x200A) { return true; }\n  switch (code) {\n    case 0x09: // \\t\n    case 0x0A: // \\n\n    case 0x0B: // \\v\n    case 0x0C: // \\f\n    case 0x0D: // \\r\n    case 0x20:\n    case 0xA0:\n    case 0x1680:\n    case 0x202F:\n    case 0x205F:\n    case 0x3000:\n      return true;\n  }\n  return false;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n/*eslint-disable max-len*/\nvar UNICODE_PUNCT_RE = require('uc.micro/categories/P/regex');\n\n// Currently without astral characters support.\nfunction isPunctChar(ch) {\n  return UNICODE_PUNCT_RE.test(ch);\n}\n\n\n// Markdown ASCII punctuation characters.\n//\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\n//\n// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.\n//\nfunction isMdAsciiPunct(ch) {\n  switch (ch) {\n    case 0x21/* ! */:\n    case 0x22/* \" */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x27/* ' */:\n    case 0x28/* ( */:\n    case 0x29/* ) */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2C/* , */:\n    case 0x2D/* - */:\n    case 0x2E/* . */:\n    case 0x2F/* / */:\n    case 0x3A/* : */:\n    case 0x3B/* ; */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x3F/* ? */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7C/* | */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\n// Hepler to unify [reference labels].\n//\nfunction normalizeReference(str) {\n  // Trim and collapse whitespace\n  //\n  str = str.trim().replace(/\\s+/g, ' ');\n\n  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug\n  // fixed in v12 (couldn't find any details).\n  //\n  // So treat this one as a special case\n  // (remove this when node v10 is no longer supported).\n  //\n  if ('ẞ'.toLowerCase() === 'Ṿ') {\n    str = str.replace(/ẞ/g, 'ß');\n  }\n\n  // .toLowerCase().toUpperCase() should get rid of all differences\n  // between letter variants.\n  //\n  // Simple .toLowerCase() doesn't normalize 125 code points correctly,\n  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:\n  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently\n  // uppercased versions).\n  //\n  // Here's an example showing how it happens. Lets take greek letter omega:\n  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)\n  //\n  // Unicode entries:\n  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;\n  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398\n  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398\n  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;\n  //\n  // Case-insensitive comparison should treat all of them as equivalent.\n  //\n  // But .toLowerCase() doesn't change ϑ (it's already lowercase),\n  // and .toUpperCase() doesn't change ϴ (already uppercase).\n  //\n  // Applying first lower then upper case normalizes any character:\n  // '\\u0398\\u03f4\\u03b8\\u03d1'.toLowerCase().toUpperCase() === '\\u0398\\u0398\\u0398\\u0398'\n  //\n  // Note: this is equivalent to unicode case folding; unicode normalization\n  // is a different step that is not required here.\n  //\n  // Final result should be uppercased, because it's later stored in an object\n  // (this avoid a conflict with Object.prototype members,\n  // most notably, `__proto__`)\n  //\n  return str.toLowerCase().toUpperCase();\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n// Re-export libraries commonly used in both markdown-it and its plugins,\n// so plugins won't have to depend on them explicitly, which reduces their\n// bundled size (e.g. a browser build).\n//\nexports.lib                 = {};\nexports.lib.mdurl           = require('mdurl');\nexports.lib.ucmicro         = require('uc.micro');\n\nexports.assign              = assign;\nexports.isString            = isString;\nexports.has                 = has;\nexports.unescapeMd          = unescapeMd;\nexports.unescapeAll         = unescapeAll;\nexports.isValidEntityCode   = isValidEntityCode;\nexports.fromCodePoint       = fromCodePoint;\n// exports.replaceEntities     = replaceEntities;\nexports.escapeHtml          = escapeHtml;\nexports.arrayReplaceAt      = arrayReplaceAt;\nexports.isSpace             = isSpace;\nexports.isWhiteSpace        = isWhiteSpace;\nexports.isMdAsciiPunct      = isMdAsciiPunct;\nexports.isPunctChar         = isPunctChar;\nexports.escapeRE            = escapeRE;\nexports.normalizeReference  = normalizeReference;\n","'use strict';\n\n\nmodule.exports = require('./lib/');\n","/**\n * Truncate HTML string and keep tag safe.\n *\n * @method truncate\n * @param {String} string string needs to be truncated\n * @param {Number} maxLength length of truncated string\n * @param {Object} options (optional)\n * @param {Boolean} [options.keepImageTag] flag to specify if keep image tag, false by default\n * @param {Boolean} [options.truncateLastWord] truncates last word, true by default\n * @param {Number} [options.slop] tolerance when options.truncateLastWord is false before we give up and just truncate at the maxLength position, 10 by default (but not greater than maxLength)\n * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default\n * @return {String} truncated string\n */\nfunction truncate(string, maxLength, options) {\n    var EMPTY_OBJECT = {},\n        EMPTY_STRING = '',\n        DEFAULT_TRUNCATE_SYMBOL = '...',\n        DEFAULT_SLOP = 10 > maxLength ? maxLength : 10,\n        EXCLUDE_TAGS = ['img', 'br'],   // non-closed tags\n        items = [],                     // stack for saving tags\n        total = 0,                      // record how many characters we traced so far\n        content = EMPTY_STRING,         // truncated text storage\n        KEY_VALUE_REGEX = '([\\\\w|-]+\\\\s*(=\\\\s*\"[^\"]*\")?\\\\s*)*',\n        IS_CLOSE_REGEX = '\\\\s*\\\\/?\\\\s*',\n        CLOSE_REGEX = '\\\\s*\\\\/\\\\s*',\n        SELF_CLOSE_REGEX = new RegExp('<\\\\/?\\\\w+\\\\s*' + KEY_VALUE_REGEX + CLOSE_REGEX + '>'),\n        HTML_TAG_REGEX = new RegExp('<\\\\/?\\\\w+\\\\s*' + KEY_VALUE_REGEX + IS_CLOSE_REGEX + '>'),\n        URL_REGEX = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w\\-]+@([\\w][\\w\\-]+\\.)+[a-zA-Z]{2,3})/g, // Simple regexp\n        IMAGE_TAG_REGEX = new RegExp('<img\\\\s*' + KEY_VALUE_REGEX + IS_CLOSE_REGEX + '>'),\n        WORD_BREAK_REGEX = new RegExp('\\\\W+', 'g'),\n        matches = true,\n        result,\n        index,\n        tail,\n        tag,\n        selfClose;\n\n    /**\n     * Remove image tag\n     *\n     * @private\n     * @method _removeImageTag\n     * @param {String} string not-yet-processed string\n     * @return {String} string without image tags\n     */\n    function _removeImageTag(string) {\n        var match = IMAGE_TAG_REGEX.exec(string),\n            index,\n            len;\n\n        if (!match) {\n            return string;\n        }\n\n        index = match.index;\n        len = match[0].length;\n\n        return string.substring(0, index) + string.substring(index + len);\n    }\n\n    /**\n     * Dump all close tags and append to truncated content while reaching upperbound\n     *\n     * @private\n     * @method _dumpCloseTag\n     * @param {String[]} tags a list of tags which should be closed\n     * @return {String} well-formatted html\n     */\n    function _dumpCloseTag(tags) {\n        var html = '';\n\n        tags.reverse().forEach(function (tag, index) {\n            // dump non-excluded tags only\n            if (-1 === EXCLUDE_TAGS.indexOf(tag)) {\n                html += '</' + tag + '>';\n            }\n        });\n\n        return html;\n    }\n\n    /**\n     * Process tag string to get pure tag name\n     *\n     * @private\n     * @method _getTag\n     * @param {String} string original html\n     * @return {String} tag name\n     */\n    function _getTag(string) {\n        var tail = string.indexOf(' ');\n\n        // TODO:\n        // we have to figure out how to handle non-well-formatted HTML case\n        if (-1 === tail) {\n            tail = string.indexOf('>');\n            if (-1 === tail) {\n                throw new Error('HTML tag is not well-formed : ' + string);\n            }\n        }\n\n        return string.substring(1, tail);\n    }\n\n\n    /**\n     * Get the end position for String#substring()\n     *\n     * If options.truncateLastWord is FALSE, we try to the end position up to\n     * options.slop characters to avoid breaking in the middle of a word.\n     *\n     * @private\n     * @method _getEndPosition\n     * @param {String} string original html\n     * @param {Number} tailPos (optional) provided to avoid extending the slop into trailing HTML tag\n     * @return {Number} maxLength\n     */\n    function _getEndPosition (string, tailPos) {\n        var defaultPos = maxLength - total,\n            position = defaultPos,\n            isShort = defaultPos < options.slop,\n            slopPos = isShort ? defaultPos : options.slop - 1,\n            substr,\n            startSlice = isShort ? 0 : defaultPos - options.slop,\n            endSlice = tailPos || (defaultPos + options.slop),\n            result;\n\n        if (!options.truncateLastWord) {\n\n            substr = string.slice(startSlice, endSlice);\n\n            if (tailPos && substr.length <= tailPos) {\n                position = substr.length;\n            }\n            else {\n                while ((result = WORD_BREAK_REGEX.exec(substr)) !== null) {\n                    // a natural break position before the hard break position\n                    if (result.index < slopPos) {\n                        position = defaultPos - (slopPos - result.index);\n                        // keep seeking closer to the hard break position\n                        // unless a natural break is at position 0\n                        if (result.index === 0 && defaultPos <= 1) break;\n                    }\n                    // a natural break position exactly at the hard break position\n                    else if (result.index === slopPos) {\n                        position = defaultPos;\n                        break; // seek no more\n                    }\n                    // a natural break position after the hard break position\n                    else {\n                        position = defaultPos + (result.index - slopPos);\n                        break;  // seek no more\n                    }\n                }\n            }\n            if (string.charAt(position - 1).match(/\\s$/)) position--;\n        }\n        return position;\n    }\n\n    options = options || EMPTY_OBJECT;\n    options.ellipsis = (undefined !== options.ellipsis) ? options.ellipsis : DEFAULT_TRUNCATE_SYMBOL;\n    options.truncateLastWord = (undefined !== options.truncateLastWord) ? options.truncateLastWord : true;\n    options.slop = (undefined !== options.slop) ? options.slop : DEFAULT_SLOP;\n\n    while (matches) {\n        matches = HTML_TAG_REGEX.exec(string);\n\n        if (!matches) {\n            if (total >= maxLength) { break; }\n\n            matches = URL_REGEX.exec(string);\n            if (!matches || matches.index >= maxLength) {\n                content += string.substring(0, _getEndPosition(string));\n                break;\n            }\n\n            while (matches) {\n                result = matches[0];\n                index = matches.index;\n                content += string.substring(0, (index + result.length) - total);\n                string = string.substring(index + result.length);\n                matches = URL_REGEX.exec(string);\n            }\n            break;\n        }\n\n        result = matches[0];\n        index = matches.index;\n\n        if (total + index > maxLength) {\n            // exceed given `maxLength`, dump everything to clear stack\n            content += string.substring(0, _getEndPosition(string, index));\n            break;\n        } else {\n            total += index;\n            content += string.substring(0, index);\n        }\n\n        if ('/' === result[1]) {\n            // move out open tag\n            items.pop();\n            selfClose=null;\n        } else {\n            selfClose = SELF_CLOSE_REGEX.exec(result);\n            if (!selfClose) {\n                tag = _getTag(result);\n\n                items.push(tag);\n            }\n        }\n\n        if (selfClose) {\n            content += selfClose[0];\n        } else {\n            content += result;\n        }\n        string = string.substring(index + result.length);\n    }\n\n    if (string.length > maxLength - total && options.ellipsis) {\n        content += options.ellipsis;\n    }\n    content += _dumpCloseTag(items);\n\n    if (!options.keepImageTag) {\n        content = _removeImageTag(content);\n    }\n\n    return content;\n}\n\nmodule.exports = truncate;\n","module.exports=/[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4E\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDF55-\\uDF59]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDC4B-\\uDC4F\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDE97-\\uDE9A]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD83A[\\uDD5E\\uDD5F]/","/**\n * class Ruler\n *\n * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and\n * [[MarkdownIt#inline]] to manage sequences of functions (rules):\n *\n * - keep rules in defined order\n * - assign the name to each rule\n * - enable/disable rules\n * - add/replace rules\n * - allow assign rules to additional named chains (in the same)\n * - cacheing lists of active rules\n *\n * You will not need use this class directly until write plugins. For simple\n * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and\n * [[MarkdownIt.use]].\n **/\n'use strict';\n\n\n/**\n * new Ruler()\n **/\nfunction Ruler() {\n  // List of added rules. Each element is:\n  //\n  // {\n  //   name: XXX,\n  //   enabled: Boolean,\n  //   fn: Function(),\n  //   alt: [ name2, name3 ]\n  // }\n  //\n  this.__rules__ = [];\n\n  // Cached rule chains.\n  //\n  // First level - chain name, '' for default.\n  // Second level - diginal anchor for fast filtering by charcodes.\n  //\n  this.__cache__ = null;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Helper methods, should not be used directly\n\n\n// Find rule index by name\n//\nRuler.prototype.__find__ = function (name) {\n  for (var i = 0; i < this.__rules__.length; i++) {\n    if (this.__rules__[i].name === name) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n\n// Build rules lookup cache\n//\nRuler.prototype.__compile__ = function () {\n  var self = this;\n  var chains = [ '' ];\n\n  // collect unique names\n  self.__rules__.forEach(function (rule) {\n    if (!rule.enabled) { return; }\n\n    rule.alt.forEach(function (altName) {\n      if (chains.indexOf(altName) < 0) {\n        chains.push(altName);\n      }\n    });\n  });\n\n  self.__cache__ = {};\n\n  chains.forEach(function (chain) {\n    self.__cache__[chain] = [];\n    self.__rules__.forEach(function (rule) {\n      if (!rule.enabled) { return; }\n\n      if (chain && rule.alt.indexOf(chain) < 0) { return; }\n\n      self.__cache__[chain].push(rule.fn);\n    });\n  });\n};\n\n\n/**\n * Ruler.at(name, fn [, options])\n * - name (String): rule name to replace.\n * - fn (Function): new rule function.\n * - options (Object): new rule options (not mandatory).\n *\n * Replace rule by name with new function & options. Throws error if name not\n * found.\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * Replace existing typographer replacement rule with new one:\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.at('replacements', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.at = function (name, fn, options) {\n  var index = this.__find__(name);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + name); }\n\n  this.__rules__[index].fn = fn;\n  this.__rules__[index].alt = opt.alt || [];\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.before(beforeName, ruleName, fn [, options])\n * - beforeName (String): new rule will be added before this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain before one with given name. See also\n * [[Ruler.after]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.before = function (beforeName, ruleName, fn, options) {\n  var index = this.__find__(beforeName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }\n\n  this.__rules__.splice(index, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.after(afterName, ruleName, fn [, options])\n * - afterName (String): new rule will be added after this one.\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Add new rule to chain after one with given name. See also\n * [[Ruler.before]], [[Ruler.push]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.inline.ruler.after('text', 'my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.after = function (afterName, ruleName, fn, options) {\n  var index = this.__find__(afterName);\n  var opt = options || {};\n\n  if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }\n\n  this.__rules__.splice(index + 1, 0, {\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n/**\n * Ruler.push(ruleName, fn [, options])\n * - ruleName (String): name of added rule.\n * - fn (Function): rule function.\n * - options (Object): rule options (not mandatory).\n *\n * Push new rule to the end of chain. See also\n * [[Ruler.before]], [[Ruler.after]].\n *\n * ##### Options:\n *\n * - __alt__ - array with names of \"alternate\" chains.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')();\n *\n * md.core.ruler.push('my_rule', function replace(state) {\n *   //...\n * });\n * ```\n **/\nRuler.prototype.push = function (ruleName, fn, options) {\n  var opt = options || {};\n\n  this.__rules__.push({\n    name: ruleName,\n    enabled: true,\n    fn: fn,\n    alt: opt.alt || []\n  });\n\n  this.__cache__ = null;\n};\n\n\n/**\n * Ruler.enable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to enable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.disable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.enable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and enable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = true;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.enableOnly(list [, ignoreInvalid])\n * - list (String|Array): list of rule names to enable (whitelist).\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable rules with given names, and disable everything else. If any rule name\n * not found - throw Error. Errors can be disabled by second param.\n *\n * See also [[Ruler.disable]], [[Ruler.enable]].\n **/\nRuler.prototype.enableOnly = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  this.__rules__.forEach(function (rule) { rule.enabled = false; });\n\n  this.enable(list, ignoreInvalid);\n};\n\n\n/**\n * Ruler.disable(list [, ignoreInvalid]) -> Array\n * - list (String|Array): list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Disable rules with given names. If any rule name not found - throw Error.\n * Errors can be disabled by second param.\n *\n * Returns list of found rule names (if no exception happened).\n *\n * See also [[Ruler.enable]], [[Ruler.enableOnly]].\n **/\nRuler.prototype.disable = function (list, ignoreInvalid) {\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  var result = [];\n\n  // Search by name and disable\n  list.forEach(function (name) {\n    var idx = this.__find__(name);\n\n    if (idx < 0) {\n      if (ignoreInvalid) { return; }\n      throw new Error('Rules manager: invalid rule name ' + name);\n    }\n    this.__rules__[idx].enabled = false;\n    result.push(name);\n  }, this);\n\n  this.__cache__ = null;\n  return result;\n};\n\n\n/**\n * Ruler.getRules(chainName) -> Array\n *\n * Return array of active functions (rules) for given chain name. It analyzes\n * rules configuration, compiles caches if not exists and returns result.\n *\n * Default chain name is `''` (empty string). It can't be skipped. That's\n * done intentionally, to keep signature monomorphic for high speed.\n **/\nRuler.prototype.getRules = function (chainName) {\n  if (this.__cache__ === null) {\n    this.__compile__();\n  }\n\n  // Chain can be empty, if rules disabled. But we still have to return Array.\n  return this.__cache__[chainName] || [];\n};\n\nmodule.exports = Ruler;\n","// Token class\n\n'use strict';\n\n\n/**\n * class Token\n **/\n\n/**\n * new Token(type, tag, nesting)\n *\n * Create new token and fill passed properties.\n **/\nfunction Token(type, tag, nesting) {\n  /**\n   * Token#type -> String\n   *\n   * Type of the token (string, e.g. \"paragraph_open\")\n   **/\n  this.type     = type;\n\n  /**\n   * Token#tag -> String\n   *\n   * html tag name, e.g. \"p\"\n   **/\n  this.tag      = tag;\n\n  /**\n   * Token#attrs -> Array\n   *\n   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`\n   **/\n  this.attrs    = null;\n\n  /**\n   * Token#map -> Array\n   *\n   * Source map info. Format: `[ line_begin, line_end ]`\n   **/\n  this.map      = null;\n\n  /**\n   * Token#nesting -> Number\n   *\n   * Level change (number in {-1, 0, 1} set), where:\n   *\n   * -  `1` means the tag is opening\n   * -  `0` means the tag is self-closing\n   * - `-1` means the tag is closing\n   **/\n  this.nesting  = nesting;\n\n  /**\n   * Token#level -> Number\n   *\n   * nesting level, the same as `state.level`\n   **/\n  this.level    = 0;\n\n  /**\n   * Token#children -> Array\n   *\n   * An array of child nodes (inline and img tokens)\n   **/\n  this.children = null;\n\n  /**\n   * Token#content -> String\n   *\n   * In a case of self-closing tag (code, html, fence, etc.),\n   * it has contents of this tag.\n   **/\n  this.content  = '';\n\n  /**\n   * Token#markup -> String\n   *\n   * '*' or '_' for emphasis, fence string for fence, etc.\n   **/\n  this.markup   = '';\n\n  /**\n   * Token#info -> String\n   *\n   * fence infostring\n   **/\n  this.info     = '';\n\n  /**\n   * Token#meta -> Object\n   *\n   * A place for plugins to store an arbitrary data\n   **/\n  this.meta     = null;\n\n  /**\n   * Token#block -> Boolean\n   *\n   * True for block-level tokens, false for inline tokens.\n   * Used in renderer to calculate line breaks\n   **/\n  this.block    = false;\n\n  /**\n   * Token#hidden -> Boolean\n   *\n   * If it's true, ignore this element when rendering. Used for tight lists\n   * to hide paragraphs.\n   **/\n  this.hidden   = false;\n}\n\n\n/**\n * Token.attrIndex(name) -> Number\n *\n * Search attribute index by name.\n **/\nToken.prototype.attrIndex = function attrIndex(name) {\n  var attrs, i, len;\n\n  if (!this.attrs) { return -1; }\n\n  attrs = this.attrs;\n\n  for (i = 0, len = attrs.length; i < len; i++) {\n    if (attrs[i][0] === name) { return i; }\n  }\n  return -1;\n};\n\n\n/**\n * Token.attrPush(attrData)\n *\n * Add `[ name, value ]` attribute to list. Init attrs if necessary\n **/\nToken.prototype.attrPush = function attrPush(attrData) {\n  if (this.attrs) {\n    this.attrs.push(attrData);\n  } else {\n    this.attrs = [ attrData ];\n  }\n};\n\n\n/**\n * Token.attrSet(name, value)\n *\n * Set `name` attribute to `value`. Override old value if exists.\n **/\nToken.prototype.attrSet = function attrSet(name, value) {\n  var idx = this.attrIndex(name),\n      attrData = [ name, value ];\n\n  if (idx < 0) {\n    this.attrPush(attrData);\n  } else {\n    this.attrs[idx] = attrData;\n  }\n};\n\n\n/**\n * Token.attrGet(name)\n *\n * Get the value of attribute `name`, or null if it does not exist.\n **/\nToken.prototype.attrGet = function attrGet(name) {\n  var idx = this.attrIndex(name), value = null;\n  if (idx >= 0) {\n    value = this.attrs[idx][1];\n  }\n  return value;\n};\n\n\n/**\n * Token.attrJoin(name, value)\n *\n * Join value to existing attribute via space. Or create new attribute if not\n * exists. Useful to operate with token classes.\n **/\nToken.prototype.attrJoin = function attrJoin(name, value) {\n  var idx = this.attrIndex(name);\n\n  if (idx < 0) {\n    this.attrPush([ name, value ]);\n  } else {\n    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;\n  }\n};\n\n\nmodule.exports = Token;\n","// HTML5 entities map: { name -> utf16string }\n//\n'use strict';\n\n/*eslint quotes:0*/\nmodule.exports = require('entities/lib/maps/entities.json');\n","'use strict';\n\n\nmodule.exports.encode = require('./encode');\nmodule.exports.decode = require('./decode');\nmodule.exports.format = require('./format');\nmodule.exports.parse  = require('./parse');\n","module.exports=/[\\0-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/","module.exports=/[\\0-\\x1F\\x7F-\\x9F]/","module.exports=/[ \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/","// Regexps to match html elements\n\n'use strict';\n\nvar attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';\n\nvar unquoted      = '[^\"\\'=<>`\\\\x00-\\\\x20]+';\nvar single_quoted = \"'[^']*'\";\nvar double_quoted = '\"[^\"]*\"';\n\nvar attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';\n\nvar attribute   = '(?:\\\\s+' + attr_name + '(?:\\\\s*=\\\\s*' + attr_value + ')?)';\n\nvar open_tag    = '<[A-Za-z][A-Za-z0-9\\\\-]*' + attribute + '*\\\\s*\\\\/?>';\n\nvar close_tag   = '<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>';\nvar comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';\nvar processing  = '<[?].*?[?]>';\nvar declaration = '<![A-Z]+\\\\s+[^>]*>';\nvar cdata       = '<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>';\n\nvar HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +\n                        '|' + processing + '|' + declaration + '|' + cdata + ')');\nvar HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');\n\nmodule.exports.HTML_TAG_RE = HTML_TAG_RE;\nmodule.exports.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE;\n","// ~~strike through~~\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function strikethrough(state, silent) {\n  var i, scanned, token, len, ch,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x7E/* ~ */) { return false; }\n\n  scanned = state.scanDelims(state.pos, true);\n  len = scanned.length;\n  ch = String.fromCharCode(marker);\n\n  if (len < 2) { return false; }\n\n  if (len % 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch;\n    len--;\n  }\n\n  for (i = 0; i < len; i += 2) {\n    token         = state.push('text', '', 0);\n    token.content = ch + ch;\n\n    state.delimiters.push({\n      marker: marker,\n      length: 0, // disable \"rule of 3\" length checks meant for emphasis\n      jump:   i,\n      token:  state.tokens.length - 1,\n      end:    -1,\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i, j,\n      startDelim,\n      endDelim,\n      token,\n      loneMarkers = [],\n      max = delimiters.length;\n\n  for (i = 0; i < max; i++) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x7E/* ~ */) {\n      continue;\n    }\n\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    token         = state.tokens[startDelim.token];\n    token.type    = 's_open';\n    token.tag     = 's';\n    token.nesting = 1;\n    token.markup  = '~~';\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = 's_close';\n    token.tag     = 's';\n    token.nesting = -1;\n    token.markup  = '~~';\n    token.content = '';\n\n    if (state.tokens[endDelim.token - 1].type === 'text' &&\n        state.tokens[endDelim.token - 1].content === '~') {\n\n      loneMarkers.push(endDelim.token - 1);\n    }\n  }\n\n  // If a marker sequence has an odd number of characters, it's splitted\n  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the\n  // start of the sequence.\n  //\n  // So, we have to move all those markers after subsequent s_close tags.\n  //\n  while (loneMarkers.length) {\n    i = loneMarkers.pop();\n    j = i + 1;\n\n    while (j < state.tokens.length && state.tokens[j].type === 's_close') {\n      j++;\n    }\n\n    j--;\n\n    if (i !== j) {\n      token = state.tokens[j];\n      state.tokens[j] = state.tokens[i];\n      state.tokens[i] = token;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function strikethrough(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Process *this* and _that_\n//\n'use strict';\n\n\n// Insert each marker as a separate text token, and add it to delimiter list\n//\nmodule.exports.tokenize = function emphasis(state, silent) {\n  var i, scanned, token,\n      start = state.pos,\n      marker = state.src.charCodeAt(start);\n\n  if (silent) { return false; }\n\n  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }\n\n  scanned = state.scanDelims(state.pos, marker === 0x2A);\n\n  for (i = 0; i < scanned.length; i++) {\n    token         = state.push('text', '', 0);\n    token.content = String.fromCharCode(marker);\n\n    state.delimiters.push({\n      // Char code of the starting marker (number).\n      //\n      marker: marker,\n\n      // Total length of these series of delimiters.\n      //\n      length: scanned.length,\n\n      // An amount of characters before this one that's equivalent to\n      // current one. In plain English: if this delimiter does not open\n      // an emphasis, neither do previous `jump` characters.\n      //\n      // Used to skip sequences like \"*****\" in one step, for 1st asterisk\n      // value will be 0, for 2nd it's 1 and so on.\n      //\n      jump:   i,\n\n      // A position of the token this delimiter corresponds to.\n      //\n      token:  state.tokens.length - 1,\n\n      // If this delimiter is matched as a valid opener, `end` will be\n      // equal to its position, otherwise it's `-1`.\n      //\n      end:    -1,\n\n      // Boolean flags that determine if this delimiter could open or close\n      // an emphasis.\n      //\n      open:   scanned.can_open,\n      close:  scanned.can_close\n    });\n  }\n\n  state.pos += scanned.length;\n\n  return true;\n};\n\n\nfunction postProcess(state, delimiters) {\n  var i,\n      startDelim,\n      endDelim,\n      token,\n      ch,\n      isStrong,\n      max = delimiters.length;\n\n  for (i = max - 1; i >= 0; i--) {\n    startDelim = delimiters[i];\n\n    if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {\n      continue;\n    }\n\n    // Process only opening markers\n    if (startDelim.end === -1) {\n      continue;\n    }\n\n    endDelim = delimiters[startDelim.end];\n\n    // If the previous delimiter has the same marker and is adjacent to this one,\n    // merge those into one strong delimiter.\n    //\n    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`\n    //\n    isStrong = i > 0 &&\n               delimiters[i - 1].end === startDelim.end + 1 &&\n               delimiters[i - 1].token === startDelim.token - 1 &&\n               delimiters[startDelim.end + 1].token === endDelim.token + 1 &&\n               delimiters[i - 1].marker === startDelim.marker;\n\n    ch = String.fromCharCode(startDelim.marker);\n\n    token         = state.tokens[startDelim.token];\n    token.type    = isStrong ? 'strong_open' : 'em_open';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = 1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    token         = state.tokens[endDelim.token];\n    token.type    = isStrong ? 'strong_close' : 'em_close';\n    token.tag     = isStrong ? 'strong' : 'em';\n    token.nesting = -1;\n    token.markup  = isStrong ? ch + ch : ch;\n    token.content = '';\n\n    if (isStrong) {\n      state.tokens[delimiters[i - 1].token].content = '';\n      state.tokens[delimiters[startDelim.end + 1].token].content = '';\n      i--;\n    }\n  }\n}\n\n\n// Walk through delimiter list and replace text tokens with tags\n//\nmodule.exports.postProcess = function emphasis(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  postProcess(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      postProcess(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Main parser class\n\n'use strict';\n\n\nvar utils        = require('./common/utils');\nvar helpers      = require('./helpers');\nvar Renderer     = require('./renderer');\nvar ParserCore   = require('./parser_core');\nvar ParserBlock  = require('./parser_block');\nvar ParserInline = require('./parser_inline');\nvar LinkifyIt    = require('linkify-it');\nvar mdurl        = require('mdurl');\nvar punycode     = require('punycode');\n\n\nvar config = {\n  'default': require('./presets/default'),\n  zero: require('./presets/zero'),\n  commonmark: require('./presets/commonmark')\n};\n\n////////////////////////////////////////////////////////////////////////////////\n//\n// This validator can prohibit more than really needed to prevent XSS. It's a\n// tradeoff to keep code simple and to be secure by default.\n//\n// If you need different setup - override validator method as you wish. Or\n// replace it with dummy function and use external sanitizer.\n//\n\nvar BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;\nvar GOOD_DATA_RE = /^data:image\\/(gif|png|jpeg|webp);/;\n\nfunction validateLink(url) {\n  // url should be normalized at this point, and existing entities are decoded\n  var str = url.trim().toLowerCase();\n\n  return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];\n\nfunction normalizeLink(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toASCII(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.encode(mdurl.format(parsed));\n}\n\nfunction normalizeLinkText(url) {\n  var parsed = mdurl.parse(url, true);\n\n  if (parsed.hostname) {\n    // Encode hostnames in urls like:\n    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`\n    //\n    // We don't encode unknown schemas, because it's likely that we encode\n    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)\n    //\n    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {\n      try {\n        parsed.hostname = punycode.toUnicode(parsed.hostname);\n      } catch (er) { /**/ }\n    }\n  }\n\n  return mdurl.decode(mdurl.format(parsed));\n}\n\n\n/**\n * class MarkdownIt\n *\n * Main parser/renderer class.\n *\n * ##### Usage\n *\n * ```javascript\n * // node.js, \"classic\" way:\n * var MarkdownIt = require('markdown-it'),\n *     md = new MarkdownIt();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // node.js, the same, but with sugar:\n * var md = require('markdown-it')();\n * var result = md.render('# markdown-it rulezz!');\n *\n * // browser without AMD, added to \"window\" on script load\n * // Note, there are no dash.\n * var md = window.markdownit();\n * var result = md.render('# markdown-it rulezz!');\n * ```\n *\n * Single line rendering, without paragraph wrap:\n *\n * ```javascript\n * var md = require('markdown-it')();\n * var result = md.renderInline('__markdown-it__ rulezz!');\n * ```\n **/\n\n/**\n * new MarkdownIt([presetName, options])\n * - presetName (String): optional, `commonmark` / `zero`\n * - options (Object)\n *\n * Creates parser instanse with given config. Can be called without `new`.\n *\n * ##### presetName\n *\n * MarkdownIt provides named presets as a convenience to quickly\n * enable/disable active syntax rules and options for common use cases.\n *\n * - [\"commonmark\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -\n *   configures parser to strict [CommonMark](http://commonmark.org/) mode.\n * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -\n *   similar to GFM, used when no preset name given. Enables all available rules,\n *   but still without html, typographer & autolinker.\n * - [\"zero\"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -\n *   all rules disabled. Useful to quickly setup your config via `.enable()`.\n *   For example, when you need only `bold` and `italic` markup and nothing else.\n *\n * ##### options:\n *\n * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!\n *   That's not safe! You may need external sanitizer to protect output from XSS.\n *   It's better to extend features via plugins, instead of enabling HTML.\n * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags\n *   (`<br />`). This is needed only for full CommonMark compatibility. In real\n *   world you will need HTML output.\n * - __breaks__ - `false`. Set `true` to convert `\\n` in paragraphs into `<br>`.\n * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.\n *   Can be useful for external highlighters.\n * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.\n * - __typographer__  - `false`. Set `true` to enable [some language-neutral\n *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +\n *   quotes beautification (smartquotes).\n * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement\n *   pairs, when typographer enabled and smartquotes on. For example, you can\n *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and\n *   `['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›']` for French (including nbsp).\n * - __highlight__ - `null`. Highlighter function for fenced code blocks.\n *   Highlighter `function (str, lang)` should return escaped HTML. It can also\n *   return empty string if the source was not changed and should be escaped\n *   externaly. If result starts with <pre... internal wrapper is skipped.\n *\n * ##### Example\n *\n * ```javascript\n * // commonmark mode\n * var md = require('markdown-it')('commonmark');\n *\n * // default mode\n * var md = require('markdown-it')();\n *\n * // enable everything\n * var md = require('markdown-it')({\n *   html: true,\n *   linkify: true,\n *   typographer: true\n * });\n * ```\n *\n * ##### Syntax highlighting\n *\n * ```js\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return hljs.highlight(lang, str, true).value;\n *       } catch (__) {}\n *     }\n *\n *     return ''; // use external default escaping\n *   }\n * });\n * ```\n *\n * Or with full wrapper override (if you need assign class to `<pre>`):\n *\n * ```javascript\n * var hljs = require('highlight.js') // https://highlightjs.org/\n *\n * // Actual default values\n * var md = require('markdown-it')({\n *   highlight: function (str, lang) {\n *     if (lang && hljs.getLanguage(lang)) {\n *       try {\n *         return '<pre class=\"hljs\"><code>' +\n *                hljs.highlight(lang, str, true).value +\n *                '</code></pre>';\n *       } catch (__) {}\n *     }\n *\n *     return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n *   }\n * });\n * ```\n *\n **/\nfunction MarkdownIt(presetName, options) {\n  if (!(this instanceof MarkdownIt)) {\n    return new MarkdownIt(presetName, options);\n  }\n\n  if (!options) {\n    if (!utils.isString(presetName)) {\n      options = presetName || {};\n      presetName = 'default';\n    }\n  }\n\n  /**\n   * MarkdownIt#inline -> ParserInline\n   *\n   * Instance of [[ParserInline]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.inline = new ParserInline();\n\n  /**\n   * MarkdownIt#block -> ParserBlock\n   *\n   * Instance of [[ParserBlock]]. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.block = new ParserBlock();\n\n  /**\n   * MarkdownIt#core -> Core\n   *\n   * Instance of [[Core]] chain executor. You may need it to add new rules when\n   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and\n   * [[MarkdownIt.enable]].\n   **/\n  this.core = new ParserCore();\n\n  /**\n   * MarkdownIt#renderer -> Renderer\n   *\n   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering\n   * rules for new token types, generated by plugins.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * function myToken(tokens, idx, options, env, self) {\n   *   //...\n   *   return result;\n   * };\n   *\n   * md.renderer.rules['my_token'] = myToken\n   * ```\n   *\n   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).\n   **/\n  this.renderer = new Renderer();\n\n  /**\n   * MarkdownIt#linkify -> LinkifyIt\n   *\n   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.\n   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)\n   * rule.\n   **/\n  this.linkify = new LinkifyIt();\n\n  /**\n   * MarkdownIt#validateLink(url) -> Boolean\n   *\n   * Link validation function. CommonMark allows too much in links. By default\n   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas\n   * except some embedded image types.\n   *\n   * You can change this behaviour:\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   * // enable everything\n   * md.validateLink = function () { return true; }\n   * ```\n   **/\n  this.validateLink = validateLink;\n\n  /**\n   * MarkdownIt#normalizeLink(url) -> String\n   *\n   * Function used to encode link url to a machine-readable format,\n   * which includes url-encoding, punycode, etc.\n   **/\n  this.normalizeLink = normalizeLink;\n\n  /**\n   * MarkdownIt#normalizeLinkText(url) -> String\n   *\n   * Function used to decode link url to a human-readable format`\n   **/\n  this.normalizeLinkText = normalizeLinkText;\n\n\n  // Expose utils & helpers for easy acces from plugins\n\n  /**\n   * MarkdownIt#utils -> utils\n   *\n   * Assorted utility functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).\n   **/\n  this.utils = utils;\n\n  /**\n   * MarkdownIt#helpers -> helpers\n   *\n   * Link components parser functions, useful to write plugins. See details\n   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).\n   **/\n  this.helpers = utils.assign({}, helpers);\n\n\n  this.options = {};\n  this.configure(presetName);\n\n  if (options) { this.set(options); }\n}\n\n\n/** chainable\n * MarkdownIt.set(options)\n *\n * Set parser options (in the same format as in constructor). Probably, you\n * will never need it, but you can change options after constructor call.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .set({ html: true, breaks: true })\n *             .set({ typographer, true });\n * ```\n *\n * __Note:__ To achieve the best possible performance, don't modify a\n * `markdown-it` instance options on the fly. If you need multiple configurations\n * it's best to create multiple instances and initialize each with separate\n * config.\n **/\nMarkdownIt.prototype.set = function (options) {\n  utils.assign(this.options, options);\n  return this;\n};\n\n\n/** chainable, internal\n * MarkdownIt.configure(presets)\n *\n * Batch load of all options and compenent settings. This is internal method,\n * and you probably will not need it. But if you with - see available presets\n * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)\n *\n * We strongly recommend to use presets instead of direct config loads. That\n * will give better compatibility with next versions.\n **/\nMarkdownIt.prototype.configure = function (presets) {\n  var self = this, presetName;\n\n  if (utils.isString(presets)) {\n    presetName = presets;\n    presets = config[presetName];\n    if (!presets) { throw new Error('Wrong `markdown-it` preset \"' + presetName + '\", check name'); }\n  }\n\n  if (!presets) { throw new Error('Wrong `markdown-it` preset, can\\'t be empty'); }\n\n  if (presets.options) { self.set(presets.options); }\n\n  if (presets.components) {\n    Object.keys(presets.components).forEach(function (name) {\n      if (presets.components[name].rules) {\n        self[name].ruler.enableOnly(presets.components[name].rules);\n      }\n      if (presets.components[name].rules2) {\n        self[name].ruler2.enableOnly(presets.components[name].rules2);\n      }\n    });\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.enable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to enable\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * Enable list or rules. It will automatically find appropriate components,\n * containing rules with given names. If rule not found, and `ignoreInvalid`\n * not set - throws exception.\n *\n * ##### Example\n *\n * ```javascript\n * var md = require('markdown-it')()\n *             .enable(['sub', 'sup'])\n *             .disable('smartquotes');\n * ```\n **/\nMarkdownIt.prototype.enable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.enable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.enable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);\n  }\n\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.disable(list, ignoreInvalid)\n * - list (String|Array): rule name or list of rule names to disable.\n * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.\n *\n * The same as [[MarkdownIt.enable]], but turn specified rules off.\n **/\nMarkdownIt.prototype.disable = function (list, ignoreInvalid) {\n  var result = [];\n\n  if (!Array.isArray(list)) { list = [ list ]; }\n\n  [ 'core', 'block', 'inline' ].forEach(function (chain) {\n    result = result.concat(this[chain].ruler.disable(list, true));\n  }, this);\n\n  result = result.concat(this.inline.ruler2.disable(list, true));\n\n  var missed = list.filter(function (name) { return result.indexOf(name) < 0; });\n\n  if (missed.length && !ignoreInvalid) {\n    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);\n  }\n  return this;\n};\n\n\n/** chainable\n * MarkdownIt.use(plugin, params)\n *\n * Load specified plugin with given params into current parser instance.\n * It's just a sugar to call `plugin(md, params)` with curring.\n *\n * ##### Example\n *\n * ```javascript\n * var iterator = require('markdown-it-for-inline');\n * var md = require('markdown-it')()\n *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {\n *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');\n *             });\n * ```\n **/\nMarkdownIt.prototype.use = function (plugin /*, params, ... */) {\n  var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));\n  plugin.apply(plugin, args);\n  return this;\n};\n\n\n/** internal\n * MarkdownIt.parse(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Parse input string and returns list of block tokens (special token type\n * \"inline\" will contain list of inline tokens). You should not call this\n * method directly, until you write custom renderer (for example, to produce\n * AST).\n *\n * `env` is used to pass data between \"distributed\" rules and return additional\n * metadata like reference info, needed for the renderer. It also can be used to\n * inject data in specific cases. Usually, you will be ok to pass `{}`,\n * and then pass updated object to renderer.\n **/\nMarkdownIt.prototype.parse = function (src, env) {\n  if (typeof src !== 'string') {\n    throw new Error('Input data should be a String');\n  }\n\n  var state = new this.core.State(src, this, env);\n\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.render(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Render markdown string into html. It does all magic for you :).\n *\n * `env` can be used to inject additional metadata (`{}` by default).\n * But you will not need it with high probability. See also comment\n * in [[MarkdownIt.parse]].\n **/\nMarkdownIt.prototype.render = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parse(src, env), this.options, env);\n};\n\n\n/** internal\n * MarkdownIt.parseInline(src, env) -> Array\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the\n * block tokens list with the single `inline` element, containing parsed inline\n * tokens in `children` property. Also updates `env` object.\n **/\nMarkdownIt.prototype.parseInline = function (src, env) {\n  var state = new this.core.State(src, this, env);\n\n  state.inlineMode = true;\n  this.core.process(state);\n\n  return state.tokens;\n};\n\n\n/**\n * MarkdownIt.renderInline(src [, env]) -> String\n * - src (String): source string\n * - env (Object): environment sandbox\n *\n * Similar to [[MarkdownIt.render]] but for single paragraph content. Result\n * will NOT be wrapped into `<p>` tags.\n **/\nMarkdownIt.prototype.renderInline = function (src, env) {\n  env = env || {};\n\n  return this.renderer.render(this.parseInline(src, env), this.options, env);\n};\n\n\nmodule.exports = MarkdownIt;\n","\n'use strict';\n\n\nvar encodeCache = {};\n\n\n// Create a lookup array where anything but characters in `chars` string\n// and alphanumeric chars is percent-encoded.\n//\nfunction getEncodeCache(exclude) {\n  var i, ch, cache = encodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = encodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n\n    if (/^[0-9a-z]$/i.test(ch)) {\n      // always allow unencoded alphanumeric characters\n      cache.push(ch);\n    } else {\n      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));\n    }\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    cache[exclude.charCodeAt(i)] = exclude[i];\n  }\n\n  return cache;\n}\n\n\n// Encode unsafe characters with percent-encoding, skipping already\n// encoded sequences.\n//\n//  - string       - string to encode\n//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)\n//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)\n//\nfunction encode(string, exclude, keepEscaped) {\n  var i, l, code, nextCode, cache,\n      result = '';\n\n  if (typeof exclude !== 'string') {\n    // encode(string, keepEscaped)\n    keepEscaped  = exclude;\n    exclude = encode.defaultChars;\n  }\n\n  if (typeof keepEscaped === 'undefined') {\n    keepEscaped = true;\n  }\n\n  cache = getEncodeCache(exclude);\n\n  for (i = 0, l = string.length; i < l; i++) {\n    code = string.charCodeAt(i);\n\n    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {\n      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {\n        result += string.slice(i, i + 3);\n        i += 2;\n        continue;\n      }\n    }\n\n    if (code < 128) {\n      result += cache[code];\n      continue;\n    }\n\n    if (code >= 0xD800 && code <= 0xDFFF) {\n      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {\n        nextCode = string.charCodeAt(i + 1);\n        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {\n          result += encodeURIComponent(string[i] + string[i + 1]);\n          i++;\n          continue;\n        }\n      }\n      result += '%EF%BF%BD';\n      continue;\n    }\n\n    result += encodeURIComponent(string[i]);\n  }\n\n  return result;\n}\n\nencode.defaultChars   = \";/?:@&=+$,-_.!~*'()#\";\nencode.componentChars = \"-_.!~*'()\";\n\n\nmodule.exports = encode;\n","\n'use strict';\n\n\n/* eslint-disable no-bitwise */\n\nvar decodeCache = {};\n\nfunction getDecodeCache(exclude) {\n  var i, ch, cache = decodeCache[exclude];\n  if (cache) { return cache; }\n\n  cache = decodeCache[exclude] = [];\n\n  for (i = 0; i < 128; i++) {\n    ch = String.fromCharCode(i);\n    cache.push(ch);\n  }\n\n  for (i = 0; i < exclude.length; i++) {\n    ch = exclude.charCodeAt(i);\n    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);\n  }\n\n  return cache;\n}\n\n\n// Decode percent-encoded string.\n//\nfunction decode(string, exclude) {\n  var cache;\n\n  if (typeof exclude !== 'string') {\n    exclude = decode.defaultChars;\n  }\n\n  cache = getDecodeCache(exclude);\n\n  return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {\n    var i, l, b1, b2, b3, b4, chr,\n        result = '';\n\n    for (i = 0, l = seq.length; i < l; i += 3) {\n      b1 = parseInt(seq.slice(i + 1, i + 3), 16);\n\n      if (b1 < 0x80) {\n        result += cache[b1];\n        continue;\n      }\n\n      if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {\n        // 110xxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n\n        if ((b2 & 0xC0) === 0x80) {\n          chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);\n\n          if (chr < 0x80) {\n            result += '\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 3;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {\n        // 1110xxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {\n          chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);\n\n          if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {\n            result += '\\ufffd\\ufffd\\ufffd';\n          } else {\n            result += String.fromCharCode(chr);\n          }\n\n          i += 6;\n          continue;\n        }\n      }\n\n      if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {\n        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx\n        b2 = parseInt(seq.slice(i + 4, i + 6), 16);\n        b3 = parseInt(seq.slice(i + 7, i + 9), 16);\n        b4 = parseInt(seq.slice(i + 10, i + 12), 16);\n\n        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {\n          chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);\n\n          if (chr < 0x10000 || chr > 0x10FFFF) {\n            result += '\\ufffd\\ufffd\\ufffd\\ufffd';\n          } else {\n            chr -= 0x10000;\n            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));\n          }\n\n          i += 9;\n          continue;\n        }\n      }\n\n      result += '\\ufffd';\n    }\n\n    return result;\n  });\n}\n\n\ndecode.defaultChars   = ';/?:@&=+$,#';\ndecode.componentChars = '';\n\n\nmodule.exports = decode;\n","\n'use strict';\n\n\nmodule.exports = function format(url) {\n  var result = '';\n\n  result += url.protocol || '';\n  result += url.slashes ? '//' : '';\n  result += url.auth ? url.auth + '@' : '';\n\n  if (url.hostname && url.hostname.indexOf(':') !== -1) {\n    // ipv6 address\n    result += '[' + url.hostname + ']';\n  } else {\n    result += url.hostname || '';\n  }\n\n  result += url.port ? ':' + url.port : '';\n  result += url.pathname || '';\n  result += url.search || '';\n  result += url.hash || '';\n\n  return result;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n//\n// Changes from joyent/node:\n//\n// 1. No leading slash in paths,\n//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`\n//\n// 2. Backslashes are not replaced with slashes,\n//    so `http:\\\\example.org\\` is treated like a relative path\n//\n// 3. Trailing colon is treated like a part of the path,\n//    i.e. in `http://example.org:foo` pathname is `:foo`\n//\n// 4. Nothing is URL-encoded in the resulting object,\n//    (in joyent/node some chars in auth and paths are encoded)\n//\n// 5. `url.parse()` does not have `parseQueryString` argument\n//\n// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,\n//    which can be constructed using other parts of the url.\n//\n\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.pathname = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = [ '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t' ],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = [ '{', '}', '|', '\\\\', '^', '`' ].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = [ '\\'' ].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),\n    hostEndingChars = [ '/', '?', '#' ],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    /* eslint-disable no-script-url */\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n    /* eslint-enable no-script-url */\n\nfunction urlParse(url, slashesDenoteHost) {\n  if (url && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, slashesDenoteHost) {\n  var i, l, lowerProto, hec, slashes,\n      rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    lowerProto = proto.toLowerCase();\n    this.protocol = proto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (i = 0; i < hostEndingChars.length; i++) {\n      hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = auth;\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (i = 0; i < nonHostChars.length; i++) {\n      hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {\n        hostEnd = hec;\n      }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) {\n      hostEnd = rest.length;\n    }\n\n    if (rest[hostEnd - 1] === ':') { hostEnd--; }\n    var host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost(host);\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    }\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    rest = rest.slice(0, qm);\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '';\n  }\n\n  return this;\n};\n\nUrl.prototype.parseHost = function(host) {\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nmodule.exports = urlParse;\n","'use strict';\n\nexports.Any = require('./properties/Any/regex');\nexports.Cc  = require('./categories/Cc/regex');\nexports.Cf  = require('./categories/Cf/regex');\nexports.P   = require('./categories/P/regex');\nexports.Z   = require('./categories/Z/regex');\n","module.exports=/[\\xAD\\u0600-\\u0605\\u061C\\u06DD\\u070F\\u08E2\\u180E\\u200B-\\u200F\\u202A-\\u202E\\u2060-\\u2064\\u2066-\\u206F\\uFEFF\\uFFF9-\\uFFFB]|\\uD804[\\uDCBD\\uDCCD]|\\uD82F[\\uDCA0-\\uDCA3]|\\uD834[\\uDD73-\\uDD7A]|\\uDB40[\\uDC01\\uDC20-\\uDC7F]/","// Just a shortcut for bulk export\n'use strict';\n\n\nexports.parseLinkLabel       = require('./parse_link_label');\nexports.parseLinkDestination = require('./parse_link_destination');\nexports.parseLinkTitle       = require('./parse_link_title');\n","// Parse link label\n//\n// this function assumes that first character (\"[\") already matches;\n// returns the end of the label\n//\n'use strict';\n\nmodule.exports = function parseLinkLabel(state, start, disableNested) {\n  var level, found, marker, prevPos,\n      labelEnd = -1,\n      max = state.posMax,\n      oldPos = state.pos;\n\n  state.pos = start + 1;\n  level = 1;\n\n  while (state.pos < max) {\n    marker = state.src.charCodeAt(state.pos);\n    if (marker === 0x5D /* ] */) {\n      level--;\n      if (level === 0) {\n        found = true;\n        break;\n      }\n    }\n\n    prevPos = state.pos;\n    state.md.inline.skipToken(state);\n    if (marker === 0x5B /* [ */) {\n      if (prevPos === state.pos - 1) {\n        // increase level if we find text `[`, which is not a part of any token\n        level++;\n      } else if (disableNested) {\n        state.pos = oldPos;\n        return -1;\n      }\n    }\n  }\n\n  if (found) {\n    labelEnd = state.pos;\n  }\n\n  // restore old state\n  state.pos = oldPos;\n\n  return labelEnd;\n};\n","// Parse link destination\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkDestination(str, pos, max) {\n  var code, level,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (str.charCodeAt(pos) === 0x3C /* < */) {\n    pos++;\n    while (pos < max) {\n      code = str.charCodeAt(pos);\n      if (code === 0x0A /* \\n */) { return result; }\n      if (code === 0x3E /* > */) {\n        result.pos = pos + 1;\n        result.str = unescapeAll(str.slice(start + 1, pos));\n        result.ok = true;\n        return result;\n      }\n      if (code === 0x5C /* \\ */ && pos + 1 < max) {\n        pos += 2;\n        continue;\n      }\n\n      pos++;\n    }\n\n    // no closing '>'\n    return result;\n  }\n\n  // this should be ... } else { ... branch\n\n  level = 0;\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n\n    if (code === 0x20) { break; }\n\n    // ascii control characters\n    if (code < 0x20 || code === 0x7F) { break; }\n\n    if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos += 2;\n      continue;\n    }\n\n    if (code === 0x28 /* ( */) {\n      level++;\n    }\n\n    if (code === 0x29 /* ) */) {\n      if (level === 0) { break; }\n      level--;\n    }\n\n    pos++;\n  }\n\n  if (start === pos) { return result; }\n  if (level !== 0) { return result; }\n\n  result.str = unescapeAll(str.slice(start, pos));\n  result.lines = lines;\n  result.pos = pos;\n  result.ok = true;\n  return result;\n};\n","// Parse link title\n//\n'use strict';\n\n\nvar unescapeAll = require('../common/utils').unescapeAll;\n\n\nmodule.exports = function parseLinkTitle(str, pos, max) {\n  var code,\n      marker,\n      lines = 0,\n      start = pos,\n      result = {\n        ok: false,\n        pos: 0,\n        lines: 0,\n        str: ''\n      };\n\n  if (pos >= max) { return result; }\n\n  marker = str.charCodeAt(pos);\n\n  if (marker !== 0x22 /* \" */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }\n\n  pos++;\n\n  // if opening marker is \"(\", switch it to closing marker \")\"\n  if (marker === 0x28) { marker = 0x29; }\n\n  while (pos < max) {\n    code = str.charCodeAt(pos);\n    if (code === marker) {\n      result.pos = pos + 1;\n      result.lines = lines;\n      result.str = unescapeAll(str.slice(start + 1, pos));\n      result.ok = true;\n      return result;\n    } else if (code === 0x0A) {\n      lines++;\n    } else if (code === 0x5C /* \\ */ && pos + 1 < max) {\n      pos++;\n      if (str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n\n    pos++;\n  }\n\n  return result;\n};\n","/**\n * class Renderer\n *\n * Generates HTML from parsed token stream. Each instance has independent\n * copy of rules. Those can be rewritten with ease. Also, you can add new\n * rules if you create plugin and adds new token types.\n **/\n'use strict';\n\n\nvar assign          = require('./common/utils').assign;\nvar unescapeAll     = require('./common/utils').unescapeAll;\nvar escapeHtml      = require('./common/utils').escapeHtml;\n\n\n////////////////////////////////////////////////////////////////////////////////\n\nvar default_rules = {};\n\n\ndefault_rules.code_inline = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<code' + slf.renderAttrs(token) + '>' +\n          escapeHtml(tokens[idx].content) +\n          '</code>';\n};\n\n\ndefault_rules.code_block = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  return  '<pre' + slf.renderAttrs(token) + '><code>' +\n          escapeHtml(tokens[idx].content) +\n          '</code></pre>\\n';\n};\n\n\ndefault_rules.fence = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx],\n      info = token.info ? unescapeAll(token.info).trim() : '',\n      langName = '',\n      highlighted, i, tmpAttrs, tmpToken;\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0];\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || escapeHtml(token.content);\n  } else {\n    highlighted = escapeHtml(token.content);\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return highlighted + '\\n';\n  }\n\n  // If language exists, inject class gently, without modifying original token.\n  // May be, one day we will add .clone() for token and simplify this part, but\n  // now we prefer to keep things local.\n  if (info) {\n    i        = token.attrIndex('class');\n    tmpAttrs = token.attrs ? token.attrs.slice() : [];\n\n    if (i < 0) {\n      tmpAttrs.push([ 'class', options.langPrefix + langName ]);\n    } else {\n      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;\n    }\n\n    // Fake token just to render attributes\n    tmpToken = {\n      attrs: tmpAttrs\n    };\n\n    return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'\n          + highlighted\n          + '</code></pre>\\n';\n  }\n\n\n  return  '<pre><code' + slf.renderAttrs(token) + '>'\n        + highlighted\n        + '</code></pre>\\n';\n};\n\n\ndefault_rules.image = function (tokens, idx, options, env, slf) {\n  var token = tokens[idx];\n\n  // \"alt\" attr MUST be set, even if empty. Because it's mandatory and\n  // should be placed on proper position for tests.\n  //\n  // Replace content with actual value\n\n  token.attrs[token.attrIndex('alt')][1] =\n    slf.renderInlineAsText(token.children, options, env);\n\n  return slf.renderToken(tokens, idx, options);\n};\n\n\ndefault_rules.hardbreak = function (tokens, idx, options /*, env */) {\n  return options.xhtmlOut ? '<br />\\n' : '<br>\\n';\n};\ndefault_rules.softbreak = function (tokens, idx, options /*, env */) {\n  return options.breaks ? (options.xhtmlOut ? '<br />\\n' : '<br>\\n') : '\\n';\n};\n\n\ndefault_rules.text = function (tokens, idx /*, options, env */) {\n  return escapeHtml(tokens[idx].content);\n};\n\n\ndefault_rules.html_block = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\ndefault_rules.html_inline = function (tokens, idx /*, options, env */) {\n  return tokens[idx].content;\n};\n\n\n/**\n * new Renderer()\n *\n * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.\n **/\nfunction Renderer() {\n\n  /**\n   * Renderer#rules -> Object\n   *\n   * Contains render rules for tokens. Can be updated and extended.\n   *\n   * ##### Example\n   *\n   * ```javascript\n   * var md = require('markdown-it')();\n   *\n   * md.renderer.rules.strong_open  = function () { return '<b>'; };\n   * md.renderer.rules.strong_close = function () { return '</b>'; };\n   *\n   * var result = md.renderInline(...);\n   * ```\n   *\n   * Each rule is called as independent static function with fixed signature:\n   *\n   * ```javascript\n   * function my_token_render(tokens, idx, options, env, renderer) {\n   *   // ...\n   *   return renderedHTML;\n   * }\n   * ```\n   *\n   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n   * for more details and examples.\n   **/\n  this.rules = assign({}, default_rules);\n}\n\n\n/**\n * Renderer.renderAttrs(token) -> String\n *\n * Render token attributes to string.\n **/\nRenderer.prototype.renderAttrs = function renderAttrs(token) {\n  var i, l, result;\n\n  if (!token.attrs) { return ''; }\n\n  result = '';\n\n  for (i = 0, l = token.attrs.length; i < l; i++) {\n    result += ' ' + escapeHtml(token.attrs[i][0]) + '=\"' + escapeHtml(token.attrs[i][1]) + '\"';\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.renderToken(tokens, idx, options) -> String\n * - tokens (Array): list of tokens\n * - idx (Numbed): token index to render\n * - options (Object): params of parser instance\n *\n * Default token renderer. Can be overriden by custom function\n * in [[Renderer#rules]].\n **/\nRenderer.prototype.renderToken = function renderToken(tokens, idx, options) {\n  var nextToken,\n      result = '',\n      needLf = false,\n      token = tokens[idx];\n\n  // Tight list paragraphs\n  if (token.hidden) {\n    return '';\n  }\n\n  // Insert a newline between hidden paragraph and subsequent opening\n  // block-level tag.\n  //\n  // For example, here we should insert a newline before blockquote:\n  //  - a\n  //    >\n  //\n  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {\n    result += '\\n';\n  }\n\n  // Add token name, e.g. `<img`\n  result += (token.nesting === -1 ? '</' : '<') + token.tag;\n\n  // Encode attributes, e.g. `<img src=\"foo\"`\n  result += this.renderAttrs(token);\n\n  // Add a slash for self-closing tags, e.g. `<img src=\"foo\" /`\n  if (token.nesting === 0 && options.xhtmlOut) {\n    result += ' /';\n  }\n\n  // Check if we need to add a newline after this tag\n  if (token.block) {\n    needLf = true;\n\n    if (token.nesting === 1) {\n      if (idx + 1 < tokens.length) {\n        nextToken = tokens[idx + 1];\n\n        if (nextToken.type === 'inline' || nextToken.hidden) {\n          // Block-level tag containing an inline tag.\n          //\n          needLf = false;\n\n        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {\n          // Opening tag + closing tag of the same type. E.g. `<li></li>`.\n          //\n          needLf = false;\n        }\n      }\n    }\n  }\n\n  result += needLf ? '>\\n' : '>';\n\n  return result;\n};\n\n\n/**\n * Renderer.renderInline(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * The same as [[Renderer.render]], but for single token of `inline` type.\n **/\nRenderer.prototype.renderInline = function (tokens, options, env) {\n  var type,\n      result = '',\n      rules = this.rules;\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options);\n    }\n  }\n\n  return result;\n};\n\n\n/** internal\n * Renderer.renderInlineAsText(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Special kludge for image `alt` attributes to conform CommonMark spec.\n * Don't try to use it! Spec requires to show `alt` content with stripped markup,\n * instead of simple escaping.\n **/\nRenderer.prototype.renderInlineAsText = function (tokens, options, env) {\n  var result = '';\n\n  for (var i = 0, len = tokens.length; i < len; i++) {\n    if (tokens[i].type === 'text') {\n      result += tokens[i].content;\n    } else if (tokens[i].type === 'image') {\n      result += this.renderInlineAsText(tokens[i].children, options, env);\n    }\n  }\n\n  return result;\n};\n\n\n/**\n * Renderer.render(tokens, options, env) -> String\n * - tokens (Array): list on block tokens to renter\n * - options (Object): params of parser instance\n * - env (Object): additional data from parsed input (references, for example)\n *\n * Takes token stream and generates HTML. Probably, you will never need to call\n * this method directly.\n **/\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[tokens[i].type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = Renderer;\n","/** internal\n * class Core\n *\n * Top-level rules executor. Glues block/inline parsers and does intermediate\n * transformations.\n **/\n'use strict';\n\n\nvar Ruler  = require('./ruler');\n\n\nvar _rules = [\n  [ 'normalize',      require('./rules_core/normalize')      ],\n  [ 'block',          require('./rules_core/block')          ],\n  [ 'inline',         require('./rules_core/inline')         ],\n  [ 'linkify',        require('./rules_core/linkify')        ],\n  [ 'replacements',   require('./rules_core/replacements')   ],\n  [ 'smartquotes',    require('./rules_core/smartquotes')    ]\n];\n\n\n/**\n * new Core()\n **/\nfunction Core() {\n  /**\n   * Core#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of core rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n}\n\n\n/**\n * Core.process(state)\n *\n * Executes core chain rules.\n **/\nCore.prototype.process = function (state) {\n  var i, l, rules;\n\n  rules = this.ruler.getRules('');\n\n  for (i = 0, l = rules.length; i < l; i++) {\n    rules[i](state);\n  }\n};\n\nCore.prototype.State = require('./rules_core/state_core');\n\n\nmodule.exports = Core;\n","// Normalize input string\n\n'use strict';\n\n\n// https://spec.commonmark.org/0.29/#line-ending\nvar NEWLINES_RE  = /\\r\\n?|\\n/g;\nvar NULL_RE      = /\\0/g;\n\n\nmodule.exports = function normalize(state) {\n  var str;\n\n  // Normalize newlines\n  str = state.src.replace(NEWLINES_RE, '\\n');\n\n  // Replace NULL characters\n  str = str.replace(NULL_RE, '\\uFFFD');\n\n  state.src = str;\n};\n","'use strict';\n\n\nmodule.exports = function block(state) {\n  var token;\n\n  if (state.inlineMode) {\n    token          = new state.Token('inline', '', 0);\n    token.content  = state.src;\n    token.map      = [ 0, 1 ];\n    token.children = [];\n    state.tokens.push(token);\n  } else {\n    state.md.block.parse(state.src, state.md, state.env, state.tokens);\n  }\n};\n","'use strict';\n\nmodule.exports = function inline(state) {\n  var tokens = state.tokens, tok, i, l;\n\n  // Parse inlines\n  for (i = 0, l = tokens.length; i < l; i++) {\n    tok = tokens[i];\n    if (tok.type === 'inline') {\n      state.md.inline.parse(tok.content, state.md, state.env, tok.children);\n    }\n  }\n};\n","// Replace link-like texts with link nodes.\n//\n// Currently restricted by `md.validateLink()` to http/https/ftp\n//\n'use strict';\n\n\nvar arrayReplaceAt = require('../common/utils').arrayReplaceAt;\n\n\nfunction isLinkOpen(str) {\n  return /^<a[>\\s]/i.test(str);\n}\nfunction isLinkClose(str) {\n  return /^<\\/a\\s*>/i.test(str);\n}\n\n\nmodule.exports = function linkify(state) {\n  var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,\n      level, htmlLinkLevel, url, fullUrl, urlText,\n      blockTokens = state.tokens,\n      links;\n\n  if (!state.md.options.linkify) { return; }\n\n  for (j = 0, l = blockTokens.length; j < l; j++) {\n    if (blockTokens[j].type !== 'inline' ||\n        !state.md.linkify.pretest(blockTokens[j].content)) {\n      continue;\n    }\n\n    tokens = blockTokens[j].children;\n\n    htmlLinkLevel = 0;\n\n    // We scan from the end, to keep position when new tags added.\n    // Use reversed logic in links start/end match\n    for (i = tokens.length - 1; i >= 0; i--) {\n      currentToken = tokens[i];\n\n      // Skip content of markdown links\n      if (currentToken.type === 'link_close') {\n        i--;\n        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {\n          i--;\n        }\n        continue;\n      }\n\n      // Skip content of html tag links\n      if (currentToken.type === 'html_inline') {\n        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {\n          htmlLinkLevel--;\n        }\n        if (isLinkClose(currentToken.content)) {\n          htmlLinkLevel++;\n        }\n      }\n      if (htmlLinkLevel > 0) { continue; }\n\n      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {\n\n        text = currentToken.content;\n        links = state.md.linkify.match(text);\n\n        // Now split string to nodes\n        nodes = [];\n        level = currentToken.level;\n        lastPos = 0;\n\n        for (ln = 0; ln < links.length; ln++) {\n\n          url = links[ln].url;\n          fullUrl = state.md.normalizeLink(url);\n          if (!state.md.validateLink(fullUrl)) { continue; }\n\n          urlText = links[ln].text;\n\n          // Linkifier might send raw hostnames like \"example.com\", where url\n          // starts with domain name. So we prepend http:// in those cases,\n          // and remove it afterwards.\n          //\n          if (!links[ln].schema) {\n            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\\/\\//, '');\n          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {\n            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');\n          } else {\n            urlText = state.md.normalizeLinkText(urlText);\n          }\n\n          pos = links[ln].index;\n\n          if (pos > lastPos) {\n            token         = new state.Token('text', '', 0);\n            token.content = text.slice(lastPos, pos);\n            token.level   = level;\n            nodes.push(token);\n          }\n\n          token         = new state.Token('link_open', 'a', 1);\n          token.attrs   = [ [ 'href', fullUrl ] ];\n          token.level   = level++;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          token         = new state.Token('text', '', 0);\n          token.content = urlText;\n          token.level   = level;\n          nodes.push(token);\n\n          token         = new state.Token('link_close', 'a', -1);\n          token.level   = --level;\n          token.markup  = 'linkify';\n          token.info    = 'auto';\n          nodes.push(token);\n\n          lastPos = links[ln].lastIndex;\n        }\n        if (lastPos < text.length) {\n          token         = new state.Token('text', '', 0);\n          token.content = text.slice(lastPos);\n          token.level   = level;\n          nodes.push(token);\n        }\n\n        // replace current node\n        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);\n      }\n    }\n  }\n};\n","// Simple typographic replacements\n//\n// (c) (C) → ©\n// (tm) (TM) → ™\n// (r) (R) → ®\n// +- → ±\n// (p) (P) -> §\n// ... → … (also ?.... → ?.., !.... → !..)\n// ???????? → ???, !!!!! → !!!, `,,` → `,`\n// -- → &ndash;, --- → &mdash;\n//\n'use strict';\n\n// TODO:\n// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾\n// - miltiplication 2 x 4 -> 2 × 4\n\nvar RARE_RE = /\\+-|\\.\\.|\\?\\?\\?\\?|!!!!|,,|--/;\n\n// Workaround for phantomjs - need regex without /g flag,\n// or root check will fail every second time\nvar SCOPED_ABBR_TEST_RE = /\\((c|tm|r|p)\\)/i;\n\nvar SCOPED_ABBR_RE = /\\((c|tm|r|p)\\)/ig;\nvar SCOPED_ABBR = {\n  c: '©',\n  r: '®',\n  p: '§',\n  tm: '™'\n};\n\nfunction replaceFn(match, name) {\n  return SCOPED_ABBR[name.toLowerCase()];\n}\n\nfunction replace_scoped(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\nfunction replace_rare(inlineTokens) {\n  var i, token, inside_autolink = 0;\n\n  for (i = inlineTokens.length - 1; i >= 0; i--) {\n    token = inlineTokens[i];\n\n    if (token.type === 'text' && !inside_autolink) {\n      if (RARE_RE.test(token.content)) {\n        token.content = token.content\n          .replace(/\\+-/g, '±')\n          // .., ..., ....... -> …\n          // but ?..... & !..... -> ?.. & !..\n          .replace(/\\.{2,}/g, '…').replace(/([?!])…/g, '$1..')\n          .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')\n          // em-dash\n          .replace(/(^|[^-])---([^-]|$)/mg, '$1\\u2014$2')\n          // en-dash\n          .replace(/(^|\\s)--(\\s|$)/mg, '$1\\u2013$2')\n          .replace(/(^|[^-\\s])--([^-\\s]|$)/mg, '$1\\u2013$2');\n      }\n    }\n\n    if (token.type === 'link_open' && token.info === 'auto') {\n      inside_autolink--;\n    }\n\n    if (token.type === 'link_close' && token.info === 'auto') {\n      inside_autolink++;\n    }\n  }\n}\n\n\nmodule.exports = function replace(state) {\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline') { continue; }\n\n    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {\n      replace_scoped(state.tokens[blkIdx].children);\n    }\n\n    if (RARE_RE.test(state.tokens[blkIdx].content)) {\n      replace_rare(state.tokens[blkIdx].children);\n    }\n\n  }\n};\n","// Convert straight quotation marks to typographic ones\n//\n'use strict';\n\n\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\nvar QUOTE_TEST_RE = /['\"]/;\nvar QUOTE_RE = /['\"]/g;\nvar APOSTROPHE = '\\u2019'; /* ’ */\n\n\nfunction replaceAt(str, index, ch) {\n  return str.substr(0, index) + ch + str.substr(index + 1);\n}\n\nfunction process_inlines(tokens, state) {\n  var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,\n      isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,\n      canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;\n\n  stack = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    token = tokens[i];\n\n    thisLevel = tokens[i].level;\n\n    for (j = stack.length - 1; j >= 0; j--) {\n      if (stack[j].level <= thisLevel) { break; }\n    }\n    stack.length = j + 1;\n\n    if (token.type !== 'text') { continue; }\n\n    text = token.content;\n    pos = 0;\n    max = text.length;\n\n    /*eslint no-labels:0,block-scoped-var:0*/\n    OUTER:\n    while (pos < max) {\n      QUOTE_RE.lastIndex = pos;\n      t = QUOTE_RE.exec(text);\n      if (!t) { break; }\n\n      canOpen = canClose = true;\n      pos = t.index + 1;\n      isSingle = (t[0] === \"'\");\n\n      // Find previous character,\n      // default to space if it's the beginning of the line\n      //\n      lastChar = 0x20;\n\n      if (t.index - 1 >= 0) {\n        lastChar = text.charCodeAt(t.index - 1);\n      } else {\n        for (j = i - 1; j >= 0; j--) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);\n          break;\n        }\n      }\n\n      // Find next character,\n      // default to space if it's the end of the line\n      //\n      nextChar = 0x20;\n\n      if (pos < max) {\n        nextChar = text.charCodeAt(pos);\n      } else {\n        for (j = i + 1; j < tokens.length; j++) {\n          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20\n          if (tokens[j].type !== 'text') continue;\n\n          nextChar = tokens[j].content.charCodeAt(0);\n          break;\n        }\n      }\n\n      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n      isLastWhiteSpace = isWhiteSpace(lastChar);\n      isNextWhiteSpace = isWhiteSpace(nextChar);\n\n      if (isNextWhiteSpace) {\n        canOpen = false;\n      } else if (isNextPunctChar) {\n        if (!(isLastWhiteSpace || isLastPunctChar)) {\n          canOpen = false;\n        }\n      }\n\n      if (isLastWhiteSpace) {\n        canClose = false;\n      } else if (isLastPunctChar) {\n        if (!(isNextWhiteSpace || isNextPunctChar)) {\n          canClose = false;\n        }\n      }\n\n      if (nextChar === 0x22 /* \" */ && t[0] === '\"') {\n        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {\n          // special case: 1\"\" - count first quote as an inch\n          canClose = canOpen = false;\n        }\n      }\n\n      if (canOpen && canClose) {\n        // treat this as the middle of the word\n        canOpen = false;\n        canClose = isNextPunctChar;\n      }\n\n      if (!canOpen && !canClose) {\n        // middle of word\n        if (isSingle) {\n          token.content = replaceAt(token.content, t.index, APOSTROPHE);\n        }\n        continue;\n      }\n\n      if (canClose) {\n        // this could be a closing quote, rewind the stack to get a match\n        for (j = stack.length - 1; j >= 0; j--) {\n          item = stack[j];\n          if (stack[j].level < thisLevel) { break; }\n          if (item.single === isSingle && stack[j].level === thisLevel) {\n            item = stack[j];\n\n            if (isSingle) {\n              openQuote = state.md.options.quotes[2];\n              closeQuote = state.md.options.quotes[3];\n            } else {\n              openQuote = state.md.options.quotes[0];\n              closeQuote = state.md.options.quotes[1];\n            }\n\n            // replace token.content *before* tokens[item.token].content,\n            // because, if they are pointing at the same token, replaceAt\n            // could mess up indices when quote length != 1\n            token.content = replaceAt(token.content, t.index, closeQuote);\n            tokens[item.token].content = replaceAt(\n              tokens[item.token].content, item.pos, openQuote);\n\n            pos += closeQuote.length - 1;\n            if (item.token === i) { pos += openQuote.length - 1; }\n\n            text = token.content;\n            max = text.length;\n\n            stack.length = j;\n            continue OUTER;\n          }\n        }\n      }\n\n      if (canOpen) {\n        stack.push({\n          token: i,\n          pos: t.index,\n          single: isSingle,\n          level: thisLevel\n        });\n      } else if (canClose && isSingle) {\n        token.content = replaceAt(token.content, t.index, APOSTROPHE);\n      }\n    }\n  }\n}\n\n\nmodule.exports = function smartquotes(state) {\n  /*eslint max-depth:0*/\n  var blkIdx;\n\n  if (!state.md.options.typographer) { return; }\n\n  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {\n\n    if (state.tokens[blkIdx].type !== 'inline' ||\n        !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {\n      continue;\n    }\n\n    process_inlines(state.tokens[blkIdx].children, state);\n  }\n};\n","// Core state object\n//\n'use strict';\n\nvar Token = require('../token');\n\n\nfunction StateCore(src, md, env) {\n  this.src = src;\n  this.env = env;\n  this.tokens = [];\n  this.inlineMode = false;\n  this.md = md; // link to parser instance\n}\n\n// re-export Token class to use in core rules\nStateCore.prototype.Token = Token;\n\n\nmodule.exports = StateCore;\n","/** internal\n * class ParserBlock\n *\n * Block-level tokenizer.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\nvar _rules = [\n  // First 2 params - rule name & source. Secondary array - list of rules,\n  // which can be terminated by this one.\n  [ 'table',      require('./rules_block/table'),      [ 'paragraph', 'reference' ] ],\n  [ 'code',       require('./rules_block/code') ],\n  [ 'fence',      require('./rules_block/fence'),      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'blockquote', require('./rules_block/blockquote'), [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'hr',         require('./rules_block/hr'),         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],\n  [ 'list',       require('./rules_block/list'),       [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'reference',  require('./rules_block/reference') ],\n  [ 'heading',    require('./rules_block/heading'),    [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'lheading',   require('./rules_block/lheading') ],\n  [ 'html_block', require('./rules_block/html_block'), [ 'paragraph', 'reference', 'blockquote' ] ],\n  [ 'paragraph',  require('./rules_block/paragraph') ]\n];\n\n\n/**\n * new ParserBlock()\n **/\nfunction ParserBlock() {\n  /**\n   * ParserBlock#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of block rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (var i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1], { alt: (_rules[i][2] || []).slice() });\n  }\n}\n\n\n// Generate tokens for input range\n//\nParserBlock.prototype.tokenize = function (state, startLine, endLine) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      line = startLine,\n      hasEmptyLines = false,\n      maxNesting = state.md.options.maxNesting;\n\n  while (line < endLine) {\n    state.line = line = state.skipEmptyLines(line);\n    if (line >= endLine) { break; }\n\n    // Termination condition for nested calls.\n    // Nested calls currently used for blockquotes & lists\n    if (state.sCount[line] < state.blkIndent) { break; }\n\n    // If nesting level exceeded - skip tail to the end. That's not ordinary\n    // situation and we should not care about content.\n    if (state.level >= maxNesting) {\n      state.line = endLine;\n      break;\n    }\n\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.line`\n    // - update `state.tokens`\n    // - return true\n\n    for (i = 0; i < len; i++) {\n      ok = rules[i](state, line, endLine, false);\n      if (ok) { break; }\n    }\n\n    // set state.tight if we had an empty line before current tag\n    // i.e. latest empty line should not count\n    state.tight = !hasEmptyLines;\n\n    // paragraph might \"eat\" one newline after it in nested lists\n    if (state.isEmpty(state.line - 1)) {\n      hasEmptyLines = true;\n    }\n\n    line = state.line;\n\n    if (line < endLine && state.isEmpty(line)) {\n      hasEmptyLines = true;\n      line++;\n      state.line = line;\n    }\n  }\n};\n\n\n/**\n * ParserBlock.parse(str, md, env, outTokens)\n *\n * Process input string and push block tokens into `outTokens`\n **/\nParserBlock.prototype.parse = function (src, md, env, outTokens) {\n  var state;\n\n  if (!src) { return; }\n\n  state = new this.State(src, md, env, outTokens);\n\n  this.tokenize(state, state.line, state.lineMax);\n};\n\n\nParserBlock.prototype.State = require('./rules_block/state_block');\n\n\nmodule.exports = ParserBlock;\n","// GFM table, non-standard\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction getLine(state, line) {\n  var pos = state.bMarks[line] + state.blkIndent,\n      max = state.eMarks[line];\n\n  return state.src.substr(pos, max - pos);\n}\n\nfunction escapedSplit(str) {\n  var result = [],\n      pos = 0,\n      max = str.length,\n      ch,\n      escapes = 0,\n      lastPos = 0,\n      backTicked = false,\n      lastBackTick = 0;\n\n  ch  = str.charCodeAt(pos);\n\n  while (pos < max) {\n    if (ch === 0x60/* ` */) {\n      if (backTicked) {\n        // make \\` close code sequence, but not open it;\n        // the reason is: `\\` is correct code block\n        backTicked = false;\n        lastBackTick = pos;\n      } else if (escapes % 2 === 0) {\n        backTicked = true;\n        lastBackTick = pos;\n      }\n    } else if (ch === 0x7c/* | */ && (escapes % 2 === 0) && !backTicked) {\n      result.push(str.substring(lastPos, pos));\n      lastPos = pos + 1;\n    }\n\n    if (ch === 0x5c/* \\ */) {\n      escapes++;\n    } else {\n      escapes = 0;\n    }\n\n    pos++;\n\n    // If there was an un-closed backtick, go back to just after\n    // the last backtick, but as if it was a normal character\n    if (pos === max && backTicked) {\n      backTicked = false;\n      pos = lastBackTick + 1;\n    }\n\n    ch = str.charCodeAt(pos);\n  }\n\n  result.push(str.substring(lastPos));\n\n  return result;\n}\n\n\nmodule.exports = function table(state, startLine, endLine, silent) {\n  var ch, lineText, pos, i, nextLine, columns, columnCount, token,\n      aligns, t, tableLines, tbodyLines;\n\n  // should have at least two lines\n  if (startLine + 2 > endLine) { return false; }\n\n  nextLine = startLine + 1;\n\n  if (state.sCount[nextLine] < state.blkIndent) { return false; }\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }\n\n  // first character of the second line should be '|', '-', ':',\n  // and no other characters are allowed but spaces;\n  // basically, this is the equivalent of /^[-:|][-:|\\s]*$/ regexp\n\n  pos = state.bMarks[nextLine] + state.tShift[nextLine];\n  if (pos >= state.eMarks[nextLine]) { return false; }\n\n  ch = state.src.charCodeAt(pos++);\n  if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */) { return false; }\n\n  while (pos < state.eMarks[nextLine]) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace(ch)) { return false; }\n\n    pos++;\n  }\n\n  lineText = getLine(state, startLine + 1);\n\n  columns = lineText.split('|');\n  aligns = [];\n  for (i = 0; i < columns.length; i++) {\n    t = columns[i].trim();\n    if (!t) {\n      // allow empty columns before and after table, but not in between columns;\n      // e.g. allow ` |---| `, disallow ` ---||--- `\n      if (i === 0 || i === columns.length - 1) {\n        continue;\n      } else {\n        return false;\n      }\n    }\n\n    if (!/^:?-+:?$/.test(t)) { return false; }\n    if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {\n      aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');\n    } else if (t.charCodeAt(0) === 0x3A/* : */) {\n      aligns.push('left');\n    } else {\n      aligns.push('');\n    }\n  }\n\n  lineText = getLine(state, startLine).trim();\n  if (lineText.indexOf('|') === -1) { return false; }\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n  columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n  // header row will define an amount of columns in the entire table,\n  // and align row shouldn't be smaller than that (the rest of the rows can)\n  columnCount = columns.length;\n  if (columnCount > aligns.length) { return false; }\n\n  if (silent) { return true; }\n\n  token     = state.push('table_open', 'table', 1);\n  token.map = tableLines = [ startLine, 0 ];\n\n  token     = state.push('thead_open', 'thead', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  token     = state.push('tr_open', 'tr', 1);\n  token.map = [ startLine, startLine + 1 ];\n\n  for (i = 0; i < columns.length; i++) {\n    token          = state.push('th_open', 'th', 1);\n    token.map      = [ startLine, startLine + 1 ];\n    if (aligns[i]) {\n      token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n    }\n\n    token          = state.push('inline', '', 0);\n    token.content  = columns[i].trim();\n    token.map      = [ startLine, startLine + 1 ];\n    token.children = [];\n\n    token          = state.push('th_close', 'th', -1);\n  }\n\n  token     = state.push('tr_close', 'tr', -1);\n  token     = state.push('thead_close', 'thead', -1);\n\n  token     = state.push('tbody_open', 'tbody', 1);\n  token.map = tbodyLines = [ startLine + 2, 0 ];\n\n  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    lineText = getLine(state, nextLine).trim();\n    if (lineText.indexOf('|') === -1) { break; }\n    if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }\n    columns = escapedSplit(lineText.replace(/^\\||\\|$/g, ''));\n\n    token = state.push('tr_open', 'tr', 1);\n    for (i = 0; i < columnCount; i++) {\n      token          = state.push('td_open', 'td', 1);\n      if (aligns[i]) {\n        token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];\n      }\n\n      token          = state.push('inline', '', 0);\n      token.content  = columns[i] ? columns[i].trim() : '';\n      token.children = [];\n\n      token          = state.push('td_close', 'td', -1);\n    }\n    token = state.push('tr_close', 'tr', -1);\n  }\n  token = state.push('tbody_close', 'tbody', -1);\n  token = state.push('table_close', 'table', -1);\n\n  tableLines[1] = tbodyLines[1] = nextLine;\n  state.line = nextLine;\n  return true;\n};\n","// Code block (4 spaces padded)\n\n'use strict';\n\n\nmodule.exports = function code(state, startLine, endLine/*, silent*/) {\n  var nextLine, last, token;\n\n  if (state.sCount[startLine] - state.blkIndent < 4) { return false; }\n\n  last = nextLine = startLine + 1;\n\n  while (nextLine < endLine) {\n    if (state.isEmpty(nextLine)) {\n      nextLine++;\n      continue;\n    }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      nextLine++;\n      last = nextLine;\n      continue;\n    }\n    break;\n  }\n\n  state.line = last;\n\n  token         = state.push('code_block', 'code', 0);\n  token.content = state.getLines(startLine, last, 4 + state.blkIndent, true);\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// fences (``` lang, ~~~ lang)\n\n'use strict';\n\n\nmodule.exports = function fence(state, startLine, endLine, silent) {\n  var marker, len, params, nextLine, mem, token, markup,\n      haveEndMarker = false,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (pos + 3 > max) { return false; }\n\n  marker = state.src.charCodeAt(pos);\n\n  if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {\n    return false;\n  }\n\n  // scan marker length\n  mem = pos;\n  pos = state.skipChars(pos, marker);\n\n  len = pos - mem;\n\n  if (len < 3) { return false; }\n\n  markup = state.src.slice(mem, pos);\n  params = state.src.slice(pos, max);\n\n  if (marker === 0x60 /* ` */) {\n    if (params.indexOf(String.fromCharCode(marker)) >= 0) {\n      return false;\n    }\n  }\n\n  // Since start is found, we can report success here in validation mode\n  if (silent) { return true; }\n\n  // search end of block\n  nextLine = startLine;\n\n  for (;;) {\n    nextLine++;\n    if (nextLine >= endLine) {\n      // unclosed block should be autoclosed by end of document.\n      // also block seems to be autoclosed by end of parent\n      break;\n    }\n\n    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos < max && state.sCount[nextLine] < state.blkIndent) {\n      // non-empty line with negative indent should stop the list:\n      // - ```\n      //  test\n      break;\n    }\n\n    if (state.src.charCodeAt(pos) !== marker) { continue; }\n\n    if (state.sCount[nextLine] - state.blkIndent >= 4) {\n      // closing fence should be indented less than 4 spaces\n      continue;\n    }\n\n    pos = state.skipChars(pos, marker);\n\n    // closing code fence must be at least as long as the opening one\n    if (pos - mem < len) { continue; }\n\n    // make sure tail has spaces only\n    pos = state.skipSpaces(pos);\n\n    if (pos < max) { continue; }\n\n    haveEndMarker = true;\n    // found!\n    break;\n  }\n\n  // If a fence has heading spaces, they should be removed from its inner block\n  len = state.sCount[startLine];\n\n  state.line = nextLine + (haveEndMarker ? 1 : 0);\n\n  token         = state.push('fence', 'code', 0);\n  token.info    = params;\n  token.content = state.getLines(startLine + 1, nextLine, len, true);\n  token.markup  = markup;\n  token.map     = [ startLine, state.line ];\n\n  return true;\n};\n","// Block quotes\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function blockquote(state, startLine, endLine, silent) {\n  var adjustTab,\n      ch,\n      i,\n      initial,\n      l,\n      lastLineEmpty,\n      lines,\n      nextLine,\n      offset,\n      oldBMarks,\n      oldBSCount,\n      oldIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      spaceAfterMarker,\n      terminate,\n      terminatorRules,\n      token,\n      wasOutdented,\n      oldLineMax = state.lineMax,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // check the block quote marker\n  if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }\n\n  // we know that it's going to be a valid blockquote,\n  // so no point trying to find the end of it in silent mode\n  if (silent) { return true; }\n\n  // skip spaces after \">\" and re-calculate offset\n  initial = offset = state.sCount[startLine] + pos - (state.bMarks[startLine] + state.tShift[startLine]);\n\n  // skip one optional space after '>'\n  if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n    // ' >   test '\n    //     ^ -- position start of line here:\n    pos++;\n    initial++;\n    offset++;\n    adjustTab = false;\n    spaceAfterMarker = true;\n  } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n    spaceAfterMarker = true;\n\n    if ((state.bsCount[startLine] + offset) % 4 === 3) {\n      // '  >\\t  test '\n      //       ^ -- position start of line here (tab has width===1)\n      pos++;\n      initial++;\n      offset++;\n      adjustTab = false;\n    } else {\n      // ' >\\t  test '\n      //    ^ -- position start of line here + shift bsCount slightly\n      //         to make extra space appear\n      adjustTab = true;\n    }\n  } else {\n    spaceAfterMarker = false;\n  }\n\n  oldBMarks = [ state.bMarks[startLine] ];\n  state.bMarks[startLine] = pos;\n\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (isSpace(ch)) {\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;\n      } else {\n        offset++;\n      }\n    } else {\n      break;\n    }\n\n    pos++;\n  }\n\n  oldBSCount = [ state.bsCount[startLine] ];\n  state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n  lastLineEmpty = pos >= max;\n\n  oldSCount = [ state.sCount[startLine] ];\n  state.sCount[startLine] = offset - initial;\n\n  oldTShift = [ state.tShift[startLine] ];\n  state.tShift[startLine] = pos - state.bMarks[startLine];\n\n  terminatorRules = state.md.block.ruler.getRules('blockquote');\n\n  oldParentType = state.parentType;\n  state.parentType = 'blockquote';\n  wasOutdented = false;\n\n  // Search the end of the block\n  //\n  // Block ends with either:\n  //  1. an empty line outside:\n  //     ```\n  //     > test\n  //\n  //     ```\n  //  2. an empty line inside:\n  //     ```\n  //     >\n  //     test\n  //     ```\n  //  3. another tag:\n  //     ```\n  //     > test\n  //      - - -\n  //     ```\n  for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {\n    // check if it's outdented, i.e. it's inside list item and indented\n    // less than said list item:\n    //\n    // ```\n    // 1. anything\n    //    > current blockquote\n    // 2. checking this line\n    // ```\n    if (state.sCount[nextLine] < state.blkIndent) wasOutdented = true;\n\n    pos = state.bMarks[nextLine] + state.tShift[nextLine];\n    max = state.eMarks[nextLine];\n\n    if (pos >= max) {\n      // Case 1: line is not inside the blockquote, and this line is empty.\n      break;\n    }\n\n    if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !wasOutdented) {\n      // This line is inside the blockquote.\n\n      // skip spaces after \">\" and re-calculate offset\n      initial = offset = state.sCount[nextLine] + pos - (state.bMarks[nextLine] + state.tShift[nextLine]);\n\n      // skip one optional space after '>'\n      if (state.src.charCodeAt(pos) === 0x20 /* space */) {\n        // ' >   test '\n        //     ^ -- position start of line here:\n        pos++;\n        initial++;\n        offset++;\n        adjustTab = false;\n        spaceAfterMarker = true;\n      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {\n        spaceAfterMarker = true;\n\n        if ((state.bsCount[nextLine] + offset) % 4 === 3) {\n          // '  >\\t  test '\n          //       ^ -- position start of line here (tab has width===1)\n          pos++;\n          initial++;\n          offset++;\n          adjustTab = false;\n        } else {\n          // ' >\\t  test '\n          //    ^ -- position start of line here + shift bsCount slightly\n          //         to make extra space appear\n          adjustTab = true;\n        }\n      } else {\n        spaceAfterMarker = false;\n      }\n\n      oldBMarks.push(state.bMarks[nextLine]);\n      state.bMarks[nextLine] = pos;\n\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n\n        if (isSpace(ch)) {\n          if (ch === 0x09) {\n            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;\n          } else {\n            offset++;\n          }\n        } else {\n          break;\n        }\n\n        pos++;\n      }\n\n      lastLineEmpty = pos >= max;\n\n      oldBSCount.push(state.bsCount[nextLine]);\n      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);\n\n      oldSCount.push(state.sCount[nextLine]);\n      state.sCount[nextLine] = offset - initial;\n\n      oldTShift.push(state.tShift[nextLine]);\n      state.tShift[nextLine] = pos - state.bMarks[nextLine];\n      continue;\n    }\n\n    // Case 2: line is not inside the blockquote, and the last line was empty.\n    if (lastLineEmpty) { break; }\n\n    // Case 3: another tag found.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n\n    if (terminate) {\n      // Quirk to enforce \"hard termination mode\" for paragraphs;\n      // normally if you call `tokenize(state, startLine, nextLine)`,\n      // paragraphs will look below nextLine for paragraph continuation,\n      // but if blockquote is terminated by another tag, they shouldn't\n      state.lineMax = nextLine;\n\n      if (state.blkIndent !== 0) {\n        // state.blkIndent was non-zero, we now set it to zero,\n        // so we need to re-calculate all offsets to appear as\n        // if indent wasn't changed\n        oldBMarks.push(state.bMarks[nextLine]);\n        oldBSCount.push(state.bsCount[nextLine]);\n        oldTShift.push(state.tShift[nextLine]);\n        oldSCount.push(state.sCount[nextLine]);\n        state.sCount[nextLine] -= state.blkIndent;\n      }\n\n      break;\n    }\n\n    oldBMarks.push(state.bMarks[nextLine]);\n    oldBSCount.push(state.bsCount[nextLine]);\n    oldTShift.push(state.tShift[nextLine]);\n    oldSCount.push(state.sCount[nextLine]);\n\n    // A negative indentation means that this is a paragraph continuation\n    //\n    state.sCount[nextLine] = -1;\n  }\n\n  oldIndent = state.blkIndent;\n  state.blkIndent = 0;\n\n  token        = state.push('blockquote_open', 'blockquote', 1);\n  token.markup = '>';\n  token.map    = lines = [ startLine, 0 ];\n\n  state.md.block.tokenize(state, startLine, nextLine);\n\n  token        = state.push('blockquote_close', 'blockquote', -1);\n  token.markup = '>';\n\n  state.lineMax = oldLineMax;\n  state.parentType = oldParentType;\n  lines[1] = state.line;\n\n  // Restore original tShift; this might not be necessary since the parser\n  // has already been here, but just to make sure we can do that.\n  for (i = 0; i < oldTShift.length; i++) {\n    state.bMarks[i + startLine] = oldBMarks[i];\n    state.tShift[i + startLine] = oldTShift[i];\n    state.sCount[i + startLine] = oldSCount[i];\n    state.bsCount[i + startLine] = oldBSCount[i];\n  }\n  state.blkIndent = oldIndent;\n\n  return true;\n};\n","// Horizontal rule\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function hr(state, startLine, endLine, silent) {\n  var marker, cnt, ch, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  marker = state.src.charCodeAt(pos++);\n\n  // Check hr marker\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x5F/* _ */) {\n    return false;\n  }\n\n  // markers can be mixed with spaces, but there should be at least 3 of them\n\n  cnt = 1;\n  while (pos < max) {\n    ch = state.src.charCodeAt(pos++);\n    if (ch !== marker && !isSpace(ch)) { return false; }\n    if (ch === marker) { cnt++; }\n  }\n\n  if (cnt < 3) { return false; }\n\n  if (silent) { return true; }\n\n  state.line = startLine + 1;\n\n  token        = state.push('hr', 'hr', 0);\n  token.map    = [ startLine, state.line ];\n  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));\n\n  return true;\n};\n","// Lists\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\n// Search `[-+*][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipBulletListMarker(state, startLine) {\n  var marker, pos, max, ch;\n\n  pos = state.bMarks[startLine] + state.tShift[startLine];\n  max = state.eMarks[startLine];\n\n  marker = state.src.charCodeAt(pos++);\n  // Check bullet\n  if (marker !== 0x2A/* * */ &&\n      marker !== 0x2D/* - */ &&\n      marker !== 0x2B/* + */) {\n    return -1;\n  }\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" -test \" - is not a list item\n      return -1;\n    }\n  }\n\n  return pos;\n}\n\n// Search `\\d+[.)][\\n ]`, returns next pos after marker on success\n// or -1 on fail.\nfunction skipOrderedListMarker(state, startLine) {\n  var ch,\n      start = state.bMarks[startLine] + state.tShift[startLine],\n      pos = start,\n      max = state.eMarks[startLine];\n\n  // List marker should have at least 2 chars (digit + dot)\n  if (pos + 1 >= max) { return -1; }\n\n  ch = state.src.charCodeAt(pos++);\n\n  if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }\n\n  for (;;) {\n    // EOL -> fail\n    if (pos >= max) { return -1; }\n\n    ch = state.src.charCodeAt(pos++);\n\n    if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {\n\n      // List marker should have no more than 9 digits\n      // (prevents integer overflow in browsers)\n      if (pos - start >= 10) { return -1; }\n\n      continue;\n    }\n\n    // found valid marker\n    if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {\n      break;\n    }\n\n    return -1;\n  }\n\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (!isSpace(ch)) {\n      // \" 1.test \" - is not a list item\n      return -1;\n    }\n  }\n  return pos;\n}\n\nfunction markTightParagraphs(state, idx) {\n  var i, l,\n      level = state.level + 2;\n\n  for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {\n    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {\n      state.tokens[i + 2].hidden = true;\n      state.tokens[i].hidden = true;\n      i += 2;\n    }\n  }\n}\n\n\nmodule.exports = function list(state, startLine, endLine, silent) {\n  var ch,\n      contentStart,\n      i,\n      indent,\n      indentAfterMarker,\n      initial,\n      isOrdered,\n      itemLines,\n      l,\n      listLines,\n      listTokIdx,\n      markerCharCode,\n      markerValue,\n      max,\n      nextLine,\n      offset,\n      oldListIndent,\n      oldParentType,\n      oldSCount,\n      oldTShift,\n      oldTight,\n      pos,\n      posAfterMarker,\n      prevEmptyEnd,\n      start,\n      terminate,\n      terminatorRules,\n      token,\n      isTerminatingParagraph = false,\n      tight = true;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  // Special case:\n  //  - item 1\n  //   - item 2\n  //    - item 3\n  //     - item 4\n  //      - this one is a paragraph continuation\n  if (state.listIndent >= 0 &&\n      state.sCount[startLine] - state.listIndent >= 4 &&\n      state.sCount[startLine] < state.blkIndent) {\n    return false;\n  }\n\n  // limit conditions when list can interrupt\n  // a paragraph (validation mode only)\n  if (silent && state.parentType === 'paragraph') {\n    // Next list item should still terminate previous list item;\n    //\n    // This code can fail if plugins use blkIndent as well as lists,\n    // but I hope the spec gets fixed long before that happens.\n    //\n    if (state.tShift[startLine] >= state.blkIndent) {\n      isTerminatingParagraph = true;\n    }\n  }\n\n  // Detect list type and position after marker\n  if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {\n    isOrdered = true;\n    start = state.bMarks[startLine] + state.tShift[startLine];\n    markerValue = Number(state.src.substr(start, posAfterMarker - start - 1));\n\n    // If we're starting a new ordered list right after\n    // a paragraph, it should start with 1.\n    if (isTerminatingParagraph && markerValue !== 1) return false;\n\n  } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {\n    isOrdered = false;\n\n  } else {\n    return false;\n  }\n\n  // If we're starting a new unordered list right after\n  // a paragraph, first line should not be empty.\n  if (isTerminatingParagraph) {\n    if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;\n  }\n\n  // We should terminate list on style change. Remember first one to compare.\n  markerCharCode = state.src.charCodeAt(posAfterMarker - 1);\n\n  // For validation mode we can terminate immediately\n  if (silent) { return true; }\n\n  // Start list\n  listTokIdx = state.tokens.length;\n\n  if (isOrdered) {\n    token       = state.push('ordered_list_open', 'ol', 1);\n    if (markerValue !== 1) {\n      token.attrs = [ [ 'start', markerValue ] ];\n    }\n\n  } else {\n    token       = state.push('bullet_list_open', 'ul', 1);\n  }\n\n  token.map    = listLines = [ startLine, 0 ];\n  token.markup = String.fromCharCode(markerCharCode);\n\n  //\n  // Iterate list items\n  //\n\n  nextLine = startLine;\n  prevEmptyEnd = false;\n  terminatorRules = state.md.block.ruler.getRules('list');\n\n  oldParentType = state.parentType;\n  state.parentType = 'list';\n\n  while (nextLine < endLine) {\n    pos = posAfterMarker;\n    max = state.eMarks[nextLine];\n\n    initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);\n\n    while (pos < max) {\n      ch = state.src.charCodeAt(pos);\n\n      if (ch === 0x09) {\n        offset += 4 - (offset + state.bsCount[nextLine]) % 4;\n      } else if (ch === 0x20) {\n        offset++;\n      } else {\n        break;\n      }\n\n      pos++;\n    }\n\n    contentStart = pos;\n\n    if (contentStart >= max) {\n      // trimming space in \"-    \\n  3\" case, indent is 1 here\n      indentAfterMarker = 1;\n    } else {\n      indentAfterMarker = offset - initial;\n    }\n\n    // If we have more than 4 spaces, the indent is 1\n    // (the rest is just indented code block)\n    if (indentAfterMarker > 4) { indentAfterMarker = 1; }\n\n    // \"  -  test\"\n    //  ^^^^^ - calculating total length of this thing\n    indent = initial + indentAfterMarker;\n\n    // Run subparser & write tokens\n    token        = state.push('list_item_open', 'li', 1);\n    token.markup = String.fromCharCode(markerCharCode);\n    token.map    = itemLines = [ startLine, 0 ];\n\n    // change current state, then restore it after parser subcall\n    oldTight = state.tight;\n    oldTShift = state.tShift[startLine];\n    oldSCount = state.sCount[startLine];\n\n    //  - example list\n    // ^ listIndent position will be here\n    //   ^ blkIndent position will be here\n    //\n    oldListIndent = state.listIndent;\n    state.listIndent = state.blkIndent;\n    state.blkIndent = indent;\n\n    state.tight = true;\n    state.tShift[startLine] = contentStart - state.bMarks[startLine];\n    state.sCount[startLine] = offset;\n\n    if (contentStart >= max && state.isEmpty(startLine + 1)) {\n      // workaround for this case\n      // (list item is empty, list terminates before \"foo\"):\n      // ~~~~~~~~\n      //   -\n      //\n      //     foo\n      // ~~~~~~~~\n      state.line = Math.min(state.line + 2, endLine);\n    } else {\n      state.md.block.tokenize(state, startLine, endLine, true);\n    }\n\n    // If any of list item is tight, mark list as tight\n    if (!state.tight || prevEmptyEnd) {\n      tight = false;\n    }\n    // Item become loose if finish with empty line,\n    // but we should filter last element, because it means list finish\n    prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);\n\n    state.blkIndent = state.listIndent;\n    state.listIndent = oldListIndent;\n    state.tShift[startLine] = oldTShift;\n    state.sCount[startLine] = oldSCount;\n    state.tight = oldTight;\n\n    token        = state.push('list_item_close', 'li', -1);\n    token.markup = String.fromCharCode(markerCharCode);\n\n    nextLine = startLine = state.line;\n    itemLines[1] = nextLine;\n    contentStart = state.bMarks[startLine];\n\n    if (nextLine >= endLine) { break; }\n\n    //\n    // Try to check if list is terminated or continued.\n    //\n    if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n    // if it's indented more than 3 spaces, it should be a code block\n    if (state.sCount[startLine] - state.blkIndent >= 4) { break; }\n\n    // fail if terminating block found\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n\n    // fail if list has another type\n    if (isOrdered) {\n      posAfterMarker = skipOrderedListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    } else {\n      posAfterMarker = skipBulletListMarker(state, nextLine);\n      if (posAfterMarker < 0) { break; }\n    }\n\n    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }\n  }\n\n  // Finalize list\n  if (isOrdered) {\n    token = state.push('ordered_list_close', 'ol', -1);\n  } else {\n    token = state.push('bullet_list_close', 'ul', -1);\n  }\n  token.markup = String.fromCharCode(markerCharCode);\n\n  listLines[1] = nextLine;\n  state.line = nextLine;\n\n  state.parentType = oldParentType;\n\n  // mark paragraphs tight if needed\n  if (tight) {\n    markTightParagraphs(state, listTokIdx);\n  }\n\n  return true;\n};\n","'use strict';\n\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function reference(state, startLine, _endLine, silent) {\n  var ch,\n      destEndPos,\n      destEndLineNo,\n      endLine,\n      href,\n      i,\n      l,\n      label,\n      labelEnd,\n      oldParentType,\n      res,\n      start,\n      str,\n      terminate,\n      terminatorRules,\n      title,\n      lines = 0,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine],\n      nextLine = startLine + 1;\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }\n\n  // Simple check to quickly interrupt scan on [link](url) at the start of line.\n  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54\n  while (++pos < max) {\n    if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&\n        state.src.charCodeAt(pos - 1) !== 0x5C/* \\ */) {\n      if (pos + 1 === max) { return false; }\n      if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }\n      break;\n    }\n  }\n\n  endLine = state.lineMax;\n\n  // jump line-by-line until empty one or EOF\n  terminatorRules = state.md.block.ruler.getRules('reference');\n\n  oldParentType = state.parentType;\n  state.parentType = 'reference';\n\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n  max = str.length;\n\n  for (pos = 1; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x5B /* [ */) {\n      return false;\n    } else if (ch === 0x5D /* ] */) {\n      labelEnd = pos;\n      break;\n    } else if (ch === 0x0A /* \\n */) {\n      lines++;\n    } else if (ch === 0x5C /* \\ */) {\n      pos++;\n      if (pos < max && str.charCodeAt(pos) === 0x0A) {\n        lines++;\n      }\n    }\n  }\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  res = state.md.helpers.parseLinkDestination(str, pos, max);\n  if (!res.ok) { return false; }\n\n  href = state.md.normalizeLink(res.str);\n  if (!state.md.validateLink(href)) { return false; }\n\n  pos = res.pos;\n  lines += res.lines;\n\n  // save cursor state, we could require to rollback later\n  destEndPos = pos;\n  destEndLineNo = lines;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (; pos < max; pos++) {\n    ch = str.charCodeAt(pos);\n    if (ch === 0x0A) {\n      lines++;\n    } else if (isSpace(ch)) {\n      /*eslint no-empty:0*/\n    } else {\n      break;\n    }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  res = state.md.helpers.parseLinkTitle(str, pos, max);\n  if (pos < max && start !== pos && res.ok) {\n    title = res.str;\n    pos = res.pos;\n    lines += res.lines;\n  } else {\n    title = '';\n    pos = destEndPos;\n    lines = destEndLineNo;\n  }\n\n  // skip trailing spaces until the rest of the line\n  while (pos < max) {\n    ch = str.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n    pos++;\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    if (title) {\n      // garbage at the end of the line after title,\n      // but it could still be a valid reference if we roll back\n      title = '';\n      pos = destEndPos;\n      lines = destEndLineNo;\n      while (pos < max) {\n        ch = str.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n    }\n  }\n\n  if (pos < max && str.charCodeAt(pos) !== 0x0A) {\n    // garbage at the end of the line\n    return false;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (!label) {\n    // CommonMark 0.20 disallows empty labels\n    return false;\n  }\n\n  // Reference can not terminate anything. This check is for safety only.\n  /*istanbul ignore if*/\n  if (silent) { return true; }\n\n  if (typeof state.env.references === 'undefined') {\n    state.env.references = {};\n  }\n  if (typeof state.env.references[label] === 'undefined') {\n    state.env.references[label] = { title: title, href: href };\n  }\n\n  state.parentType = oldParentType;\n\n  state.line = startLine + lines + 1;\n  return true;\n};\n","// heading (#, ##, ...)\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function heading(state, startLine, endLine, silent) {\n  var ch, level, tmp, token,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  ch  = state.src.charCodeAt(pos);\n\n  if (ch !== 0x23/* # */ || pos >= max) { return false; }\n\n  // count heading level\n  level = 1;\n  ch = state.src.charCodeAt(++pos);\n  while (ch === 0x23/* # */ && pos < max && level <= 6) {\n    level++;\n    ch = state.src.charCodeAt(++pos);\n  }\n\n  if (level > 6 || (pos < max && !isSpace(ch))) { return false; }\n\n  if (silent) { return true; }\n\n  // Let's cut tails like '    ###  ' from the end of string\n\n  max = state.skipSpacesBack(max, pos);\n  tmp = state.skipCharsBack(max, 0x23, pos); // #\n  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {\n    max = tmp;\n  }\n\n  state.line = startLine + 1;\n\n  token        = state.push('heading_open', 'h' + String(level), 1);\n  token.markup = '########'.slice(0, level);\n  token.map    = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = state.src.slice(pos, max).trim();\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token        = state.push('heading_close', 'h' + String(level), -1);\n  token.markup = '########'.slice(0, level);\n\n  return true;\n};\n","// lheading (---, ===)\n\n'use strict';\n\n\nmodule.exports = function lheading(state, startLine, endLine/*, silent*/) {\n  var content, terminate, i, l, token, pos, max, level, marker,\n      nextLine = startLine + 1, oldParentType,\n      terminatorRules = state.md.block.ruler.getRules('paragraph');\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph'; // use paragraph to match terminatorRules\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    //\n    // Check for underline in setext header\n    //\n    if (state.sCount[nextLine] >= state.blkIndent) {\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n\n      if (pos < max) {\n        marker = state.src.charCodeAt(pos);\n\n        if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {\n          pos = state.skipChars(pos, marker);\n          pos = state.skipSpaces(pos);\n\n          if (pos >= max) {\n            level = (marker === 0x3D/* = */ ? 1 : 2);\n            break;\n          }\n        }\n      }\n    }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  if (!level) {\n    // Didn't find valid underline\n    return false;\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine + 1;\n\n  token          = state.push('heading_open', 'h' + String(level), 1);\n  token.markup   = String.fromCharCode(marker);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line - 1 ];\n  token.children = [];\n\n  token          = state.push('heading_close', 'h' + String(level), -1);\n  token.markup   = String.fromCharCode(marker);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// HTML block\n\n'use strict';\n\n\nvar block_names = require('../common/html_blocks');\nvar HTML_OPEN_CLOSE_TAG_RE = require('../common/html_re').HTML_OPEN_CLOSE_TAG_RE;\n\n// An array of opening and corresponding closing sequences for html tags,\n// last argument defines whether it can terminate a paragraph or not\n//\nvar HTML_SEQUENCES = [\n  [ /^<(script|pre|style)(?=(\\s|>|$))/i, /<\\/(script|pre|style)>/i, true ],\n  [ /^<!--/,        /-->/,   true ],\n  [ /^<\\?/,         /\\?>/,   true ],\n  [ /^<![A-Z]/,     />/,     true ],\n  [ /^<!\\[CDATA\\[/, /\\]\\]>/, true ],\n  [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\\\s|/?>|$))', 'i'), /^$/, true ],\n  [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\\\s*$'),  /^$/, false ]\n];\n\n\nmodule.exports = function html_block(state, startLine, endLine, silent) {\n  var i, nextLine, token, lineText,\n      pos = state.bMarks[startLine] + state.tShift[startLine],\n      max = state.eMarks[startLine];\n\n  // if it's indented more than 3 spaces, it should be a code block\n  if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }\n\n  if (!state.md.options.html) { return false; }\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  lineText = state.src.slice(pos, max);\n\n  for (i = 0; i < HTML_SEQUENCES.length; i++) {\n    if (HTML_SEQUENCES[i][0].test(lineText)) { break; }\n  }\n\n  if (i === HTML_SEQUENCES.length) { return false; }\n\n  if (silent) {\n    // true if this sequence can be a terminator, false otherwise\n    return HTML_SEQUENCES[i][2];\n  }\n\n  nextLine = startLine + 1;\n\n  // If we are here - we detected HTML block.\n  // Let's roll down till block end.\n  if (!HTML_SEQUENCES[i][1].test(lineText)) {\n    for (; nextLine < endLine; nextLine++) {\n      if (state.sCount[nextLine] < state.blkIndent) { break; }\n\n      pos = state.bMarks[nextLine] + state.tShift[nextLine];\n      max = state.eMarks[nextLine];\n      lineText = state.src.slice(pos, max);\n\n      if (HTML_SEQUENCES[i][1].test(lineText)) {\n        if (lineText.length !== 0) { nextLine++; }\n        break;\n      }\n    }\n  }\n\n  state.line = nextLine;\n\n  token         = state.push('html_block', '', 0);\n  token.map     = [ startLine, nextLine ];\n  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);\n\n  return true;\n};\n","// List of valid html blocks names, accorting to commonmark spec\n// http://jgm.github.io/CommonMark/spec.html#html-blocks\n\n'use strict';\n\n\nmodule.exports = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'meta',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'section',\n  'source',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n];\n","// Paragraph\n\n'use strict';\n\n\nmodule.exports = function paragraph(state, startLine/*, endLine*/) {\n  var content, terminate, i, l, token, oldParentType,\n      nextLine = startLine + 1,\n      terminatorRules = state.md.block.ruler.getRules('paragraph'),\n      endLine = state.lineMax;\n\n  oldParentType = state.parentType;\n  state.parentType = 'paragraph';\n\n  // jump line-by-line until empty one or EOF\n  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {\n    // this would be a code block normally, but after paragraph\n    // it's considered a lazy continuation regardless of what's there\n    if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }\n\n    // quirk for blockquotes, this line should already be checked by that rule\n    if (state.sCount[nextLine] < 0) { continue; }\n\n    // Some tags can terminate paragraph without empty line.\n    terminate = false;\n    for (i = 0, l = terminatorRules.length; i < l; i++) {\n      if (terminatorRules[i](state, nextLine, endLine, true)) {\n        terminate = true;\n        break;\n      }\n    }\n    if (terminate) { break; }\n  }\n\n  content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();\n\n  state.line = nextLine;\n\n  token          = state.push('paragraph_open', 'p', 1);\n  token.map      = [ startLine, state.line ];\n\n  token          = state.push('inline', '', 0);\n  token.content  = content;\n  token.map      = [ startLine, state.line ];\n  token.children = [];\n\n  token          = state.push('paragraph_close', 'p', -1);\n\n  state.parentType = oldParentType;\n\n  return true;\n};\n","// Parser state class\n\n'use strict';\n\nvar Token = require('../token');\nvar isSpace = require('../common/utils').isSpace;\n\n\nfunction StateBlock(src, md, env, tokens) {\n  var ch, s, start, pos, len, indent, offset, indent_found;\n\n  this.src = src;\n\n  // link to parser instance\n  this.md     = md;\n\n  this.env = env;\n\n  //\n  // Internal state vartiables\n  //\n\n  this.tokens = tokens;\n\n  this.bMarks = [];  // line begin offsets for fast jumps\n  this.eMarks = [];  // line end offsets for fast jumps\n  this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)\n  this.sCount = [];  // indents for each line (tabs expanded)\n\n  // An amount of virtual spaces (tabs expanded) between beginning\n  // of each line (bMarks) and real beginning of that line.\n  //\n  // It exists only as a hack because blockquotes override bMarks\n  // losing information in the process.\n  //\n  // It's used only when expanding tabs, you can think about it as\n  // an initial tab length, e.g. bsCount=21 applied to string `\\t123`\n  // means first tab should be expanded to 4-21%4 === 3 spaces.\n  //\n  this.bsCount = [];\n\n  // block parser variables\n  this.blkIndent  = 0; // required block content indent (for example, if we are\n                       // inside a list, it would be positioned after list marker)\n  this.line       = 0; // line index in src\n  this.lineMax    = 0; // lines count\n  this.tight      = false;  // loose/tight mode for lists\n  this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)\n  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)\n\n  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'\n  // used in lists to determine if they interrupt a paragraph\n  this.parentType = 'root';\n\n  this.level = 0;\n\n  // renderer\n  this.result = '';\n\n  // Create caches\n  // Generate markers.\n  s = this.src;\n  indent_found = false;\n\n  for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {\n    ch = s.charCodeAt(pos);\n\n    if (!indent_found) {\n      if (isSpace(ch)) {\n        indent++;\n\n        if (ch === 0x09) {\n          offset += 4 - offset % 4;\n        } else {\n          offset++;\n        }\n        continue;\n      } else {\n        indent_found = true;\n      }\n    }\n\n    if (ch === 0x0A || pos === len - 1) {\n      if (ch !== 0x0A) { pos++; }\n      this.bMarks.push(start);\n      this.eMarks.push(pos);\n      this.tShift.push(indent);\n      this.sCount.push(offset);\n      this.bsCount.push(0);\n\n      indent_found = false;\n      indent = 0;\n      offset = 0;\n      start = pos + 1;\n    }\n  }\n\n  // Push fake entry to simplify cache bounds checks\n  this.bMarks.push(s.length);\n  this.eMarks.push(s.length);\n  this.tShift.push(0);\n  this.sCount.push(0);\n  this.bsCount.push(0);\n\n  this.lineMax = this.bMarks.length - 1; // don't count last fake line\n}\n\n// Push new token to \"stream\".\n//\nStateBlock.prototype.push = function (type, tag, nesting) {\n  var token = new Token(type, tag, nesting);\n  token.block = true;\n\n  if (nesting < 0) this.level--; // closing tag\n  token.level = this.level;\n  if (nesting > 0) this.level++; // opening tag\n\n  this.tokens.push(token);\n  return token;\n};\n\nStateBlock.prototype.isEmpty = function isEmpty(line) {\n  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];\n};\n\nStateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {\n  for (var max = this.lineMax; from < max; from++) {\n    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {\n      break;\n    }\n  }\n  return from;\n};\n\n// Skip spaces from given position.\nStateBlock.prototype.skipSpaces = function skipSpaces(pos) {\n  var ch;\n\n  for (var max = this.src.length; pos < max; pos++) {\n    ch = this.src.charCodeAt(pos);\n    if (!isSpace(ch)) { break; }\n  }\n  return pos;\n};\n\n// Skip spaces from given position in reverse.\nStateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (!isSpace(this.src.charCodeAt(--pos))) { return pos + 1; }\n  }\n  return pos;\n};\n\n// Skip char codes from given position\nStateBlock.prototype.skipChars = function skipChars(pos, code) {\n  for (var max = this.src.length; pos < max; pos++) {\n    if (this.src.charCodeAt(pos) !== code) { break; }\n  }\n  return pos;\n};\n\n// Skip char codes reverse from given position - 1\nStateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {\n  if (pos <= min) { return pos; }\n\n  while (pos > min) {\n    if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }\n  }\n  return pos;\n};\n\n// cut lines range from source.\nStateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {\n  var i, lineIndent, ch, first, last, queue, lineStart,\n      line = begin;\n\n  if (begin >= end) {\n    return '';\n  }\n\n  queue = new Array(end - begin);\n\n  for (i = 0; line < end; line++, i++) {\n    lineIndent = 0;\n    lineStart = first = this.bMarks[line];\n\n    if (line + 1 < end || keepLastLF) {\n      // No need for bounds check because we have fake entry on tail.\n      last = this.eMarks[line] + 1;\n    } else {\n      last = this.eMarks[line];\n    }\n\n    while (first < last && lineIndent < indent) {\n      ch = this.src.charCodeAt(first);\n\n      if (isSpace(ch)) {\n        if (ch === 0x09) {\n          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;\n        } else {\n          lineIndent++;\n        }\n      } else if (first - lineStart < this.tShift[line]) {\n        // patched tShift masked characters to look like spaces (blockquotes, list markers)\n        lineIndent++;\n      } else {\n        break;\n      }\n\n      first++;\n    }\n\n    if (lineIndent > indent) {\n      // partially expanding tabs in code blocks, e.g '\\t\\tfoobar'\n      // with indent=2 becomes '  \\tfoobar'\n      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);\n    } else {\n      queue[i] = this.src.slice(first, last);\n    }\n  }\n\n  return queue.join('');\n};\n\n// re-export Token class to use in block rules\nStateBlock.prototype.Token = Token;\n\n\nmodule.exports = StateBlock;\n","/** internal\n * class ParserInline\n *\n * Tokenizes paragraph content.\n **/\n'use strict';\n\n\nvar Ruler           = require('./ruler');\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Parser rules\n\nvar _rules = [\n  [ 'text',            require('./rules_inline/text') ],\n  [ 'newline',         require('./rules_inline/newline') ],\n  [ 'escape',          require('./rules_inline/escape') ],\n  [ 'backticks',       require('./rules_inline/backticks') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').tokenize ],\n  [ 'emphasis',        require('./rules_inline/emphasis').tokenize ],\n  [ 'link',            require('./rules_inline/link') ],\n  [ 'image',           require('./rules_inline/image') ],\n  [ 'autolink',        require('./rules_inline/autolink') ],\n  [ 'html_inline',     require('./rules_inline/html_inline') ],\n  [ 'entity',          require('./rules_inline/entity') ]\n];\n\nvar _rules2 = [\n  [ 'balance_pairs',   require('./rules_inline/balance_pairs') ],\n  [ 'strikethrough',   require('./rules_inline/strikethrough').postProcess ],\n  [ 'emphasis',        require('./rules_inline/emphasis').postProcess ],\n  [ 'text_collapse',   require('./rules_inline/text_collapse') ]\n];\n\n\n/**\n * new ParserInline()\n **/\nfunction ParserInline() {\n  var i;\n\n  /**\n   * ParserInline#ruler -> Ruler\n   *\n   * [[Ruler]] instance. Keep configuration of inline rules.\n   **/\n  this.ruler = new Ruler();\n\n  for (i = 0; i < _rules.length; i++) {\n    this.ruler.push(_rules[i][0], _rules[i][1]);\n  }\n\n  /**\n   * ParserInline#ruler2 -> Ruler\n   *\n   * [[Ruler]] instance. Second ruler used for post-processing\n   * (e.g. in emphasis-like rules).\n   **/\n  this.ruler2 = new Ruler();\n\n  for (i = 0; i < _rules2.length; i++) {\n    this.ruler2.push(_rules2[i][0], _rules2[i][1]);\n  }\n}\n\n\n// Skip single token by running all rules in validation mode;\n// returns `true` if any rule reported success\n//\nParserInline.prototype.skipToken = function (state) {\n  var ok, i, pos = state.pos,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      maxNesting = state.md.options.maxNesting,\n      cache = state.cache;\n\n\n  if (typeof cache[pos] !== 'undefined') {\n    state.pos = cache[pos];\n    return;\n  }\n\n  if (state.level < maxNesting) {\n    for (i = 0; i < len; i++) {\n      // Increment state.level and decrement it later to limit recursion.\n      // It's harmless to do here, because no tokens are created. But ideally,\n      // we'd need a separate private state variable for this purpose.\n      //\n      state.level++;\n      ok = rules[i](state, true);\n      state.level--;\n\n      if (ok) { break; }\n    }\n  } else {\n    // Too much nesting, just skip until the end of the paragraph.\n    //\n    // NOTE: this will cause links to behave incorrectly in the following case,\n    //       when an amount of `[` is exactly equal to `maxNesting + 1`:\n    //\n    //       [[[[[[[[[[[[[[[[[[[[[foo]()\n    //\n    // TODO: remove this workaround when CM standard will allow nested links\n    //       (we can replace it by preventing links from being parsed in\n    //       validation mode)\n    //\n    state.pos = state.posMax;\n  }\n\n  if (!ok) { state.pos++; }\n  cache[pos] = state.pos;\n};\n\n\n// Generate tokens for input range\n//\nParserInline.prototype.tokenize = function (state) {\n  var ok, i,\n      rules = this.ruler.getRules(''),\n      len = rules.length,\n      end = state.posMax,\n      maxNesting = state.md.options.maxNesting;\n\n  while (state.pos < end) {\n    // Try all possible rules.\n    // On success, rule should:\n    //\n    // - update `state.pos`\n    // - update `state.tokens`\n    // - return true\n\n    if (state.level < maxNesting) {\n      for (i = 0; i < len; i++) {\n        ok = rules[i](state, false);\n        if (ok) { break; }\n      }\n    }\n\n    if (ok) {\n      if (state.pos >= end) { break; }\n      continue;\n    }\n\n    state.pending += state.src[state.pos++];\n  }\n\n  if (state.pending) {\n    state.pushPending();\n  }\n};\n\n\n/**\n * ParserInline.parse(str, md, env, outTokens)\n *\n * Process input string and push inline tokens into `outTokens`\n **/\nParserInline.prototype.parse = function (str, md, env, outTokens) {\n  var i, rules, len;\n  var state = new this.State(str, md, env, outTokens);\n\n  this.tokenize(state);\n\n  rules = this.ruler2.getRules('');\n  len = rules.length;\n\n  for (i = 0; i < len; i++) {\n    rules[i](state);\n  }\n};\n\n\nParserInline.prototype.State = require('./rules_inline/state_inline');\n\n\nmodule.exports = ParserInline;\n","// Skip text characters for text token, place those to pending buffer\n// and increment current pos\n\n'use strict';\n\n\n// Rule to skip pure text\n// '{}$%@~+=:' reserved for extentions\n\n// !, \", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \\, ], ^, _, `, {, |, }, or ~\n\n// !!!! Don't confuse with \"Markdown ASCII Punctuation\" chars\n// http://spec.commonmark.org/0.15/#ascii-punctuation-character\nfunction isTerminatorChar(ch) {\n  switch (ch) {\n    case 0x0A/* \\n */:\n    case 0x21/* ! */:\n    case 0x23/* # */:\n    case 0x24/* $ */:\n    case 0x25/* % */:\n    case 0x26/* & */:\n    case 0x2A/* * */:\n    case 0x2B/* + */:\n    case 0x2D/* - */:\n    case 0x3A/* : */:\n    case 0x3C/* < */:\n    case 0x3D/* = */:\n    case 0x3E/* > */:\n    case 0x40/* @ */:\n    case 0x5B/* [ */:\n    case 0x5C/* \\ */:\n    case 0x5D/* ] */:\n    case 0x5E/* ^ */:\n    case 0x5F/* _ */:\n    case 0x60/* ` */:\n    case 0x7B/* { */:\n    case 0x7D/* } */:\n    case 0x7E/* ~ */:\n      return true;\n    default:\n      return false;\n  }\n}\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos;\n\n  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {\n    pos++;\n  }\n\n  if (pos === state.pos) { return false; }\n\n  if (!silent) { state.pending += state.src.slice(state.pos, pos); }\n\n  state.pos = pos;\n\n  return true;\n};\n\n// Alternative implementation, for memory.\n//\n// It costs 10% of performance, but allows extend terminators list, if place it\n// to `ParcerInline` property. Probably, will switch to it sometime, such\n// flexibility required.\n\n/*\nvar TERMINATOR_RE = /[\\n!#$%&*+\\-:<=>@[\\\\\\]^_`{}~]/;\n\nmodule.exports = function text(state, silent) {\n  var pos = state.pos,\n      idx = state.src.slice(pos).search(TERMINATOR_RE);\n\n  // first char is terminator -> empty text\n  if (idx === 0) { return false; }\n\n  // no terminator -> text till end of string\n  if (idx < 0) {\n    if (!silent) { state.pending += state.src.slice(pos); }\n    state.pos = state.src.length;\n    return true;\n  }\n\n  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }\n\n  state.pos += idx;\n\n  return true;\n};*/\n","// Proceess '\\n'\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\n\nmodule.exports = function newline(state, silent) {\n  var pmax, max, pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x0A/* \\n */) { return false; }\n\n  pmax = state.pending.length - 1;\n  max = state.posMax;\n\n  // '  \\n' -> hardbreak\n  // Lookup in pending chars is bad practice! Don't copy to other rules!\n  // Pending string is stored in concat mode, indexed lookups will cause\n  // convertion to flat mode.\n  if (!silent) {\n    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {\n      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {\n        state.pending = state.pending.replace(/ +$/, '');\n        state.push('hardbreak', 'br', 0);\n      } else {\n        state.pending = state.pending.slice(0, -1);\n        state.push('softbreak', 'br', 0);\n      }\n\n    } else {\n      state.push('softbreak', 'br', 0);\n    }\n  }\n\n  pos++;\n\n  // skip heading spaces for next line\n  while (pos < max && isSpace(state.src.charCodeAt(pos))) { pos++; }\n\n  state.pos = pos;\n  return true;\n};\n","// Process escaped chars and hardbreaks\n\n'use strict';\n\nvar isSpace = require('../common/utils').isSpace;\n\nvar ESCAPED = [];\n\nfor (var i = 0; i < 256; i++) { ESCAPED.push(0); }\n\n'\\\\!\"#$%&\\'()*+,./:;<=>?@[]^_`{|}~-'\n  .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });\n\n\nmodule.exports = function escape(state, silent) {\n  var ch, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x5C/* \\ */) { return false; }\n\n  pos++;\n\n  if (pos < max) {\n    ch = state.src.charCodeAt(pos);\n\n    if (ch < 256 && ESCAPED[ch] !== 0) {\n      if (!silent) { state.pending += state.src[pos]; }\n      state.pos += 2;\n      return true;\n    }\n\n    if (ch === 0x0A) {\n      if (!silent) {\n        state.push('hardbreak', 'br', 0);\n      }\n\n      pos++;\n      // skip leading whitespaces from next line\n      while (pos < max) {\n        ch = state.src.charCodeAt(pos);\n        if (!isSpace(ch)) { break; }\n        pos++;\n      }\n\n      state.pos = pos;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += '\\\\'; }\n  state.pos++;\n  return true;\n};\n","// Parse backticks\n\n'use strict';\n\nmodule.exports = function backtick(state, silent) {\n  var start, max, marker, matchStart, matchEnd, token,\n      pos = state.pos,\n      ch = state.src.charCodeAt(pos);\n\n  if (ch !== 0x60/* ` */) { return false; }\n\n  start = pos;\n  pos++;\n  max = state.posMax;\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }\n\n  marker = state.src.slice(start, pos);\n\n  matchStart = matchEnd = pos;\n\n  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {\n    matchEnd = matchStart + 1;\n\n    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }\n\n    if (matchEnd - matchStart === marker.length) {\n      if (!silent) {\n        token         = state.push('code_inline', 'code', 0);\n        token.markup  = marker;\n        token.content = state.src.slice(pos, matchStart)\n          .replace(/\\n/g, ' ')\n          .replace(/^ (.+) $/, '$1');\n      }\n      state.pos = matchEnd;\n      return true;\n    }\n  }\n\n  if (!silent) { state.pending += marker; }\n  state.pos += marker.length;\n  return true;\n};\n","// Process [link](<to> \"stuff\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function link(state, silent) {\n  var attrs,\n      code,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      res,\n      ref,\n      title,\n      token,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax,\n      start = state.pos,\n      parseReference = true;\n\n  if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 1;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // might have found a valid shortcut link, disable reference parsing\n    parseReference = false;\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      // parsing a valid shortcut link failed, fallback to reference\n      parseReference = true;\n    }\n    pos++;\n  }\n\n  if (parseReference) {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    state.pos = labelStart;\n    state.posMax = labelEnd;\n\n    token        = state.push('link_open', 'a', 1);\n    token.attrs  = attrs = [ [ 'href', href ] ];\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n\n    state.md.inline.tokenize(state);\n\n    token        = state.push('link_close', 'a', -1);\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process ![image](<src> \"title\")\n\n'use strict';\n\nvar normalizeReference   = require('../common/utils').normalizeReference;\nvar isSpace              = require('../common/utils').isSpace;\n\n\nmodule.exports = function image(state, silent) {\n  var attrs,\n      code,\n      content,\n      label,\n      labelEnd,\n      labelStart,\n      pos,\n      ref,\n      res,\n      title,\n      token,\n      tokens,\n      start,\n      href = '',\n      oldPos = state.pos,\n      max = state.posMax;\n\n  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }\n  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }\n\n  labelStart = state.pos + 2;\n  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);\n\n  // parser failed to find ']', so it's not a valid link\n  if (labelEnd < 0) { return false; }\n\n  pos = labelEnd + 1;\n  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {\n    //\n    // Inline link\n    //\n\n    // [link](  <href>  \"title\"  )\n    //        ^^ skipping these spaces\n    pos++;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n    if (pos >= max) { return false; }\n\n    // [link](  <href>  \"title\"  )\n    //          ^^^^^^ parsing link destination\n    start = pos;\n    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);\n    if (res.ok) {\n      href = state.md.normalizeLink(res.str);\n      if (state.md.validateLink(href)) {\n        pos = res.pos;\n      } else {\n        href = '';\n      }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                ^^ skipping these spaces\n    start = pos;\n    for (; pos < max; pos++) {\n      code = state.src.charCodeAt(pos);\n      if (!isSpace(code) && code !== 0x0A) { break; }\n    }\n\n    // [link](  <href>  \"title\"  )\n    //                  ^^^^^^^ parsing link title\n    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);\n    if (pos < max && start !== pos && res.ok) {\n      title = res.str;\n      pos = res.pos;\n\n      // [link](  <href>  \"title\"  )\n      //                         ^^ skipping these spaces\n      for (; pos < max; pos++) {\n        code = state.src.charCodeAt(pos);\n        if (!isSpace(code) && code !== 0x0A) { break; }\n      }\n    } else {\n      title = '';\n    }\n\n    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {\n      state.pos = oldPos;\n      return false;\n    }\n    pos++;\n  } else {\n    //\n    // Link reference\n    //\n    if (typeof state.env.references === 'undefined') { return false; }\n\n    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {\n      start = pos + 1;\n      pos = state.md.helpers.parseLinkLabel(state, pos);\n      if (pos >= 0) {\n        label = state.src.slice(start, pos++);\n      } else {\n        pos = labelEnd + 1;\n      }\n    } else {\n      pos = labelEnd + 1;\n    }\n\n    // covers label === '' and label === undefined\n    // (collapsed reference link and shortcut reference link respectively)\n    if (!label) { label = state.src.slice(labelStart, labelEnd); }\n\n    ref = state.env.references[normalizeReference(label)];\n    if (!ref) {\n      state.pos = oldPos;\n      return false;\n    }\n    href = ref.href;\n    title = ref.title;\n  }\n\n  //\n  // We found the end of the link, and know for a fact it's a valid link;\n  // so all that's left to do is to call tokenizer.\n  //\n  if (!silent) {\n    content = state.src.slice(labelStart, labelEnd);\n\n    state.md.inline.parse(\n      content,\n      state.md,\n      state.env,\n      tokens = []\n    );\n\n    token          = state.push('image', 'img', 0);\n    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];\n    token.children = tokens;\n    token.content  = content;\n\n    if (title) {\n      attrs.push([ 'title', title ]);\n    }\n  }\n\n  state.pos = pos;\n  state.posMax = max;\n  return true;\n};\n","// Process autolinks '<protocol:...>'\n\n'use strict';\n\n\n/*eslint max-len:0*/\nvar EMAIL_RE    = /^<([a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;\nvar AUTOLINK_RE = /^<([a-zA-Z][a-zA-Z0-9+.\\-]{1,31}):([^<>\\x00-\\x20]*)>/;\n\n\nmodule.exports = function autolink(state, silent) {\n  var tail, linkMatch, emailMatch, url, fullUrl, token,\n      pos = state.pos;\n\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }\n\n  tail = state.src.slice(pos);\n\n  if (tail.indexOf('>') < 0) { return false; }\n\n  if (AUTOLINK_RE.test(tail)) {\n    linkMatch = tail.match(AUTOLINK_RE);\n\n    url = linkMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink(url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += linkMatch[0].length;\n    return true;\n  }\n\n  if (EMAIL_RE.test(tail)) {\n    emailMatch = tail.match(EMAIL_RE);\n\n    url = emailMatch[0].slice(1, -1);\n    fullUrl = state.md.normalizeLink('mailto:' + url);\n    if (!state.md.validateLink(fullUrl)) { return false; }\n\n    if (!silent) {\n      token         = state.push('link_open', 'a', 1);\n      token.attrs   = [ [ 'href', fullUrl ] ];\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n\n      token         = state.push('text', '', 0);\n      token.content = state.md.normalizeLinkText(url);\n\n      token         = state.push('link_close', 'a', -1);\n      token.markup  = 'autolink';\n      token.info    = 'auto';\n    }\n\n    state.pos += emailMatch[0].length;\n    return true;\n  }\n\n  return false;\n};\n","// Process html tags\n\n'use strict';\n\n\nvar HTML_TAG_RE = require('../common/html_re').HTML_TAG_RE;\n\n\nfunction isLetter(ch) {\n  /*eslint no-bitwise:0*/\n  var lc = ch | 0x20; // to lower case\n  return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);\n}\n\n\nmodule.exports = function html_inline(state, silent) {\n  var ch, match, max, token,\n      pos = state.pos;\n\n  if (!state.md.options.html) { return false; }\n\n  // Check start\n  max = state.posMax;\n  if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||\n      pos + 2 >= max) {\n    return false;\n  }\n\n  // Quick fail on second char\n  ch = state.src.charCodeAt(pos + 1);\n  if (ch !== 0x21/* ! */ &&\n      ch !== 0x3F/* ? */ &&\n      ch !== 0x2F/* / */ &&\n      !isLetter(ch)) {\n    return false;\n  }\n\n  match = state.src.slice(pos).match(HTML_TAG_RE);\n  if (!match) { return false; }\n\n  if (!silent) {\n    token         = state.push('html_inline', '', 0);\n    token.content = state.src.slice(pos, pos + match[0].length);\n  }\n  state.pos += match[0].length;\n  return true;\n};\n","// Process html entity - &#123;, &#xAF;, &quot;, ...\n\n'use strict';\n\nvar entities          = require('../common/entities');\nvar has               = require('../common/utils').has;\nvar isValidEntityCode = require('../common/utils').isValidEntityCode;\nvar fromCodePoint     = require('../common/utils').fromCodePoint;\n\n\nvar DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;\nvar NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;\n\n\nmodule.exports = function entity(state, silent) {\n  var ch, code, match, pos = state.pos, max = state.posMax;\n\n  if (state.src.charCodeAt(pos) !== 0x26/* & */) { return false; }\n\n  if (pos + 1 < max) {\n    ch = state.src.charCodeAt(pos + 1);\n\n    if (ch === 0x23 /* # */) {\n      match = state.src.slice(pos).match(DIGITAL_RE);\n      if (match) {\n        if (!silent) {\n          code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);\n          state.pending += isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);\n        }\n        state.pos += match[0].length;\n        return true;\n      }\n    } else {\n      match = state.src.slice(pos).match(NAMED_RE);\n      if (match) {\n        if (has(entities, match[1])) {\n          if (!silent) { state.pending += entities[match[1]]; }\n          state.pos += match[0].length;\n          return true;\n        }\n      }\n    }\n  }\n\n  if (!silent) { state.pending += '&'; }\n  state.pos++;\n  return true;\n};\n","// For each opening emphasis-like marker find a matching closing one\n//\n'use strict';\n\n\nfunction processDelimiters(state, delimiters) {\n  var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,\n      isOddMatch, lastJump,\n      openersBottom = {},\n      max = delimiters.length;\n\n  for (closerIdx = 0; closerIdx < max; closerIdx++) {\n    closer = delimiters[closerIdx];\n\n    // Length is only used for emphasis-specific \"rule of 3\",\n    // if it's not defined (in strikethrough or 3rd party plugins),\n    // we can default it to 0 to disable those checks.\n    //\n    closer.length = closer.length || 0;\n\n    if (!closer.close) continue;\n\n    // Previously calculated lower bounds (previous fails)\n    // for each marker and each delimiter length modulo 3.\n    if (!openersBottom.hasOwnProperty(closer.marker)) {\n      openersBottom[closer.marker] = [ -1, -1, -1 ];\n    }\n\n    minOpenerIdx = openersBottom[closer.marker][closer.length % 3];\n    newMinOpenerIdx = -1;\n\n    openerIdx = closerIdx - closer.jump - 1;\n\n    for (; openerIdx > minOpenerIdx; openerIdx -= opener.jump + 1) {\n      opener = delimiters[openerIdx];\n\n      if (opener.marker !== closer.marker) continue;\n\n      if (newMinOpenerIdx === -1) newMinOpenerIdx = openerIdx;\n\n      if (opener.open &&\n          opener.end < 0 &&\n          opener.level === closer.level) {\n\n        isOddMatch = false;\n\n        // from spec:\n        //\n        // If one of the delimiters can both open and close emphasis, then the\n        // sum of the lengths of the delimiter runs containing the opening and\n        // closing delimiters must not be a multiple of 3 unless both lengths\n        // are multiples of 3.\n        //\n        if (opener.close || closer.open) {\n          if ((opener.length + closer.length) % 3 === 0) {\n            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {\n              isOddMatch = true;\n            }\n          }\n        }\n\n        if (!isOddMatch) {\n          // If previous delimiter cannot be an opener, we can safely skip\n          // the entire sequence in future checks. This is required to make\n          // sure algorithm has linear complexity (see *_*_*_*_*_... case).\n          //\n          lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?\n            delimiters[openerIdx - 1].jump + 1 :\n            0;\n\n          closer.jump  = closerIdx - openerIdx + lastJump;\n          closer.open  = false;\n          opener.end   = closerIdx;\n          opener.jump  = lastJump;\n          opener.close = false;\n          newMinOpenerIdx = -1;\n          break;\n        }\n      }\n    }\n\n    if (newMinOpenerIdx !== -1) {\n      // If match for this delimiter run failed, we want to set lower bound for\n      // future lookups. This is required to make sure algorithm has linear\n      // complexity.\n      //\n      // See details here:\n      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442\n      //\n      openersBottom[closer.marker][(closer.length || 0) % 3] = newMinOpenerIdx;\n    }\n  }\n}\n\n\nmodule.exports = function link_pairs(state) {\n  var curr,\n      tokens_meta = state.tokens_meta,\n      max = state.tokens_meta.length;\n\n  processDelimiters(state, state.delimiters);\n\n  for (curr = 0; curr < max; curr++) {\n    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {\n      processDelimiters(state, tokens_meta[curr].delimiters);\n    }\n  }\n};\n","// Clean up tokens after emphasis and strikethrough postprocessing:\n// merge adjacent text nodes into one and re-calculate all token levels\n//\n// This is necessary because initially emphasis delimiter markers (*, _, ~)\n// are treated as their own separate text tokens. Then emphasis rule either\n// leaves them as text (needed to merge with adjacent text) or turns them\n// into opening/closing tags (which messes up levels inside).\n//\n'use strict';\n\n\nmodule.exports = function text_collapse(state) {\n  var curr, last,\n      level = 0,\n      tokens = state.tokens,\n      max = state.tokens.length;\n\n  for (curr = last = 0; curr < max; curr++) {\n    // re-calculate levels after emphasis/strikethrough turns some text nodes\n    // into opening/closing tags\n    if (tokens[curr].nesting < 0) level--; // closing tag\n    tokens[curr].level = level;\n    if (tokens[curr].nesting > 0) level++; // opening tag\n\n    if (tokens[curr].type === 'text' &&\n        curr + 1 < max &&\n        tokens[curr + 1].type === 'text') {\n\n      // collapse two adjacent text nodes\n      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;\n    } else {\n      if (curr !== last) { tokens[last] = tokens[curr]; }\n\n      last++;\n    }\n  }\n\n  if (curr !== last) {\n    tokens.length = last;\n  }\n};\n","// Inline parser state\n\n'use strict';\n\n\nvar Token          = require('../token');\nvar isWhiteSpace   = require('../common/utils').isWhiteSpace;\nvar isPunctChar    = require('../common/utils').isPunctChar;\nvar isMdAsciiPunct = require('../common/utils').isMdAsciiPunct;\n\n\nfunction StateInline(src, md, env, outTokens) {\n  this.src = src;\n  this.env = env;\n  this.md = md;\n  this.tokens = outTokens;\n  this.tokens_meta = Array(outTokens.length);\n\n  this.pos = 0;\n  this.posMax = this.src.length;\n  this.level = 0;\n  this.pending = '';\n  this.pendingLevel = 0;\n\n  // Stores { start: end } pairs. Useful for backtrack\n  // optimization of pairs parse (emphasis, strikes).\n  this.cache = {};\n\n  // List of emphasis-like delimiters for current tag\n  this.delimiters = [];\n\n  // Stack of delimiter lists for upper level tags\n  this._prev_delimiters = [];\n}\n\n\n// Flush pending text\n//\nStateInline.prototype.pushPending = function () {\n  var token = new Token('text', '', 0);\n  token.content = this.pending;\n  token.level = this.pendingLevel;\n  this.tokens.push(token);\n  this.pending = '';\n  return token;\n};\n\n\n// Push new token to \"stream\".\n// If pending text exists - flush it as text token\n//\nStateInline.prototype.push = function (type, tag, nesting) {\n  if (this.pending) {\n    this.pushPending();\n  }\n\n  var token = new Token(type, tag, nesting);\n  var token_meta = null;\n\n  if (nesting < 0) {\n    // closing tag\n    this.level--;\n    this.delimiters = this._prev_delimiters.pop();\n  }\n\n  token.level = this.level;\n\n  if (nesting > 0) {\n    // opening tag\n    this.level++;\n    this._prev_delimiters.push(this.delimiters);\n    this.delimiters = [];\n    token_meta = { delimiters: this.delimiters };\n  }\n\n  this.pendingLevel = this.level;\n  this.tokens.push(token);\n  this.tokens_meta.push(token_meta);\n  return token;\n};\n\n\n// Scan a sequence of emphasis-like markers, and determine whether\n// it can start an emphasis sequence or end an emphasis sequence.\n//\n//  - start - position to scan from (it should point at a valid marker);\n//  - canSplitWord - determine if these markers can be found inside a word\n//\nStateInline.prototype.scanDelims = function (start, canSplitWord) {\n  var pos = start, lastChar, nextChar, count, can_open, can_close,\n      isLastWhiteSpace, isLastPunctChar,\n      isNextWhiteSpace, isNextPunctChar,\n      left_flanking = true,\n      right_flanking = true,\n      max = this.posMax,\n      marker = this.src.charCodeAt(start);\n\n  // treat beginning of the line as a whitespace\n  lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;\n\n  while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }\n\n  count = pos - start;\n\n  // treat end of the line as a whitespace\n  nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;\n\n  isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));\n  isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));\n\n  isLastWhiteSpace = isWhiteSpace(lastChar);\n  isNextWhiteSpace = isWhiteSpace(nextChar);\n\n  if (isNextWhiteSpace) {\n    left_flanking = false;\n  } else if (isNextPunctChar) {\n    if (!(isLastWhiteSpace || isLastPunctChar)) {\n      left_flanking = false;\n    }\n  }\n\n  if (isLastWhiteSpace) {\n    right_flanking = false;\n  } else if (isLastPunctChar) {\n    if (!(isNextWhiteSpace || isNextPunctChar)) {\n      right_flanking = false;\n    }\n  }\n\n  if (!canSplitWord) {\n    can_open  = left_flanking  && (!right_flanking || isLastPunctChar);\n    can_close = right_flanking && (!left_flanking  || isNextPunctChar);\n  } else {\n    can_open  = left_flanking;\n    can_close = right_flanking;\n  }\n\n  return {\n    can_open:  can_open,\n    can_close: can_close,\n    length:    count\n  };\n};\n\n\n// re-export Token class to use in block rules\nStateInline.prototype.Token = Token;\n\n\nmodule.exports = StateInline;\n","'use strict';\n\n\n////////////////////////////////////////////////////////////////////////////////\n// Helpers\n\n// Merge objects\n//\nfunction assign(obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n\n  sources.forEach(function (source) {\n    if (!source) { return; }\n\n    Object.keys(source).forEach(function (key) {\n      obj[key] = source[key];\n    });\n  });\n\n  return obj;\n}\n\nfunction _class(obj) { return Object.prototype.toString.call(obj); }\nfunction isString(obj) { return _class(obj) === '[object String]'; }\nfunction isObject(obj) { return _class(obj) === '[object Object]'; }\nfunction isRegExp(obj) { return _class(obj) === '[object RegExp]'; }\nfunction isFunction(obj) { return _class(obj) === '[object Function]'; }\n\n\nfunction escapeRE(str) { return str.replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&'); }\n\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar defaultOptions = {\n  fuzzyLink: true,\n  fuzzyEmail: true,\n  fuzzyIP: false\n};\n\n\nfunction isOptionsObj(obj) {\n  return Object.keys(obj || {}).reduce(function (acc, k) {\n    return acc || defaultOptions.hasOwnProperty(k);\n  }, false);\n}\n\n\nvar defaultSchemas = {\n  'http:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.http) {\n        // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.http =  new RegExp(\n          '^\\\\/\\\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'\n        );\n      }\n      if (self.re.http.test(tail)) {\n        return tail.match(self.re.http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'https:':  'http:',\n  'ftp:':    'http:',\n  '//':      {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.no_http) {\n      // compile lazily, because \"host\"-containing variables can change on tlds update.\n        self.re.no_http =  new RegExp(\n          '^' +\n          self.re.src_auth +\n          // Don't allow single-level domains, because of false positives like '//test'\n          // with code comments\n          '(?:localhost|(?:(?:' + self.re.src_domain + ')\\\\.)+' + self.re.src_domain_root + ')' +\n          self.re.src_port +\n          self.re.src_host_terminator +\n          self.re.src_path,\n\n          'i'\n        );\n      }\n\n      if (self.re.no_http.test(tail)) {\n        // should not be `://` & `///`, that protects from errors in protocol name\n        if (pos >= 3 && text[pos - 3] === ':') { return 0; }\n        if (pos >= 3 && text[pos - 3] === '/') { return 0; }\n        return tail.match(self.re.no_http)[0].length;\n      }\n      return 0;\n    }\n  },\n  'mailto:': {\n    validate: function (text, pos, self) {\n      var tail = text.slice(pos);\n\n      if (!self.re.mailto) {\n        self.re.mailto =  new RegExp(\n          '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'\n        );\n      }\n      if (self.re.mailto.test(tail)) {\n        return tail.match(self.re.mailto)[0].length;\n      }\n      return 0;\n    }\n  }\n};\n\n/*eslint-disable max-len*/\n\n// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)\nvar tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';\n\n// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead\nvar tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');\n\n/*eslint-enable max-len*/\n\n////////////////////////////////////////////////////////////////////////////////\n\nfunction resetScanCache(self) {\n  self.__index__ = -1;\n  self.__text_cache__   = '';\n}\n\nfunction createValidator(re) {\n  return function (text, pos) {\n    var tail = text.slice(pos);\n\n    if (re.test(tail)) {\n      return tail.match(re)[0].length;\n    }\n    return 0;\n  };\n}\n\nfunction createNormalizer() {\n  return function (match, self) {\n    self.normalize(match);\n  };\n}\n\n// Schemas compiler. Build regexps.\n//\nfunction compile(self) {\n\n  // Load & clone RE patterns.\n  var re = self.re = require('./lib/re')(self.__opts__);\n\n  // Define dynamic patterns\n  var tlds = self.__tlds__.slice();\n\n  self.onCompile();\n\n  if (!self.__tlds_replaced__) {\n    tlds.push(tlds_2ch_src_re);\n  }\n  tlds.push(re.src_xn);\n\n  re.src_tlds = tlds.join('|');\n\n  function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }\n\n  re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');\n  re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');\n  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');\n  re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');\n\n  //\n  // Compile each schema\n  //\n\n  var aliases = [];\n\n  self.__compiled__ = {}; // Reset compiled data\n\n  function schemaError(name, val) {\n    throw new Error('(LinkifyIt) Invalid schema \"' + name + '\": ' + val);\n  }\n\n  Object.keys(self.__schemas__).forEach(function (name) {\n    var val = self.__schemas__[name];\n\n    // skip disabled methods\n    if (val === null) { return; }\n\n    var compiled = { validate: null, link: null };\n\n    self.__compiled__[name] = compiled;\n\n    if (isObject(val)) {\n      if (isRegExp(val.validate)) {\n        compiled.validate = createValidator(val.validate);\n      } else if (isFunction(val.validate)) {\n        compiled.validate = val.validate;\n      } else {\n        schemaError(name, val);\n      }\n\n      if (isFunction(val.normalize)) {\n        compiled.normalize = val.normalize;\n      } else if (!val.normalize) {\n        compiled.normalize = createNormalizer();\n      } else {\n        schemaError(name, val);\n      }\n\n      return;\n    }\n\n    if (isString(val)) {\n      aliases.push(name);\n      return;\n    }\n\n    schemaError(name, val);\n  });\n\n  //\n  // Compile postponed aliases\n  //\n\n  aliases.forEach(function (alias) {\n    if (!self.__compiled__[self.__schemas__[alias]]) {\n      // Silently fail on missed schemas to avoid errons on disable.\n      // schemaError(alias, self.__schemas__[alias]);\n      return;\n    }\n\n    self.__compiled__[alias].validate =\n      self.__compiled__[self.__schemas__[alias]].validate;\n    self.__compiled__[alias].normalize =\n      self.__compiled__[self.__schemas__[alias]].normalize;\n  });\n\n  //\n  // Fake record for guessed links\n  //\n  self.__compiled__[''] = { validate: null, normalize: createNormalizer() };\n\n  //\n  // Build schema condition\n  //\n  var slist = Object.keys(self.__compiled__)\n                      .filter(function (name) {\n                        // Filter disabled & fake schemas\n                        return name.length > 0 && self.__compiled__[name];\n                      })\n                      .map(escapeRE)\n                      .join('|');\n  // (?!_) cause 1.5x slowdown\n  self.re.schema_test   = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');\n  self.re.schema_search = RegExp('(^|(?!_)(?:[><\\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');\n\n  self.re.pretest = RegExp(\n    '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',\n    'i'\n  );\n\n  //\n  // Cleanup\n  //\n\n  resetScanCache(self);\n}\n\n/**\n * class Match\n *\n * Match result. Single element of array, returned by [[LinkifyIt#match]]\n **/\nfunction Match(self, shift) {\n  var start = self.__index__,\n      end   = self.__last_index__,\n      text  = self.__text_cache__.slice(start, end);\n\n  /**\n   * Match#schema -> String\n   *\n   * Prefix (protocol) for matched string.\n   **/\n  this.schema    = self.__schema__.toLowerCase();\n  /**\n   * Match#index -> Number\n   *\n   * First position of matched string.\n   **/\n  this.index     = start + shift;\n  /**\n   * Match#lastIndex -> Number\n   *\n   * Next position after matched string.\n   **/\n  this.lastIndex = end + shift;\n  /**\n   * Match#raw -> String\n   *\n   * Matched string.\n   **/\n  this.raw       = text;\n  /**\n   * Match#text -> String\n   *\n   * Notmalized text of matched string.\n   **/\n  this.text      = text;\n  /**\n   * Match#url -> String\n   *\n   * Normalized url of matched string.\n   **/\n  this.url       = text;\n}\n\nfunction createMatch(self, shift) {\n  var match = new Match(self, shift);\n\n  self.__compiled__[match.schema].normalize(match, self);\n\n  return match;\n}\n\n\n/**\n * class LinkifyIt\n **/\n\n/**\n * new LinkifyIt(schemas, options)\n * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Creates new linkifier instance with optional additional schemas.\n * Can be called without `new` keyword for convenience.\n *\n * By default understands:\n *\n * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links\n * - \"fuzzy\" links and emails (example.com, foo@bar.com).\n *\n * `schemas` is an object, where each key/value describes protocol/rule:\n *\n * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`\n *   for example). `linkify-it` makes shure that prefix is not preceeded with\n *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.\n * - __value__ - rule to check tail after link prefix\n *   - _String_ - just alias to existing rule\n *   - _Object_\n *     - _validate_ - validator function (should return matched length on success),\n *       or `RegExp`.\n *     - _normalize_ - optional function to normalize text & url of matched result\n *       (for example, for @twitter mentions).\n *\n * `options`:\n *\n * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.\n * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts\n *   like version numbers. Default `false`.\n * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.\n *\n **/\nfunction LinkifyIt(schemas, options) {\n  if (!(this instanceof LinkifyIt)) {\n    return new LinkifyIt(schemas, options);\n  }\n\n  if (!options) {\n    if (isOptionsObj(schemas)) {\n      options = schemas;\n      schemas = {};\n    }\n  }\n\n  this.__opts__           = assign({}, defaultOptions, options);\n\n  // Cache last tested result. Used to skip repeating steps on next `match` call.\n  this.__index__          = -1;\n  this.__last_index__     = -1; // Next scan position\n  this.__schema__         = '';\n  this.__text_cache__     = '';\n\n  this.__schemas__        = assign({}, defaultSchemas, schemas);\n  this.__compiled__       = {};\n\n  this.__tlds__           = tlds_default;\n  this.__tlds_replaced__  = false;\n\n  this.re = {};\n\n  compile(this);\n}\n\n\n/** chainable\n * LinkifyIt#add(schema, definition)\n * - schema (String): rule name (fixed pattern prefix)\n * - definition (String|RegExp|Object): schema definition\n *\n * Add new rule definition. See constructor description for details.\n **/\nLinkifyIt.prototype.add = function add(schema, definition) {\n  this.__schemas__[schema] = definition;\n  compile(this);\n  return this;\n};\n\n\n/** chainable\n * LinkifyIt#set(options)\n * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }\n *\n * Set recognition options for links without schema.\n **/\nLinkifyIt.prototype.set = function set(options) {\n  this.__opts__ = assign(this.__opts__, options);\n  return this;\n};\n\n\n/**\n * LinkifyIt#test(text) -> Boolean\n *\n * Searches linkifiable pattern and returns `true` on success or `false` on fail.\n **/\nLinkifyIt.prototype.test = function test(text) {\n  // Reset scan cache\n  this.__text_cache__ = text;\n  this.__index__      = -1;\n\n  if (!text.length) { return false; }\n\n  var m, ml, me, len, shift, next, re, tld_pos, at_pos;\n\n  // try to scan for link with schema - that's the most simple rule\n  if (this.re.schema_test.test(text)) {\n    re = this.re.schema_search;\n    re.lastIndex = 0;\n    while ((m = re.exec(text)) !== null) {\n      len = this.testSchemaAt(text, m[2], re.lastIndex);\n      if (len) {\n        this.__schema__     = m[2];\n        this.__index__      = m.index + m[1].length;\n        this.__last_index__ = m.index + m[0].length + len;\n        break;\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {\n    // guess schemaless links\n    tld_pos = text.search(this.re.host_fuzzy_test);\n    if (tld_pos >= 0) {\n      // if tld is located after found link - no need to check fuzzy pattern\n      if (this.__index__ < 0 || tld_pos < this.__index__) {\n        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {\n\n          shift = ml.index + ml[1].length;\n\n          if (this.__index__ < 0 || shift < this.__index__) {\n            this.__schema__     = '';\n            this.__index__      = shift;\n            this.__last_index__ = ml.index + ml[0].length;\n          }\n        }\n      }\n    }\n  }\n\n  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {\n    // guess schemaless emails\n    at_pos = text.indexOf('@');\n    if (at_pos >= 0) {\n      // We can't skip this check, because this cases are possible:\n      // 192.168.1.1@gmail.com, my.in@example.com\n      if ((me = text.match(this.re.email_fuzzy)) !== null) {\n\n        shift = me.index + me[1].length;\n        next  = me.index + me[0].length;\n\n        if (this.__index__ < 0 || shift < this.__index__ ||\n            (shift === this.__index__ && next > this.__last_index__)) {\n          this.__schema__     = 'mailto:';\n          this.__index__      = shift;\n          this.__last_index__ = next;\n        }\n      }\n    }\n  }\n\n  return this.__index__ >= 0;\n};\n\n\n/**\n * LinkifyIt#pretest(text) -> Boolean\n *\n * Very quick check, that can give false positives. Returns true if link MAY BE\n * can exists. Can be used for speed optimization, when you need to check that\n * link NOT exists.\n **/\nLinkifyIt.prototype.pretest = function pretest(text) {\n  return this.re.pretest.test(text);\n};\n\n\n/**\n * LinkifyIt#testSchemaAt(text, name, position) -> Number\n * - text (String): text to scan\n * - name (String): rule (schema) name\n * - position (Number): text offset to check from\n *\n * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly\n * at given position. Returns length of found pattern (0 on fail).\n **/\nLinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {\n  // If not supported schema check requested - terminate\n  if (!this.__compiled__[schema.toLowerCase()]) {\n    return 0;\n  }\n  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);\n};\n\n\n/**\n * LinkifyIt#match(text) -> Array|null\n *\n * Returns array of found link descriptions or `null` on fail. We strongly\n * recommend to use [[LinkifyIt#test]] first, for best speed.\n *\n * ##### Result match description\n *\n * - __schema__ - link schema, can be empty for fuzzy links, or `//` for\n *   protocol-neutral  links.\n * - __index__ - offset of matched text\n * - __lastIndex__ - index of next char after mathch end\n * - __raw__ - matched text\n * - __text__ - normalized text\n * - __url__ - link, generated from matched text\n **/\nLinkifyIt.prototype.match = function match(text) {\n  var shift = 0, result = [];\n\n  // Try to take previous element from cache, if .test() called before\n  if (this.__index__ >= 0 && this.__text_cache__ === text) {\n    result.push(createMatch(this, shift));\n    shift = this.__last_index__;\n  }\n\n  // Cut head if cache was used\n  var tail = shift ? text.slice(shift) : text;\n\n  // Scan string until end reached\n  while (this.test(tail)) {\n    result.push(createMatch(this, shift));\n\n    tail = tail.slice(this.__last_index__);\n    shift += this.__last_index__;\n  }\n\n  if (result.length) {\n    return result;\n  }\n\n  return null;\n};\n\n\n/** chainable\n * LinkifyIt#tlds(list [, keepOld]) -> this\n * - list (Array): list of tlds\n * - keepOld (Boolean): merge with current list if `true` (`false` by default)\n *\n * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)\n * to avoid false positives. By default this algorythm used:\n *\n * - hostname with any 2-letter root zones are ok.\n * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф\n *   are ok.\n * - encoded (`xn--...`) root zones are ok.\n *\n * If list is replaced, then exact match for 2-chars root zones will be checked.\n **/\nLinkifyIt.prototype.tlds = function tlds(list, keepOld) {\n  list = Array.isArray(list) ? list : [ list ];\n\n  if (!keepOld) {\n    this.__tlds__ = list.slice();\n    this.__tlds_replaced__ = true;\n    compile(this);\n    return this;\n  }\n\n  this.__tlds__ = this.__tlds__.concat(list)\n                                  .sort()\n                                  .filter(function (el, idx, arr) {\n                                    return el !== arr[idx - 1];\n                                  })\n                                  .reverse();\n\n  compile(this);\n  return this;\n};\n\n/**\n * LinkifyIt#normalize(match)\n *\n * Default normalizer (if schema does not define it's own).\n **/\nLinkifyIt.prototype.normalize = function normalize(match) {\n\n  // Do minimal possible changes by default. Need to collect feedback prior\n  // to move forward https://github.com/markdown-it/linkify-it/issues/1\n\n  if (!match.schema) { match.url = 'http://' + match.url; }\n\n  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {\n    match.url = 'mailto:' + match.url;\n  }\n};\n\n\n/**\n * LinkifyIt#onCompile()\n *\n * Override to modify basic RegExp-s.\n **/\nLinkifyIt.prototype.onCompile = function onCompile() {\n};\n\n\nmodule.exports = LinkifyIt;\n","'use strict';\n\n\nmodule.exports = function (opts) {\n  var re = {};\n\n  // Use direct extract instead of `regenerate` to reduse browserified size\n  re.src_Any = require('uc.micro/properties/Any/regex').source;\n  re.src_Cc  = require('uc.micro/categories/Cc/regex').source;\n  re.src_Z   = require('uc.micro/categories/Z/regex').source;\n  re.src_P   = require('uc.micro/categories/P/regex').source;\n\n  // \\p{\\Z\\P\\Cc\\CF} (white spaces + control + format + punctuation)\n  re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');\n\n  // \\p{\\Z\\Cc} (white spaces + control)\n  re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');\n\n  // Experimental. List of chars, completely prohibited in links\n  // because can separate it from other part of text\n  var text_separators = '[><\\uff5c]';\n\n  // All possible word characters (everything without punctuation, spaces & controls)\n  // Defined via punctuation & spaces to save space\n  // Should be something like \\p{\\L\\N\\S\\M} (\\w but without `_`)\n  re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';\n  // The same as abothe but without [0-9]\n  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';\n\n  ////////////////////////////////////////////////////////////////////////////////\n\n  re.src_ip4 =\n\n    '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';\n\n  // Prohibit any of \"@/[]()\" in user/pass to avoid wrong domain fetch.\n  re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\\\[\\\\]()]).)+@)?';\n\n  re.src_port =\n\n    '(?::(?:6(?:[0-4]\\\\d{3}|5(?:[0-4]\\\\d{2}|5(?:[0-2]\\\\d|3[0-5])))|[1-5]?\\\\d{1,4}))?';\n\n  re.src_host_terminator =\n\n    '(?=$|' + text_separators + '|' + re.src_ZPCc + ')(?!-|_|:\\\\d|\\\\.-|\\\\.(?!$|' + re.src_ZPCc + '))';\n\n  re.src_path =\n\n    '(?:' +\n      '[/?#]' +\n        '(?:' +\n          '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\\\]{}.,\"\\'?!\\\\-]).|' +\n          '\\\\[(?:(?!' + re.src_ZCc + '|\\\\]).)*\\\\]|' +\n          '\\\\((?:(?!' + re.src_ZCc + '|[)]).)*\\\\)|' +\n          '\\\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\\\}|' +\n          '\\\\\"(?:(?!' + re.src_ZCc + '|[\"]).)+\\\\\"|' +\n          \"\\\\'(?:(?!\" + re.src_ZCc + \"|[']).)+\\\\'|\" +\n          \"\\\\'(?=\" + re.src_pseudo_letter + '|[-]).|' +  // allow `I'm_king` if no pair found\n          '\\\\.{2,4}[a-zA-Z0-9%/]|' + // github has ... in commit range links,\n                                     // google has .... in links (issue #66)\n                                     // Restrict to\n                                     // - english\n                                     // - percent-encoded\n                                     // - parts of file path\n                                     // until more examples found.\n          '\\\\.(?!' + re.src_ZCc + '|[.]).|' +\n          (opts && opts['---'] ?\n            '\\\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate\n            :\n            '\\\\-+|'\n          ) +\n          '\\\\,(?!' + re.src_ZCc + ').|' +      // allow `,,,` in paths\n          '\\\\!(?!' + re.src_ZCc + '|[!]).|' +\n          '\\\\?(?!' + re.src_ZCc + '|[?]).' +\n        ')+' +\n      '|\\\\/' +\n    ')?';\n\n  // Allow anything in markdown spec, forbid quote (\") at the first position\n  // because emails enclosed in quotes are far more common\n  re.src_email_name =\n\n    '[\\\\-;:&=\\\\+\\\\$,\\\\.a-zA-Z0-9_][\\\\-;:&=\\\\+\\\\$,\\\\\"\\\\.a-zA-Z0-9_]*';\n\n  re.src_xn =\n\n    'xn--[a-z0-9\\\\-]{1,59}';\n\n  // More to read about domain names\n  // http://serverfault.com/questions/638260/\n\n  re.src_domain_root =\n\n    // Allow letters & digits (http://test1)\n    '(?:' +\n      re.src_xn +\n      '|' +\n      re.src_pseudo_letter + '{1,63}' +\n    ')';\n\n  re.src_domain =\n\n    '(?:' +\n      re.src_xn +\n      '|' +\n      '(?:' + re.src_pseudo_letter + ')' +\n      '|' +\n      '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +\n    ')';\n\n  re.src_host =\n\n    '(?:' +\n    // Don't need IP check, because digits are already allowed in normal domain names\n    //   src_ip4 +\n    // '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)*' + re.src_domain/*_root*/ + ')' +\n    ')';\n\n  re.tpl_host_fuzzy =\n\n    '(?:' +\n      re.src_ip4 +\n    '|' +\n      '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))' +\n    ')';\n\n  re.tpl_host_no_ip_fuzzy =\n\n    '(?:(?:(?:' + re.src_domain + ')\\\\.)+(?:%TLDS%))';\n\n  re.src_host_strict =\n\n    re.src_host + re.src_host_terminator;\n\n  re.tpl_host_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_host_terminator;\n\n  re.src_host_port_strict =\n\n    re.src_host + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_fuzzy_strict =\n\n    re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;\n\n  re.tpl_host_port_no_ip_fuzzy_strict =\n\n    re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;\n\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // Main rules\n\n  // Rude test fuzzy links by host, for quick deny\n  re.tpl_host_fuzzy_test =\n\n    'localhost|www\\\\.|\\\\.\\\\d{1,3}\\\\.|(?:\\\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';\n\n  re.tpl_email_fuzzy =\n\n      '(^|' + text_separators + '|\"|\\\\(|' + re.src_ZCc + ')' +\n      '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';\n\n  re.tpl_link_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';\n\n  re.tpl_link_no_ip_fuzzy =\n      // Fuzzy link can't be prepended with .:/\\- and non punctuation.\n      // but can start with > (markdown blockquote)\n      '(^|(?![.:/\\\\-_@])(?:[$+<=>^`|\\uff5c]|' + re.src_ZPCc + '))' +\n      '((?![$+<=>^`|\\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';\n\n  return re;\n};\n","/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n","// markdown-it default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   100            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {},\n    block: {},\n    inline: {}\n  }\n};\n","// \"Zero\" preset, with nothing enabled. Useful for manual configuring of simple\n// modes. For example, to parse bold/italic only.\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         false,        // Enable HTML tags in source\n    xhtmlOut:     false,        // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'text_collapse'\n      ]\n    }\n  }\n};\n","// Commonmark default options\n\n'use strict';\n\n\nmodule.exports = {\n  options: {\n    html:         true,         // Enable HTML tags in source\n    xhtmlOut:     true,         // Use '/' to close single tags (<br />)\n    breaks:       false,        // Convert '\\n' in paragraphs into <br>\n    langPrefix:   'language-',  // CSS language prefix for fenced blocks\n    linkify:      false,        // autoconvert URL-like texts to links\n\n    // Enable some language-neutral replacements + quotes beautification\n    typographer:  false,\n\n    // Double + single quotes replacement pairs, when typographer enabled,\n    // and smartquotes on. Could be either a String or an Array.\n    //\n    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,\n    // and ['«\\xA0', '\\xA0»', '‹\\xA0', '\\xA0›'] for French (including nbsp).\n    quotes: '\\u201c\\u201d\\u2018\\u2019', /* “”‘’ */\n\n    // Highlighter function. Should return escaped HTML,\n    // or '' if the source string is not changed and should be escaped externaly.\n    // If result starts with <pre... internal wrapper is skipped.\n    //\n    // function (/*str, lang*/) { return ''; }\n    //\n    highlight: null,\n\n    maxNesting:   20            // Internal protection, recursion limit\n  },\n\n  components: {\n\n    core: {\n      rules: [\n        'normalize',\n        'block',\n        'inline'\n      ]\n    },\n\n    block: {\n      rules: [\n        'blockquote',\n        'code',\n        'fence',\n        'heading',\n        'hr',\n        'html_block',\n        'lheading',\n        'list',\n        'reference',\n        'paragraph'\n      ]\n    },\n\n    inline: {\n      rules: [\n        'autolink',\n        'backticks',\n        'emphasis',\n        'entity',\n        'escape',\n        'html_inline',\n        'image',\n        'link',\n        'newline',\n        'text'\n      ],\n      rules2: [\n        'balance_pairs',\n        'emphasis',\n        'text_collapse'\n      ]\n    }\n  }\n};\n"],"sourceRoot":""}