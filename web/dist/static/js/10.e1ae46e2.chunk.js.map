{"version":3,"sources":["components/Blog/Post/Post.js","components/Blog/Pagination/Pagination.js","components/Blog/PostSummariesCell/PostSummariesCell.js","pages/HomePage/HomePage.js"],"names":["md","MarkdownIt","IMAGE_WIDTHS","summary","full","formattedBody","post","output","render","body","truncate","postImageUrl","filename","image","split","pop","Post","className","src","loading","to","routes","slug","title","author","dangerouslySetInnerHTML","__html","date","postedAt","formatDistanceToNow","Date","addSuffix","tags","Pagination","count","page","perPage","items","i","Math","ceil","push","key","home","QUERY","gql","Loading","InlineLoader","variables","parseInt","limit","allPosts","posts","slice","sort","a","b","map","id","HomePage","useParams","PostSummariesCell"],"mappings":";4KAMA,MAAMA,EAAK,IAAIC,IAETC,EAAe,CACnBC,QAAS,IACTC,KAAM,MAOFC,EAAgB,CAACC,EAAMH,KAC3B,IAAII,EAASP,EAAGQ,OAAOF,EAAKG,MAC5B,OAAIN,EACKO,IAASH,EAAQ,KAEnBA,GAGHI,EAAe,CAACL,EAAMH,KAC1B,MAAMS,EAAWN,EAAKO,MAAMC,MAAM,KAAKC,MAGvC,MAAQ,iDAAgDb,EAF3CC,EAAU,UAAY,+BAE+DS,KA0DrFI,IAvDF,EAAGV,OAAMH,WAAU,MAC9B,OACE,6BAASc,UAAU,eACfd,GACA,yBACEe,IAAKP,EAAaL,EAAMH,GACxBc,UAAU,wBACVE,QAAQ,SAGZ,4BAAQF,UAAU,qCAChB,wBAAIA,UAAU,0BACZ,kBAAC,OAAD,CACEG,GAAIC,SAAOf,KAAK,CAAEgB,KAAMhB,EAAKgB,OAC7BL,UAAU,+CAETX,EAAKiB,QAGV,wBAAIN,UAAU,yBAAd,MAA0CX,EAAKkB,SAEjD,yBAAKP,UAAU,QACZd,GACC,yBACEe,IAAKP,EAAaL,EAAMH,GACxBc,UAAU,8BAGd,yBACEA,UAAU,WACVQ,wBAAyB,CAAEC,OAAQrB,EAAcC,EAAMH,MAExDA,GACC,uBAAGc,UAAU,wBACX,kBAAC,OAAD,CACEG,GAAIC,SAAOf,KAAK,CAAEgB,KAAMhB,EAAKgB,OAC7BL,UAAU,iKAFZ,wBASN,4BAAQA,UAAU,gDAChB,0CA/DeU,EA+DcrB,EAAKsB,SA9DjCC,YAAoB,IAAIC,KAAKH,GAAO,CAAEI,WAAW,MA+DjDzB,EAAK0B,MACJ,wBAAIf,UAAU,qBACZ,kBAAC,IAAD,CAASe,KAAM1B,EAAK0B,UAlETL,Q,4FCWRM,MAtBI,EAAGC,QAAOC,OAAMC,cACjC,MAAMC,EAAQ,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIC,KAAKC,KAAKN,EAAQE,GAAUE,IAC9CD,EAAMI,KACJ,wBAAIC,IAAKJ,EAAGrB,UAAU,qCACpB,kBAAC,OAAD,CACEG,GAAIC,SAAOsB,KAAK,CAAER,KAAMG,EAAI,IAC5BrB,UACEkB,IAASG,EAAI,EACT,kDACA,aAGLA,EAAI,KAMb,OAAO,wBAAIrB,UAAU,yBAAyBoB,I,SCjBzC,MAKMO,EAAQC,GAAI;;;;;;;;;;;;;;;;;;;EAqBZC,EAAUC,I,wCA1BI,EAAGZ,OAAMC,cAE3B,CAAEY,UAAW,CAAEb,KADtBA,EAAOA,EAAOc,SAASd,GAAQ,EACGe,MAAOd,K,0BAkCpB,EAAGe,WAAUhB,OAAMC,cACxC,OACE,qCAViBgB,EAWFD,EAASC,MAVnBA,EAAMC,QAAQC,MAAK,CAACC,EAAGC,IACxB,IAAI1B,KAAKyB,EAAE3B,UAAY,IAAIE,KAAK0B,EAAE5B,UAAkB,EACpD,IAAIE,KAAKyB,EAAE3B,UAAY,IAAIE,KAAK0B,EAAE5B,WAAmB,EAClD,KAOwB6B,KAAKnD,GAChC,kBAACU,EAAA,EAAD,CAAM0B,IAAKpC,EAAKoD,GAAIpD,KAAMA,EAAMH,SAAS,MAE3C,kBAAC,EAAD,CAAY+B,MAAOiB,EAASjB,MAAOC,KAAMA,EAAMC,QAASA,KAdzCgB,SCpBNO,UAPE,KACf,IAAI,KAAExB,GAASyB,sBAGf,OAFAzB,EAAOA,GAAQ,EAER,kBAAC0B,EAAD,CAAmB1B,KAAMc,SAASd,GAAOC,QAN3B","file":"static/js/10.e1ae46e2.chunk.js","sourcesContent":["import { formatDistanceToNow } from 'date-fns'\nimport MarkdownIt from 'markdown-it'\nimport truncate from 'html-truncate'\nimport TagList from 'src/components/Blog/TagList'\nimport { Link, routes } from '@redwoodjs/router'\n\nconst md = new MarkdownIt()\n\nconst IMAGE_WIDTHS = {\n  summary: 576,\n  full: 1632,\n}\n\nconst formattedDate = (date) => {\n  return formatDistanceToNow(new Date(date), { addSuffix: true })\n}\n\nconst formattedBody = (post, summary) => {\n  let output = md.render(post.body)\n  if (summary) {\n    return truncate(output, 500)\n  }\n  return output\n}\n\nconst postImageUrl = (post, summary) => {\n  const filename = post.image.split('/').pop()\n  const type = summary ? 'summary' : 'full'\n\n  return `https://cdn.filestackcontent.com/resize=width:${IMAGE_WIDTHS[type]}/auto_image/compress/${filename}`\n}\n\nconst Post = ({ post, summary = false }) => {\n  return (\n    <article className=\"mt-4 mb-12\">\n      {!summary && (\n        <img\n          src={postImageUrl(post, summary)}\n          className=\"mt-1 mb-2 mr-4 w-full\"\n          loading=\"lazy\"\n        />\n      )}\n      <header className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-semibold\">\n          <Link\n            to={routes.post({ slug: post.slug })}\n            className=\"text-indigo-600 hover:bg-indigo-100 rounded\"\n          >\n            {post.title}\n          </Link>\n        </h1>\n        <h2 className=\"text-sm text-gray-600\">by {post.author}</h2>\n      </header>\n      <div className=\"mt-2\">\n        {summary && (\n          <img\n            src={postImageUrl(post, summary)}\n            className=\"float-left mt-1 mr-4 w-48\"\n          />\n        )}\n        <div\n          className=\"markdown\"\n          dangerouslySetInnerHTML={{ __html: formattedBody(post, summary) }}\n        ></div>\n        {summary && (\n          <p className=\"clearfix text-center\">\n            <Link\n              to={routes.post({ slug: post.slug })}\n              className=\"inline-block text-right text-indigo-600 hover:text-indigo-800 text-sm bg-indigo-100 hover:bg-transparent px-2 rounded font-medium hover:bg-indigo-100 rounded\"\n            >\n              Continue reading &raquo;\n            </Link>\n          </p>\n        )}\n      </div>\n      <footer className=\"flex items-center mt-4 text-xs text-gray-600\">\n        <time>Posted: {formattedDate(post.postedAt)}</time>\n        {post.tags && (\n          <ul className=\"flex-1 text-right\">\n            <TagList tags={post.tags} />\n          </ul>\n        )}\n      </footer>\n    </article>\n  )\n}\n\nexport default Post\n","import { Link, routes } from '@redwoodjs/router'\n\nconst Pagination = ({ count, page, perPage }) => {\n  const items = []\n  for (let i = 0; i < Math.ceil(count / perPage); i++) {\n    items.push(\n      <li key={i} className=\"inline-block mx-1 text-indigo-400\">\n        <Link\n          to={routes.home({ page: i + 1 })}\n          className={\n            page === i + 1\n              ? 'py-1 px-3 bg-indigo-100 text-indigo-600 rounded'\n              : 'py-1 px-3'\n          }\n        >\n          {i + 1}\n        </Link>\n      </li>\n    )\n  }\n\n  return <ul className=\"list-none text-center\">{items}</ul>\n}\n\nexport default Pagination\n","import Post from 'src/components/Blog/Post'\nimport Pagination from 'src/components/Blog/Pagination'\nimport InlineLoader from 'src/components/InlineLoader/InlineLoader'\n\nexport const beforeQuery = ({ page, perPage }) => {\n  page = page ? parseInt(page) : 1\n  return { variables: { page: page, limit: perPage } }\n}\n\nexport const QUERY = gql`\n  query ALL_POSTS_PAGED($page: Int, $limit: Int) {\n    allPosts(page: $page, limit: $limit) {\n      posts {\n        id\n        title\n        slug\n        author\n        body\n        image\n        postedAt\n        tags {\n          id\n          name\n        }\n      }\n      count\n    }\n  }\n`\n\nexport const Loading = InlineLoader\n\nconst sortedPosts = (posts) => {\n  return posts.slice().sort((a, b) => {\n    if (new Date(a.postedAt) < new Date(b.postedAt)) return 1\n    if (new Date(a.postedAt) > new Date(b.postedAt)) return -1\n    return 0\n  })\n}\n\nexport const Success = ({ allPosts, page, perPage }) => {\n  return (\n    <>\n      {sortedPosts(allPosts.posts).map((post) => (\n        <Post key={post.id} post={post} summary={true} />\n      ))}\n      <Pagination count={allPosts.count} page={page} perPage={perPage} />\n    </>\n  )\n}\n","import { useParams } from '@redwoodjs/router'\nimport PostSummariesCell from 'src/components/Blog/PostSummariesCell'\n\nconst POSTS_PER_PAGE = 5\n\nconst HomePage = () => {\n  let { page } = useParams()\n  page = page || 1\n\n  return <PostSummariesCell page={parseInt(page)} perPage={POSTS_PER_PAGE} />\n}\n\nexport default HomePage\n"],"sourceRoot":""}