{"version":3,"sources":["../../../src/functions/checking/checking.js"],"names":["handler","event","context","logger","info","statusCode","headers","body","data"],"mappings":";;;;;;;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,OAAO,GAAG,OAAOC,KAAP,EAAcC,OAAd,KAA0B;AAC/CC,iBAAOC,IAAP,CAAY,2BAAZ;;AAEA,SAAO;AACLC,IAAAA,UAAU,EAAE,GADP;AAELC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFJ;AAMLC,IAAAA,IAAI,EAAE,wBAAe;AACnBC,MAAAA,IAAI,EAAE;AADa,KAAf;AAND,GAAP;AAUD,CAbM","sourcesContent":["import { logger } from 'src/lib/logger'\n\n/**\n * The handler function is your code that processes http request events.\n * You can use return and throw to send a response or error, respectively.\n *\n * Important: When deployed, a custom serverless function is an open API endpoint and\n * is your responsibility to secure appropriately.\n *\n * @see {@link https://redwoodjs.com/docs/serverless-functions#security-considerations|Serverless Function Considerations}\n * in the RedwoodJS documentation for more information.\n *\n * @typedef { import('aws-lambda').APIGatewayEvent } APIGatewayEvent\n * @typedef { import('aws-lambda').Context } Context\n * @param { APIGatewayEvent } event - an object which contains information from the invoker.\n * @param { Context } context - contains information about the invocation,\n * function, and execution environment.\n */\nexport const handler = async (event, context) => {\n  logger.info('Invoked checking function')\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n\n    body: JSON.stringify({\n      data: 'checking function',\n    }),\n  }\n}\n"],"file":"checking.js"}