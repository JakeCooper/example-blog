{
  "version": 3,
  "sources": ["../../../src/functions/checking/checking.js", "../../../../node_modules/_redwood-linked-packages/core/esbuild/apiGlobals.js", "../../../src/lib/logger.js"],
  "sourcesContent": ["import { logger } from 'src/lib/logger'\n\n/**\n * The handler function is your code that processes http request events.\n * You can use return and throw to send a response or error, respectively.\n *\n * Important: When deployed, a custom serverless function is an open API endpoint and\n * is your responsibility to secure appropriately.\n *\n * @see {@link https://redwoodjs.com/docs/serverless-functions#security-considerations|Serverless Function Considerations}\n * in the RedwoodJS documentation for more information.\n *\n * @typedef { import('aws-lambda').APIGatewayEvent } APIGatewayEvent\n * @typedef { import('aws-lambda').Context } Context\n * @param { APIGatewayEvent } event - an object which contains information from the invoker.\n * @param { Context } context - contains information about the invocation,\n * function, and execution environment.\n */\nexport const handler = async (event, context) => {\n  logger.info('Invoked checking function')\n\n  return {\n    statusCode: 200,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n\n    body: JSON.stringify({\n      data: 'checking function',\n    }),\n  }\n}\n", "/* eslint-env node, commonjs */\n\nglobal.gql = require('graphql-tag')\n\nconst { context } = require('@redwoodjs/api')\nglobal.context = context\n", "import { createLogger } from '@redwoodjs/api/logger'\n\n/**\n * Creates a logger with RedwoodLoggerOptions\n *\n * These extend and override default LoggerOptions,\n * can define a destination like a file or other supported pino log transport stream,\n * and sets whether or not to show the logger configuration settings (defaults to false)\n *\n * @param RedwoodLoggerOptions\n *\n * RedwoodLoggerOptions have\n * @param {options} LoggerOptions - defines how to log, such as pretty printing, redaction, and format\n * @param {string | DestinationStream} destination - defines where to log, such as a transport stream or file\n * @param {boolean} showConfig - whether to display logger configuration on initialization\n */\nexport const logger = createLogger({\n  options: { level: 'trace', prettyPrint: true },\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACEA,OAAO,MAAM,QAAQ;AAErB,IAAM,EAAE,YAAY,QAAQ;AAC5B,OAAO,UAAU;;;ACLjB,oBAA6B;AAgBtB,IAAM,SAAS,gCAAa;AAAA,EACjC,SAAS,EAAE,OAAO,SAAS,aAAa;AAAA;;;AFCnC,IAAM,UAAU,OAAO,OAAO,aAAY;AAC/C,SAAO,KAAK;AAEZ,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,SAAS;AAAA,MACP,gBAAgB;AAAA;AAAA,IAGlB,MAAM,KAAK,UAAU;AAAA,MACnB,MAAM;AAAA;AAAA;AAAA;",
  "names": []
}
