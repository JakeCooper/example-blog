{
  "version": 3,
  "sources": ["../../src/functions/graphql.js", "../../../node_modules/_redwood-linked-packages/core/esbuild/apiGlobals.js", "../../src/graphql/posts.sdl.js", "../../src/graphql/tags.sdl.js", "glob-imports:src/graphql/**/*.{js,ts}", "../../src/services/posts/posts.js", "../../src/lib/db.js", "../../src/lib/logger.js", "../../src/lib/auth.js", "../../src/services/tags/tags.js", "glob-imports:src/services/**/*.{js,ts}"],
  "sourcesContent": ["import {\n  createGraphQLHandler,\n  makeMergedSchema,\n  makeServices,\n} from '@redwoodjs/api'\n\nimport schemas from 'src/graphql/**/*.{js,ts}'\nimport services from 'src/services/**/*.{js,ts}'\nimport { getCurrentUser } from 'src/lib/auth.js'\nimport { db } from 'src/lib/db'\n\nexport const handler = createGraphQLHandler({\n  getCurrentUser,\n  schema: makeMergedSchema({\n    schemas,\n    services: makeServices({ services }),\n  }),\n  onException: () => {\n    // Disconnect from your database with an unhandled exception.\n    db.$disconnect()\n  },\n})\n", "/* eslint-env node, commonjs */\n\nglobal.gql = require('graphql-tag')\n\nconst { context } = require('@redwoodjs/api')\nglobal.context = context\n", "export const schema = gql`\n  type Post {\n    id: ID!\n    title: String!\n    slug: String!\n    body: String!\n    author: String!\n    image: String\n    postedAt: DateTime\n    tags: [Tag]\n  }\n\n  type PostsSet {\n    posts: [Post]!\n    count: Int!\n  }\n\n  type Query {\n    allPosts(page: Int, limit: Int): PostsSet\n    findPostById(id: ID): Post\n    findPostBySlug(slug: String): Post\n    findPostsByTag(tag: String): [Post]\n    searchPosts(term: String): [Post]\n  }\n\n  input PostInput {\n    title: String!\n    slug: String!\n    author: String!\n    body: String!\n    image: String\n    postedAt: DateTime\n  }\n\n  type Mutation {\n    createPost(input: PostInput!): Post\n    updatePost(id: ID!, input: PostInput!): Post\n    hidePost(id: ID!): Post\n    deletePost(id: ID!): Post\n  }\n`\n", "export const schema = gql`\n  type Tag {\n    id: ID!\n    name: String\n  }\n\n  type Query {\n    tags: [Tag]\n  }\n`\n", "\n        import * as src_graphql_po_sdl_js from './src/graphql/posts.sdl.js'\nimport * as src_graphql_tags_sdl from './src/graphql/tags.sdl.js'\n        export default {\n          src_graphql_po_sdl_js: src_graphql_po_sdl_js,\nsrc_graphql_tags_sdl: src_graphql_tags_sdl\n        }", "import { UserInputError } from '@redwoodjs/api'\nimport { db } from 'src/lib/db'\nimport { logger } from 'src/lib/logger'\nimport { requireAuth } from 'src/lib/auth'\n\nconst validate = (input) => {\n  if (input.slug && !input.slug.match(/^\\S+$/)) {\n    throw new UserInputError(\"Can't create new post\", {\n      messages: {\n        slug: ['contains invalid characters (no spaces allowed)'],\n      },\n    })\n  }\n}\n\nexport const allPosts = async ({\n  page = 1,\n  limit = 100,\n  order = { postedAt: 'desc' },\n}) => {\n  logger.debug({ page, limit, order }, 'In all posts')\n  const offset = (page - 1) * limit\n\n  return {\n    posts: db.post.findMany({\n      include: { tags: true },\n      take: limit,\n      skip: offset,\n      orderBy: order,\n    }),\n    count: db.post.count(),\n  }\n}\n\nexport const findPostById = ({ id }) => {\n  logger.debug({ id }, 'In findPostById')\n\n  return db.post.findUnique({\n    where: { id: parseInt(id) },\n    include: { tags: true },\n  })\n}\n\nexport const findPostBySlug = ({ slug }) => {\n  logger.debug({ slug }, 'In findPostBySlug')\n\n  return db.post.findUnique({\n    where: { slug: slug },\n    include: { tags: true },\n  })\n}\n\nexport const findPostsByTag = ({ tag }) => {\n  return db.tag\n    .findUnique({\n      where: { name: tag },\n    })\n    .posts({ include: { tags: true } })\n}\n\nexport const searchPosts = ({ term }) => {\n  logger.debug({ term }, 'In searchPosts')\n\n  return db.post.findMany({\n    where: {\n      OR: [{ title: { contains: term } }, { body: { contains: term } }],\n    },\n    include: { tags: true },\n  })\n}\n\nexport const postsCount = () => {\n  return db.post.count().then((count) => ({ count }))\n}\n\nexport const createPost = ({ input }, { context: { currentUser } }) => {\n  requireAuth()\n  validate(input)\n\n  return db.post.create({ data: input })\n}\n\nexport const updatePost = ({ id, input }, { context: { currentUser } }) => {\n  requireAuth()\n  validate(input)\n\n  return db.post.update({ data: input, where: { id: Number(id) } })\n}\n\nexport const hidePost = ({ id }, { context: { currentUser } }) => {\n  requireAuth()\n\n  return db.post.update({\n    data: { postedAt: null },\n    where: { id: parseInt(id) },\n  })\n}\n\nexport const deletePost = ({ id }, { context: { currentUser } }) => {\n  requireAuth()\n\n  return db.post.delete({\n    where: { id: Number(id) },\n  })\n}\n", "// See https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/constructor\n// for options.\n\nimport { PrismaClient } from '@prisma/client'\n\nimport { emitLogLevels, handlePrismaLogging } from '@redwoodjs/api/logger'\n\nimport { logger } from './logger'\n\n/*\n * Instance of the Prisma Client\n */\nexport const db = new PrismaClient({\n  log: emitLogLevels(['info', 'warn', 'error']),\n})\n\nhandlePrismaLogging({\n  db,\n  logger,\n  logLevels: ['info', 'warn', 'error'],\n})\n", "import { createLogger } from '@redwoodjs/api/logger'\n\n/**\n * Creates a logger with RedwoodLoggerOptions\n *\n * These extend and override default LoggerOptions,\n * can define a destination like a file or other supported pino log transport stream,\n * and sets whether or not to show the logger configuration settings (defaults to false)\n *\n * @param RedwoodLoggerOptions\n *\n * RedwoodLoggerOptions have\n * @param {options} LoggerOptions - defines how to log, such as pretty printing, redaction, and format\n * @param {string | DestinationStream} destination - defines where to log, such as a transport stream or file\n * @param {boolean} showConfig - whether to display logger configuration on initialization\n */\nexport const logger = createLogger({\n  options: { level: 'trace', prettyPrint: true },\n})\n", "// Define what you want `currentUser` to return throughout your app. For example,\n// to return a real user from your database, you could do something like:\n//\n//   export const currentuser = async ({ email }) => {\n//     return await db.user.findUnique({ where: { email } })\n//   }\n\nimport { AuthenticationError } from '@redwoodjs/api'\n\nexport const getCurrentUser = async (jwt) => {\n  return jwt\n}\n\n// Use this function in your services to check that a user is logged in, and\n// optionally raise an error if they're not.\n\nexport const requireAuth = () => {\n  if (!context.currentUser) {\n    throw new AuthenticationError()\n  }\n}\n", "import { db } from 'src/lib/db'\n\nexport const tags = () => db.tag.findMany()\n", "\n        import * as src_services_po_posts_js from './src/services/posts/posts.js'\nimport * as src_services_tags_tags from './src/services/tags/tags.js'\n        export default {\n          src_services_po_posts_js: src_services_po_posts_js,\nsrc_services_tags_tags: src_services_tags_tags\n        }"],
  "mappings": "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",
  "names": []
}
