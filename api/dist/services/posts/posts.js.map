{"version":3,"sources":["../../../src/services/posts/posts.js"],"names":["validate","input","slug","match","UserInputError","messages","allPosts","page","limit","order","postedAt","logger","debug","offset","posts","db","post","findMany","include","tags","take","skip","orderBy","count","findPostById","id","findUnique","where","findPostBySlug","findPostsByTag","tag","name","searchPosts","term","OR","title","contains","body","postsCount","then","createPost","context","currentUser","create","data","updatePost","update","Number","hidePost","deletePost","delete"],"mappings":"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","sourcesContent":["import { UserInputError } from '@redwoodjs/api'\nimport { db } from 'src/lib/db'\nimport { logger } from 'src/lib/logger'\nimport { requireAuth } from 'src/lib/auth'\n\nconst validate = (input) => {\n  if (input.slug && !input.slug.match(/^\\S+$/)) {\n    throw new UserInputError(\"Can't create new post\", {\n      messages: {\n        slug: ['contains invalid characters (no spaces allowed)'],\n      },\n    })\n  }\n}\n\nexport const allPosts = async ({\n  page = 1,\n  limit = 100,\n  order = { postedAt: 'desc' },\n}) => {\n  logger.debug({ page, limit, order }, 'In all posts')\n  const offset = (page - 1) * limit\n\n  return {\n    posts: db.post.findMany({\n      include: { tags: true },\n      take: limit,\n      skip: offset,\n      orderBy: order,\n    }),\n    count: db.post.count(),\n  }\n}\n\nexport const findPostById = ({ id }) => {\n  logger.debug({ id }, 'In findPostById')\n\n  return db.post.findUnique({\n    where: { id: parseInt(id) },\n    include: { tags: true },\n  })\n}\n\nexport const findPostBySlug = ({ slug }) => {\n  logger.debug({ slug }, 'In findPostBySlug')\n\n  return db.post.findUnique({\n    where: { slug: slug },\n    include: { tags: true },\n  })\n}\n\nexport const findPostsByTag = ({ tag }) => {\n  return db.tag\n    .findUnique({\n      where: { name: tag },\n    })\n    .posts({ include: { tags: true } })\n}\n\nexport const searchPosts = ({ term }) => {\n  logger.debug({ term }, 'In searchPosts')\n\n  return db.post.findMany({\n    where: {\n      OR: [{ title: { contains: term } }, { body: { contains: term } }],\n    },\n    include: { tags: true },\n  })\n}\n\nexport const postsCount = () => {\n  return db.post.count().then((count) => ({ count }))\n}\n\nexport const createPost = ({ input }, { context: { currentUser } }) => {\n  requireAuth()\n  validate(input)\n\n  return db.post.create({ data: input })\n}\n\nexport const updatePost = ({ id, input }, { context: { currentUser } }) => {\n  requireAuth()\n  validate(input)\n\n  return db.post.update({ data: input, where: { id: Number(id) } })\n}\n\nexport const hidePost = ({ id }, { context: { currentUser } }) => {\n  requireAuth()\n\n  return db.post.update({\n    data: { postedAt: null },\n    where: { id: parseInt(id) },\n  })\n}\n\nexport const deletePost = ({ id }, { context: { currentUser } }) => {\n  requireAuth()\n\n  return db.post.delete({\n    where: { id: Number(id) },\n  })\n}\n"],"file":"posts.js"}