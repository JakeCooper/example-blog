{"version":3,"sources":["../../src/lib/auth.js"],"names":["getCurrentUser","jwt","requireAuth","context","currentUser","AuthenticationError"],"mappings":";;;;;;;;;;AAOA;;AAPA;AACA;AACA;AACA;AACA;AACA;AAIO,MAAMA,cAAc,GAAG,MAAOC,GAAP,IAAe;AAC3C,SAAOA,GAAP;AACD,CAFM,C,CAIP;AACA;;;;;AAEO,MAAMC,WAAW,GAAG,MAAM;AAC/B,MAAI,CAACC,aAAQC,WAAb,EAA0B;AACxB,UAAM,IAAIC,wBAAJ,EAAN;AACD;AACF,CAJM","sourcesContent":["// Define what you want `currentUser` to return throughout your app. For example,\n// to return a real user from your database, you could do something like:\n//\n//   export const currentuser = async ({ email }) => {\n//     return await db.user.findUnique({ where: { email } })\n//   }\n\nimport { AuthenticationError } from '@redwoodjs/api'\n\nexport const getCurrentUser = async (jwt) => {\n  return jwt\n}\n\n// Use this function in your services to check that a user is logged in, and\n// optionally raise an error if they're not.\n\nexport const requireAuth = () => {\n  if (!context.currentUser) {\n    throw new AuthenticationError()\n  }\n}\n"],"file":"auth.js"}